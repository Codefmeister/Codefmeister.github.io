[{"content":"Moravec Detector Moravec角点检测是第一个提出兴趣点(interest points)的Paper。它的主要思想是：以每个像素为中心，有一个固定的滑动窗口。该方法计算并在八个方向上（纵横以及斜对角）搜索每个像素的最小强度变化，如果最小值大于给定阈值，则检测出感兴趣点。\n其可以用数学公式表达为：$E(u, v)=\\sum_{x, y} w(x, y)[I(x+u, y+v)-I(x, y)]^{2}$\n  $E(u,v)$代表像素中心$(x,y)$在偏移量$(u,v)$的方向上的强度变化。\n  $w(x,y)$是一个指示函数，当$(x,y)$在滑动窗口内时，为1，若在滑动窗口外，则为0.\n  $I(x,y)$指的是在像素点(x,y)处的光强或者说是灰度值。\n  值得说明的是，这个式子是Harris总结的。\nHarris Corner Detector Moravec存在着许多不足。非常重要的一点就是：由于对于灰度值变化的梯度判断是离散的进行在8个方向，所以不具有旋转不变性；同时还会出现误判，尤其是当一条线不平行于这八个方向时，线上的点也会被误检测为角点。\n为了进一步改进Moravec角点检测，Harris提出了著名的Harris角点检测。\n$$ \\begin{aligned} \u0026amp;E(u, v)=\\sum_{(x, y)} w(x, y)[I(x+u, y+v)-I(x, y)]^{2}\\\n\u0026amp;\\approx \\sum_{(x, y)} w(x, y)\\left[I(x, y)+\\frac{\\partial I}{\\partial x}(x, y) u+\\frac{\\partial I}{\\partial y}(x, y) v-I(x, y)\\right]^{2}\\qquad\\text { (一阶泰勒展开) }\\\n\u0026amp;\\approx \\sum_{(x, y)} w(x, y)\\left[\\frac{\\partial I}{\\partial x}(x, y) u+\\frac{\\partial I}{\\partial y}(x, y) v\\right]^{2} \\qquad \\text { (消除重复项) }\\\n\u0026amp;=\\sum_{x, y} w(x, y)\\left(u^{2} f_{x}^{2}(x, y)+2 u v f_{x}(x, y) f_{y}(x, y)+v^{2} f_{y}^{2}(x, y)\\right)\\text { }\\\n\u0026amp;\\begin{array}{l} =\\sum_{x, y} w(x, y)\\left(u^{2} I_{x}^{2}+2 u v I_{x} I_{y}+v^{2} I_{y}^{2}\\right)\\qquad \\text { (简化) } \\\n=\\left[\\begin{array}{ll} u \u0026amp; v \\end{array}\\right]\\left(\\sum w(x, y)\\left[\\begin{array}{cc} I_{x}^{2} \u0026amp; I_{x} I_{y} \\\nI_{x} I_{y} \u0026amp; I_{y}^{2} \\end{array}\\right]\\right)\\left[\\begin{array}{l} u \\\nv \\end{array}\\right] \\\n=\\left[\\begin{array}{l} u \\\nv \\end{array}\\right]^{T} H\\left[\\begin{array}{l} u \\\nv \\end{array}\\right] \\end{array} \\end{aligned} $$ 可以看到，E的变化主要与H的大小相关。所以只需要分析H的变化就可以得到E的变化趋势。\n图像梯度：$\\Delta I(x, y)=\\left(\\frac{\\partial I}{\\partial x}(x, y), \\frac{\\partial I}{\\partial y}(x, y)\\right)$\nHarris矩阵：$H=\\left[\\begin{array}{cc}\\sum_{(x, y)} w(x, y)\\left(\\frac{\\partial I}{\\partial x}(x, y)\\right)^{2} \u0026amp; \\left.\\sum_{(x, y)} w(x, y)\\left(\\frac{\\partial I}{\\partial x}(x, y)\\right) \\frac{\\partial I}{\\partial y}(x, y)\\right) \\ \\left.\\sum_{(x, y)} w(x, y)\\left(\\frac{\\partial I}{\\partial x}(x, y)\\right) \\frac{\\partial I}{\\partial y}(x, y)\\right) \u0026amp; \\sum_{(x, y)} w(x, y)\\left(\\frac{\\partial I}{\\partial y}(x, y)\\right)^{2}\\end{array}\\right]$\nw：表示权重，可以是0/1， 也可以是以点为中心的高斯权重。\n图像的水平梯度与垂直梯度：$I_{x}=\\frac{\\partial I(x+u, y+v)}{\\partial x} \\quad I_{y}=\\frac{\\partial I(x+u, y+v)}{\\partial y}$\nHarris矩阵的特征值分析 对于图像：\n 平坦区域：梯度方向各异，但是梯度幅值变化不大 线性边缘：梯度幅值改变较大，梯度方向改变不大 角点：梯度方向和梯度幅值变化都较大  $\\mathbf{H}$就是Harris矩阵。对其进行奇异值分解，两个特征值分别反映互相垂直方向上的梯度变化情况，分别代表最快和最慢的方向。特征值大的变化快，特征值小的变化慢。\n进行特征值分解：$S V D(H)=U \\sum V,\\left(\\lambda_{1}, \\lambda_{2}\\right), \\quad \\lambda_{1}\u0026gt;\\lambda_{2}$\n那么就有：\n 特征值都比较大，则窗口中含有角点。 特征值一个比较大，一个比较小，则窗口中含有边缘线。 特征值都比较小，则处在平坦区域。  Harris角点准则 $$\\operatorname{det} H=\\lambda_{1} \\lambda_{2}$$\n$$\\operatorname{trace} H=\\lambda_{1}+\\lambda_{2}$$\n所以某点的响应函数：\n$R=\\operatorname{det}(H)-\\operatorname{ktrace}(H)^{2}=\\lambda_{1} \\lambda_{2}-k\\left(\\lambda_{1}+\\lambda_{2}\\right)^{2}, k=0.04$\n利用C与阈值比较判断，来判断其是否是角点。\n $R\u0026lt;0$ 边缘点 $R \\approx 0$ 平坦点 $R \u0026gt; 0$ 角点  Shi-Tomasi 角点检测 在Harris角点检测的基础上，Shi和Tomasi 在1993的一篇论文《Good Features to track》中提出了基于Harris角点检测的Shi-Tomasi方法。\nHarris角点检测的稳定性与k值有关，而k是个经验值。不好设定。\n在此基础上，Shi与Tomasi发现，焦点的稳定性与矩阵的娇小的特征值有关，直接使用较小的特征值作为分数。\n所以： $R=\\min \\left(\\lambda_{1}, \\lambda_{2}\\right)$\n","date":"2021-03-02T00:00:00Z","permalink":"https://codefmeister.github.io/p/harris-%E8%A7%92%E7%82%B9/","title":"Harris 角点"},{"content":"Stochastic Matrix  Definition:\nIn mathematics, a stochastic matrix is a square matrix used to describe the transitions of a Markov chain. Each of its entries is a nonnegative real number representing a probability. It is also called a probability matrix, transition matrix, substitution matrix, or Markov matrix. There are several different definitions and types of stochastic matrices\nA right stochastic matrix is a real square matrix, with each row summing to 1.\nA left stochastic matrix is a real square matrix, with each column summing to 1.\nA doubly stochastic matrix is a square matrix of nonnegative real numbers with each row and column summing to 1\n 在数学上，随机矩阵Stochastic Matrix 是一个用于描述马尔科夫链转移的方阵，其每个元素都是一个非负实值，代表一个概率。 它也被称为 概率矩阵 Probability Matrix, 转移矩阵Transition Matrix, 替代矩阵 Substitution Matrix, 或者 马尔科夫矩阵 Markov Matrix.\nRight stochastic matrix Right stochastic matrix 是一个实值方阵，其每一行的和是1.\nLeft stochastic matrix Left stochastic matrix 是一个实值方阵，其每一列的和是1.\nDoubly stochastic matrix Doubly stochastic matrix 是一个方阵，其行列的和均为1.\nPermutation Matrix Permutation Matrix， 置换矩阵，是一种特殊的Doubly stochastic matrix. 其元素是0与1，置换矩阵的每一行和每一列都恰好有一个1，其余元素都是0\n","date":"2021-02-06T00:00:00Z","permalink":"https://codefmeister.github.io/p/stochastic-matrix-doubly-stochastic-matrix-permutation-matrix/","title":"Stochastic Matrix, Doubly Stochastic Matrix, Permutation Matrix"},{"content":"Abstract ICP算法可以解决刚体点云配准问题，其首先进行hard-assignment，寻找空间中的最近点对的对应关系。其次再解决最小二乘问题。 基于空间最近距离的hard-assignment 对于初始的位姿以及噪音和离群点十分敏感，所以鲁棒性不高，经常会收敛到局部最优。\n在此Paper中，作者提出了RPM-Net，一个对于初始刚体变换不敏感，同时更加鲁棒的，基于深度学习的点云配准方法。为了达到这个目的，作者使用了可微分的Sinkhorn层，随后利用从空间坐标和局部几何结构中学习得到的混合特征，退火(annealing)得到点对间的soft assignment软匹配结果。 同时，为了进一步的提高配准的精度，我们引入了一个二次网络，用于预测最优的退火(annealing)参数。 不同于目前已有的方法，RPM-Net可以处理缺失对应点对关系和部分重叠的点云。实验结果表明，RPM-Net可以达到state-of-art。\nIntroduction 点云配准问题，是指给定的两帧未知对应点对关系的点云，寻找刚体变换关系，将其配准在一起。不论是获得点对之间的对应关系，还是得到刚体变换参数，都会使剩下的问题微不足道。\nICP，广泛应用。 对初始变换关系和噪音和离群点敏感，容易收敛到局部最优。ICP算法的深度学习实现(Deep Closest Point)通过深度学习得到的特征来进行对应点对关系，使得其对初始位姿不敏感，但其仍对outliers不鲁棒， 同时对于部分重叠的点云无法很好的工作。\n为了解决ICP的问题，人们提出了许多方法。其中非常突出的一篇便是\u0026quot;RPM\u0026quot;，Robust Point Matching，它首先对点对对应关系进行soft assignment， 然后逐步通过确定的退火策略一步步harden 对应关系。纵然RPM比ICP更加鲁棒，但其仍然对于初始刚体变化十分敏感，容易陷入局部最优，原因在于其点对对应关系只是单独的从空间距离中得到的。另一方面，基于特征的方法避免了初始位姿的问题，其通过挖掘独特的keypoint，同时使用特征描述符对keypoint局部几何特征进行描述。使用这些keypoint进行match， 然后使用鲁棒的RANSAC（随机抽样一致性）策略，来鲁棒地计算出刚体变换关系。此类方法只对几何特征显著的点云效果很好。\n此Paper中提出了，基于深度学习的RPM策略，RPM-Net： 一个端到端的可微分的深度网络，不但保留了RPM对于噪音和离群点的鲁棒性，同时从学习到的特征距离而不是spatial的点对对应关系来对初始化进行脱敏处理。为了达到此目的，我们设计了一个特征提取网络，从逐点的空间坐标以及几何特征中，计算得到其混合特征。随后使用Sinkhorn层与退火策略，从混合特征中得到soft assignment.空间坐标与几何属性的混合，与从数据中的学习过程，改进了点对关系。这对初始化刚体变换关系进行了脱敏处理，同时增加了对于缺失对应点对关系以及部分重叠的点云之间的配准能力。类似于ICP算法以及其变种，RPM-Net也是迭代地对刚体变换进行求精。进一步，我们引入了一个子网络，基于当前的配准状态，来预测最优的退火参数。也就是说，我们的退火策略并不是固定好的某个模式，而是在学习过程中动态生成的。因为使用了混合特征，我们的算法可以在很小的几次迭代后就收敛。\n其贡献:\n 其用于配准的网络架构 其引入的用于预测退火参数的子网络 提出一个改良的倒角距离度量Modified Chamfer distance metric， 用于度量部分重叠的配准质量。 对比实验  Background 该工作是基于RPM框架完成的，这里将简单介绍RPM的工作。\n首先定义一个Match Matrix匹配矩阵$\\mathbf{M}={0,1}^{J \\times K}$, 来表示点的对应关系的分配。其中每个元素： $$ m_{j k}=\\left{\\begin{array}{ll} 1 \u0026amp; \\text { if point } \\mathbf{x}_{j} \\text { corresponds to } \\mathbf{y}_{k} \\\n0 \u0026amp; \\text { otherwise } \\end{array}\\right. \\tag{1} $$\n首先考虑每个点都有其对应点（即one to one）的情况，在这种情况下，$\\mathbf{M}$是一个方阵。配准问题可以被表示为寻找将点云$\\mathbf{X}$上的点映射到$\\mathbf{Y}$的最优刚体变换关系${\\mathbf{R}, \\mathbf{t}}$ 和对应矩阵$\\mathbf{M}$. 即： $$ \\underset{\\mathbf{M}, \\mathbf{R}, \\mathbf{t}}{\\arg \\min } \\sum_{j=1}^{J} \\sum_{k=1}^{K} m_{j k}\\left(\\left|\\mathbf{R} \\mathbf{x}_{j}+\\mathbf{t}-\\mathbf{y}_{k}\\right|_{2}^{2}-\\alpha\\right) \\tag{2} $$ 且服从如下约束： $\\sum_{k=1}^{K} m_{j k}=1, \\forall j; \\sum_{j=1}^{J} m_{j k}=1, \\forall k; m_{j k} \\in{0,1}, \\forall j k$.\n这三个约束使得$\\mathbf{M}$成为一个置换矩阵 Permutation Matrix。 $\\alpha$ 是控制对应关系数量的参数，用来拒绝离群点： 对于任意点对$\\left(\\mathbf{x}{j}, \\mathbf{y}{k}\\right)$, 如果其距离$\\left|\\mathbf{R} \\mathbf{x}{j}+\\mathbf{t}-\\mathbf{y}{k}\\right|{2}^{2}\u0026lt;\\alpha$， 其会被考虑为inlier， 因为此时将$m{jk}$设置为1，可以降低Eq.2的cost.\n","date":"2021-01-31T00:00:00Z","permalink":"https://codefmeister.github.io/p/rpm-net%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"RPM-Net论文阅读笔记"},{"content":"0. Abstract 从三维点云或者扫描帧中提取出几何特征是许多任务例如配准，场景重建等的第一步。现有的领先的方法都是将low-level的特征作为输入，或者在有限的感受野上提取得到基于patch的特征。本文提出的是一个全卷积几何特征提取网络，名为fully-convolutional geometric features。 通过一个3D的全卷积网络的一次pass，即可得到几何特征。 同时提出了一个新的度量学习的loss函数，可以显著的提高网络的性能。 FCGF的几何特征十分紧凑，可以捕捉广阔的上下文空间，并缩放到大型场景中。在室内（3D Match）和室外（KITTI）数据集上进行验证的结果显示，其达到了state-of-art的精确率，而且并不需要数据的预处理，并且很紧凑（32维的特征），比其余最精确的方法快290倍。\n1. Introduction 寻找几何意义上的点对关系是很多三维任务十分重要的一步。因此，大量的工作集中于设计三维特征，以捕捉具有可判别性的局部几何机构，来建立点对关系。\n基于学习的三维特征由于其鲁棒性与出色的性能表现，在最近得到了广泛的关注。现有的基于学习的特征提取工作大都依赖于低阶的几何特征作为输入，例如角度偏差，点的分布，或者体积距离函数等。随后，对每个兴趣点(point of interest)提取一个三维patch，然后通过多层感知机或者三维卷积层将之映射到一个低维的特征空间。这个过程计算代价高昂，而且只能够提取得到降采样后兴趣点处的特征，因此会降低后续配准步骤中的空间分辨率。\n上述的基于patch的处理过程效率很低，因为其中间网络的激活结果并没有在相邻的patch上进行复用。用2D卷积进行类比，对某个兴趣点提取其三维patch与对某个像素块提取其周围的一个像素patch类似。不仅如此，现有的pipeline仅局限于对空间范围有限的patch进行卷积，限制了空间语境的解读。\n不同于上文所述，我们应用一个可以作用于整个输入的三维卷积操作，而不需要裁剪片段，该操作是通过将卷积转换为全卷积的子项来完成的（convolution组装得到一个fully convolution）。 相似的，我们将MLP中的全连接层用一系列卷积层来替代，其卷积核的size为1x1x1。 全卷积网络与非全卷积网络相比，可以捕捉更广阔的上下文，更快，内存效率更高。其原因在于中间的激活结果在重叠的区域上进行了复用。\n尽管有这些优势，全卷积网络因为三维数据的(一些)特点并未在三维特征提取中得到广泛的应用。一个对三维数据进行卷积的卷积网络的标准输入代表是一个稠密的四维tensor，其中三维是空间维度，还有一个特征维。这种表示方式对内存消耗很大，很多voxel都是空的。\n在本文的工作中，采用了一种稀疏的tensor表示法。同时，针对全卷积上的度量学习，提出了一个新的loss函数。因为观察到全卷积特征不同于传统的度量学习的假设，传统的度量学习由于锚点都是随机采样的，所以假设样本是独立同分布的，而在全卷积网络中，相邻的点的特征是高度相关的。并不符合独立同分布的假设，所以需要重新设计loss函数。同时，该方法并不需要对数据进行低阶的预处理，或者提取三维patch，可以快速的生成高分辨率的， 具有state-of-art的判别潜力的特征。\nFCGF在室内室外数据集上均进行了测试，可以达到state-of-art的性能表现，比最快的快9倍，比最好的快290倍。\n2. Related Work Hand-craft 3D feature：早期对三维特征的描述集中在手工的，能够有区别的（有基于feature鉴别的潜力 discriminatively）的对局部几何特征进行刻画的描述符。Spin Images [16] use a projection of adjacent points onto the tangent plane. USC [29] uses covariance matrices of point pairs. SHOT [26] creates a 3D histogram of normal vectors. PFH [24] and FPFH [23] build an oriented histogram using pairwise geometric properties. Guo et al. [13] provide a comprehensive review of such hand-crafted descriptors\nLearning-based 3D feature： 最近，注意力大都转移到了基于学习的三维特征提取。Zeng et al. [36] use a siamese convolutional network to learn 3D patch de- scriptors. Khoury et al. [17] map 3D oriented histograms to a low-dimensional feature space using multi-layer per- ceptrons. Deng et al. [7, 6] adapt the PointNet architecture for geometric feature description. Yew and Lee [34] use a PointNet to extract features in outdoor scenes.\n我们的工作指出了一系列先前工作的局限性。首先，所有先前的方法都需要提取一个小的三维patch，或者一系列点，然后将其映射到低维特征空间，这不但限制了网络的感受野，也使得计算效率很低。甚至是在有重叠的三维区域上，所有中间的表示都需要分别计算。 其次，使用了昂贵的低阶几何特征作为输入，会降低特征计算的速度。 最后， 将特征提取限制在一个兴趣点的子集中，降低了空间的分辨率，会降低后续工作的精确度。Fully-convolutional networks: 全卷积网络是由Long在图像领域中提出的。三维领域中常被用于语义分割。全卷积网络的广泛应用主要源于其三个优势：首先，全卷积网络效率很高，计算速度快，因为中间激活结果可以在感受野有重叠的神经元上共享。其次，全卷积网络中的神经元有着更加广阔的感受野，因为其不再被限制在分别提取和处理过的patch上。第三点，全卷积网络的输出是稠密的。非常适合需要对场景进行详细描述的任务。Deep metric learning: 深度度量学习结合了深度神经网络和传统的度量学习，来生成紧凑的embedding。The contrastive loss formulates the objective in terms of pairwise constraints [14]. There has also been significant interest in higher-order loss terms, including triplet [32], quadruplet [18], and histogram losses [30]. Due to the polynomial growth in complexity that accompanies high-order losses, many recent papers focus on triplets with hard-negative mining within a batch. Lifted structure [28] and N-pair losses [27] proposed using a softmax for mining hard negatives within a batch.\n在本文中，我们研究了全卷积度量学习，其基本的立足点是： 一个batch内特征是独立同分布的假设不再成立。为了解决这一问题，提出了新的loss函数。\n3. Sparse Tensors and Convolutions 空间中的三维点云数据往往是稀疏的，我们使用稀疏矩阵的高阶等价形式\u0026ndash;稀疏张量。数学上，我们可以将三维数据的稀疏张量表示为坐标$C$和相关特征$F$的集合： $$ C=\\left[\\begin{array}{cccc} x_{1} \u0026amp; y_{1} \u0026amp; z_{1} \u0026amp; b_{1} \\\n\\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \\\nx_{N} \u0026amp; y_{N} \u0026amp; z_{N} \u0026amp; b_{N} \\end{array}\\right], F=\\left[\\begin{array}{c} \\mathbf{f}_{1}^{T} \\\n\\vdots \\\n\\mathbf{f}_{N}^{T} \\end{array}\\right] \\tag{1} $$\n其中$x_{i}, y_{i}, z_{i} \\in \\mathbb{Z}$是第i个三维坐标, $b_i$是batch的索引，为batch processing 提供了一个额外的维度，$\\mathbf{f_i}$是与第i个点相关的特征。\n在稀疏张量上进行卷积需要一种与传统卷积不同的定义。在离散，稠密的三维卷积(discrete, dense convolution)中，我们提取输入特征然后与dense kernel matrix相乘。用$\\mathcal{V}^{n}(K)$表示n维空间中的一组偏移量，其中$K$是核尺寸。例如，在一维卷积中，$\\mathcal{V}^1(3) = {-1, 0, 1}$. 那么传统的稠密离散的三维卷积可以被定义为Eq.2，其中$W_i$代表在偏移$i$处的kernel value. $$ \\mathbf{x}{\\mathbf{u}}^{\\text {out }}=\\sum{\\mathbf{i} \\in \\mathcal{V}^{3}(K)} W_{\\mathbf{i}} \\mathbf{x}_{\\mathbf{u}+\\mathbf{i}}^{\\text {in }} \\text { for } \\mathbf{u} \\in \\mathbb{Z}^{3} \\tag{2} $$\n这个公式乍一看可能有点懵，但实际上十分简单，$\\mathbf{u} \\in \\mathbb{Z}^3$是欲求得特征的点的三维坐标，因为并不是在实数域上，所以是离散的(discrete)，但在每个可能位置都可以卷积，所以又是稠密的。 而$\\mathbf{i} \\in \\mathcal{V}^3(K)$是三维意义上的偏离量，$\\mathbf{i}$的可能取值例如有：(1,1,1), (1,0,1)等等。 而$\\mathbf{u} + \\mathbf{i}$就代表了偏移后的坐标，$\\mathbf{x}_{\\mathbf{u}+\\mathbf{i}}^{\\text{in}}$是在该偏移坐标上的输入（可能是坐标，也可能是一些低阶特征），乘以对应的kernel value，然后Sum起来，就完成了卷积操作。\n但与相反，稀疏张量在$\\mathbf{u}$处可以求得特征，当且仅当其对应点即$\\mathbf{u} + \\mathbf{i}$在集合$C$中。因此，只在子集$\\mathcal{N}^{n}(\\mathbf{u}, K, C)=\\left{\\mathbf{i} \\mid \\mathbf{i} \\in \\mathcal{V}^{n}(K), \\mathbf{i}+\\mathbf{u} \\in C\\right}$上进行卷积操作就足够了。该集合$\\mathcal{N}$是$\\mathbf{i}$的集合，$\\mathbf{i}$满足既是偏移量，与$\\mathbf{u}$相加后又在$C$上有定义。如果想让$C^{\\text{in}}$和$C^{\\text{out}}$的坐标不同（即输入的稀疏张量指定的点的坐标与想要得到的特征的空间点坐标不同），我们可以这样定义这种泛化意义下的稀疏卷积操作，如Eq.3所示： $$ \\mathbf{x}{\\mathbf{u}}^{\\prime \\text { out }}=\\sum{\\mathbf{i} \\in \\mathcal{N}^{3}\\left(\\mathbf{u}, K, C^{\\text {in }}\\right)} W_{\\mathbf{i}} \\mathbf{x}_{\\mathbf{u}+\\mathbf{i}}^{\\text {in }} \\text { for } \\mathbf{u} \\in C^{\\text {out }} \\tag{3} $$\nSparse fully-convolutional features: 全卷积网络纯粹由平移不变操作构成，例如卷积操作和基于元素的非线性操作。相似的，如果我们对一个稀疏张量应用一个稀疏的卷积网络，我们会得到一个稀疏的输出张量。我们将这个输出的张量叫做\u0026quot;fully convolutional features\u0026quot;。 我们使用一个带有skip connection 和 残差模块的UNet架构去提取fully convolutional features. 其架构如下图：\n白色块代表着输入和输出层，每个block都由三个参数指定: kernel size, stride, channel dimensionality. 所有的卷积操作（除了最后一层）后都应用了一个batch norm和一个ReLU.\n如果对sparse tensor 和 dense tensor以及对应的卷积操作仍有些迷糊，可以看下图：\nDense Tensor and its convolution\nSparse Tensor and its convolution\n4. Fully-convolutional Metric Learning 在本节中，我们首先简单回顾一些标准的度量学习损失函数，以及负样本挖掘技术(negative-mining)。随后，我们描述了在全卷积设置下的度量学习，提出了全卷积特征的变种(variants for fully-convolutional features) ， 其将负样本挖掘技术整合于二元误差(contrastive loss)和三元组误差(triplet loss)中。将这种新的loss称为“hardest-contrastive”和\u0026quot;hardest-triplet\u0026quot;.\n度量学习的出发点有两个约束：相似的feature之间要彼此很近。$D\\left(\\mathbf{f}{i}, \\mathbf{f}{j}\\right) \\rightarrow 0 \\quad \\forall(i, j) \\in \\mathcal{P}$, 而不相似的特征之间的必须要有一个margin以上的距离。$D\\left(\\mathbf{f}{i}, \\mathbf{f}{j}\\right)\u0026gt;m \\quad \\forall(i, j) \\in \\mathcal{N}$，其中$D(\\cdot, \\cdot)$是距离度量函数。将之间的差距进行平方后就能得到一个标准的contrastive loss。但是Lin指出，positive pairs的约束太过严苛，$D\\left(\\mathbf{f}{i}, \\mathbf{f}{j}\\right) \\rightarrow 0 \\quad \\forall(i, j) \\in \\mathcal{P}$，可能会导致过拟合，于是将0也替换为了一个Positive Margin。 $$ L\\left(\\mathbf{f}{i}, \\mathbf{f}{j}\\right)=I_{i j}\\left[D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)-m_{p}\\right]_{+}^{2}+\\bar{I}_{i j}\\left[m_{n}-D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)\\right]_{+}^{2} $$ 其中当$(i,j) \\in \\mathcal{P}$ 时，$I_{ij}=1$。 否则为0。 $\\bar{\\cdot}$ 是逻辑非运算符。$m_p$和$m_n$是positive pair和negative pair的margin。\n类似的，我们可以将ranking constraint 即 $m+D\\left(\\mathbf{f}, \\mathbf{f}{+}\\right)\u0026lt;D\\left(\\mathbf{f}, \\mathbf{f}{-}\\right)$转换为三元组的Loss 函数是： $$ L\\left(\\mathbf{f}, \\mathbf{f}{+}, \\mathbf{f}{-}\\right)=\\left[m+D\\left(\\mathbf{f}, \\mathbf{f}{+}\\right)-D\\left(\\mathbf{f}, \\mathbf{f}{-}\\right)\\right]_{+}^{2} $$\n不管是对contrastive loss 还是对 triplet loss， 采样策略都会极大的影响性能，因为判别的边界往往是由几个非常少的难负例决定的。(hardest negatives)\n4.1 Characteristics of Fully-convolutional Features 传统的度量学习假定： 特征feature是独立同分布的，因为batch是通过随机采样来构建的。然而，在全卷积特征提取中，相邻的feature之间是局部相关的。因此，难负例挖掘(hard-negative mining)会找到与锚点相邻的特征们，但是他们是假的负例。（难负例的定义是很难判别的负例，所以要再次送入网络进行学习。但是这里锚点相邻的特征是局部相关的，所以其在度量上接近是情有可原的，不是负例。）所以，将假负例过滤掉是十分重要的，这里采用距离阈值进行过滤。\n此外，在全卷积设置下使用的特征数量比标准的度量学习算法中高出若干个数量级。因此，像标准的度量学习那样对batch内的所有成对距离是不可行的。\n4.2 Hardest-contrastive 和 Hardest-triplet Losses 在这一节中，我们提出了用于全卷积特征学习的度量学习误差。 像其他的算法一样，我们关注的是有效的难负例挖掘。 首先我们对锚点和每一场景中待挖掘的集合进行采样。随后我们挖掘positive pair $\\left(\\mathbf{f}{i}, \\mathbf{f}{j}\\right)$中$\\mathbf{f}i$和$\\mathbf{f}j$对应的最难负例$\\mathbf{f}{i}^{-}, \\mathbf{f}{j}^{-}$。同时去除落在对应锚点的一个确定半径中的假负例。 随后，我们对挖掘得到的四元组$\\left(\\mathbf{f}{i}, \\mathbf{f}{j}, \\mathbf{f}{i}^{-}, \\mathbf{f}{j}^{-}\\right)$使用成对损失，得到了convolutional contrastive loss.\n$$ \\begin{aligned} L_{C} \u0026amp;=\\sum_{(i, j) \\in \\mathcal{P}}\\left{\\left[D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)-m_{p}\\right]_{+}^{2} /|\\mathcal{P}|\\right.\\\n\u0026amp;+\\lambda_{n} I_{i}\\left[m_{n}-\\min _{k \\in \\mathcal{N}} D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{k}\\right)\\right]_{+}^{2} /\\left|\\mathcal{P}_{i}\\right| \\\n\u0026amp;\\left.+\\lambda_{n} I_{j}\\left[m_{n}-\\min _{k \\in \\mathcal{N}} D\\left(\\mathbf{f}_{j}, \\mathbf{f}_{k}\\right)\\right]_{+}^{2} /\\left|\\mathcal{P}_{j}\\right|\\right} \\end{aligned} \\tag{5} $$ 其中$\\mathcal{P}$是minibatch中在全卷积提取的features上所有的positive pair的集合。而$\\mathcal{N}$是minibatch中全卷积feature的一个随机子集，用于负例挖掘。$I_i$是$I(i, k_i, d_t)$的缩写， 是一个指示函数。当特征$k_i$在以特征$i$为中心，$d_t$为半径的球体外时，指示函数取值为1. 反之取0. 其中$k_{i}=\\operatorname{argmin}_{k \\in \\mathcal{N}} D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{k}\\right)$， 即$k$是挖掘到的最难的负例。$\\left|\\mathcal{P}_{i}\\right|=\\sum_{(i, j) \\in \\mathcal{P}} I\\left(i, k_{i}, d_{t}\\right)$是第一项中有效的负挖掘数目。$\\left|\\mathcal{P}_{j}\\right|$是第二项的。通过简单的对所有有效的负例pair等权的进行平均来进行归一化处理。$\\lambda_n$是权重。\n类似的，带有最难负例挖掘的三元组的loss： $$ \\begin{aligned} L_{T} \u0026amp;=\\frac{1}{Z} \\sum_{(i, j) \\in \\mathcal{P}}\\left(I\\left(i, k_{i}\\right)\\left[m+D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)-\\min _{k \\in \\mathcal{N}} D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{k}\\right)\\right]_{+}\\right.\\\n\u0026amp;\\left.+I\\left(j, k_{j}\\right)\\left[m+D\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)-\\min _{k \\in \\mathcal{N}} D\\left(\\mathbf{f}_{j}, \\mathbf{f}_{k}\\right)\\right]_{+}\\right) \\end{aligned} \\tag{6} $$ 其中$Z=\\sum_{(i, j) \\in \\mathcal{P}}\\left(I\\left(i, k_{i}\\right)+I\\left(j, k_{j}\\right)\\right)$， 一个归一化常数。 $\\mathcal{P}$是batch中在全卷积提取的features上所有的positive pair的集合。 需要注意的是，这里延续了Hermans在其工作中提出的思路，使用了non-squared loss（即误差项没有进行平方）来缓和特征会塌陷于一点的问题。实验中我们发现，fully-convolutional hardest triplet loss会崩溃（所有特征全部收敛到一个点）。所以，我们使用了随机采样的三元组和最难负例挖掘的三元组进行混合的策略，来减小误差。这两项的权重等同。\nCode解读 Wait to update\n","date":"2021-01-13T00:00:00Z","permalink":"https://codefmeister.github.io/p/fcgf%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"FCGF论文阅读笔记"},{"content":"Learning multiview 3D point cloud registration Abstract 提出了一种全新的，端到端的，可学习的多视角三维点云配准算法。 多视角配准往往需要两个阶段：第一个阶段进行初始化配准，给定点云各帧之间两两的初始化刚体变换关系；第二个阶段在全局意义上进行不断精细化处理。前者往往由于点云之间的低重叠率，对称性，或者重复的场景片段而导致配准精度较差。因此，紧随其后的全局优化（Global Refinement）的目标就是在多个点云帧中建立一种循环一致性(cyclic consistency).\n而此文章提出了一种算法，将两个阶段融合在一起进行端对端的交替学习。在公认的基准数据集上的实验评估表明，其方法显著优于state-of-art，而且又是端到端可训练的，所需要的计算资源也更少。此外，其还进行了详细的分析和烧蚀试验去验证其方法的novel part.\n1. Introduction 三维计算机视觉的下游任务，如语义分割和目标检测，通常需要场景的整体表示。因此，将仅覆盖环境一小部分的单个点云配准和融合为一个全局一致的完整表示的能力是十分重要的，而且在增强现实和机器人技术中有着不少用例。相邻片段之间的双视角配准是一个被深入研究过的问题，传统的基于几何约束[51, 66, 56] 和手工设计的特征描述符[37, 27, 54, 69]的配准方法在某种程度上取得了成功。然而， 近些年，用于双视角三维点云配准的局部描述符的研究聚焦于深度学习方法[67: 3DMatch, 38, 21: Ppfnet, 64, 19: Ppf-foldnet, 28: perfect match]，这些方法成功捕捉并编码了隐藏在手工特征符下的证据。在此基础上，一些全新的端到端的双视角点云配准方法最近被提出[62: DCP, 42: Deepvcp]。 虽然双视角配准在很多任务中展现出了不错的性能，但对场景中的多个点云帧进行配准时，其存在一些概念上的缺陷：(1) 相邻点云之间的低重合率会导致不精确或者错误的匹配。(2) 点云配准必须依赖于非常局部的特征，对于3D场景结构简单或者重复结构较多的情况十分有害。(3)在两两配准之后，需要进行单独的处理来将所有双视角配准结果组合为一个全局表示。与双视角配准相比，应用于无组织的点云片段上的全局一致的多视角配准方法能够更充分的从深度学习技术取得的进步中获益。 现有的领先方法仍然常常依赖于双视角映射的良好初始化（良好的初值），然后再在后续的步骤中通过一系列解耦的步骤进行全局优化。这种分层处理的一大缺点在于，姿态图所有节点上的全局噪声分布在配准结束后远不是随机的。也就是说，由于配准结果和初始的双视角映射高度相关，会存在着不可忽视的误差。\n在这篇论文中，作者提出了第一个端到端的，数据驱动的多视角点云配准算法。其方法以可能存在重叠关系的点云集合为输入，对每个点云帧输出一个刚体变换矩阵。我们从传统的两阶段方法中跳脱出来，让各个阶段彼此分离，直接学习以一种全局一致的方式对所有点云帧进行配准。\n其工作的主要贡献在于：\n  将传统的两阶段方法用端到端的神经网络的方式阐述，在其前传过程中，主要解决了两个可微分的最优化问题：(i)对两两点云之间刚体变换参数估计的Procrustes问题。(ii) 刚体变换同步的谱松弛(spectral relaxation)问题\n  提出了一个置信度估计模块，其使用了一个新颖的overlap pooling layer重叠池化层来预测估算得到的双视角刚体变换参数的可信度。\n  将多视角三维点云配准问题转换为迭代重加权最小二乘问题(IRLS)，迭代地优化两两配准之间的刚体变换估计和绝对坐标意义下的刚体变换估计（全局）。\n  因为以上所提到的工作，所提出的多视角点云配准算法是(i) 计算效率很高 (ii) 可以达到更加精确的配准结果，因为残差会以一种迭代的方式被送回双视角配准网络中去。 (iii)不论是双视角配准还是多视角配准，都比现有的方法的精度要高，效果要好。\n2. Related Work Pairwise registration: 传统的双视角配准pipeline包含两个阶段： the coarse alignment stage（粗配准）， 为相对刚体变换参数提供一个初始估计；the refinement stage 通过迭代最小化配准误差，不断优化刚体变换参数。\n前者常常通过使用或者手工的，或者学习到的三维局部特征描述符结合类似RANSAC的鲁棒估计或者集合哈希来得到点对之间的对应关系。A parallel stream of works relies on establishing correspodences using the 4-point congruent sets. 在refinement stage，粗糙的刚体变换参数往往通过ICP算法的一个变种提高精度。 ICP类算法通过交替假设点集之间的对应关系和估计其新的刚体变换参数，来达到最优化的目的。但ICP对于离群点不具有鲁棒性，只有在初始的参数估计较好的情况下，才会收敛到全局最优。ICP算法往往通过添加额外的radiometric, temporal or odometry 约束来进行扩展。与我们工作同时进行的，DCP和Dvcp提出了将粗配准和精配准集成的端到端的可学习算法。\nMultiview Registration 多视角全局点云配准方法之目标在于通过结合多个视角提供的线索，解决双视角配准应用困难或结果很模糊的情况。第一类方法族使用一种多视角的ICP类模式对位姿和三维点对的对应关系进行优化。其中大多数都受到了增加的点对间对应关系估计复杂性的影响。为了减轻这种影响，有些方法只对运动进行优化，使用扫描来评估配准的误差。更进一步，其他的现代方法利用全局的循环一致性，只对初始时(指定的)点云间两两映射关系的集合进行优化。(通常情况下都是其他帧与第一帧进行配准) 这种有效的方法称之为同步synchronaization。 来自运动的全局结构旨在通过分解旋转，平移和缩放变量来同步观测到的相对运动。[23 Deep Mapping]提出了一个使用两个网络进行全局点云配准的方法，一个网络用于位姿估计，另一个通过估计全局坐标的占用状态来对场景结构建模。\n或许与此文最相似的工作是[35], 作者旨在通过学习以数据驱动的加权函数来适应刚体变换同步层(transformation synchronization layer)的边缘权值。一个主要的概念上的不同在于其相对刚体变换是通过FPFH结合FGR进行估算而得的，因此不同于本文，本文的刚体变换关系是由学习得到的。此外，在每次迭代中，[35]提出的方法必须将点云转换为一个深度图像，然后再使用一个二维的卷积操作来近似一个权重函数。而本文的方法直接作用于点云，是完全可微分的，所以有助于端到端的多视角全局配准学习。\n3. End-to-End Multiview 3D Registration 在这一节中，我们将所提出的多视角三维配准算法作为基于数据的函数的组合进行阐述。而用于近似这些函数的网络架构将在第4节中阐述其细节。我们首先从一个全新的基于学习的双视角点云配准算法开始，其以两个点云作为输入，输出是估计得到的刚体变换矩阵参数。(3.1节) 该方法通过使用一个可反向传播的转换同步层(transformation synchronization)拓展到多点云(3.2)。同步层的输入图作为边缘信息与相对刚体变换参数一起编码为这些成对映射的置信度，该输入图同样是使用一个新的神经网络进行估计得到的。最后，我们提出了一个IRLS模式(3.3)通过更新边的权重和两两点云间的位姿来不断细化全局配准结果。\n考虑一个可能存在重叠的点云集合$S = {\\bold{S_i} \\in \\mathbb{R^{N \\times 3}}, 1 \\leqslant i \\leqslant N_S}$. 多视角配准的任务是恢复刚体绝对位姿${ M_i^* \\in SE(3)}$，给定了扫描集合，其中：\n$$ S E(3)=\\left{\\mathbf{M} \\in \\mathbb{R}^{4 \\times 4}: \\mathbf{M}=\\left[\\begin{array}{cc} \\mathbf{R} \u0026amp; \\mathbf{t} \\\n\\mathbf{0}^{\\top} \u0026amp; 1 \\end{array}\\right]\\right} \\tag{1} $$\n$R_i \\in SO(3)$ ，$t_i \\in \\mathbb{R}^3$。 $S$可以通过连接信息表示为一个有限图$\\mathcal{G}=(\\mathcal{S}, \\mathcal{E})$，其中每个点代表着一个单独的点集，边编码了$(i,j) \\in \\mathcal{E}$ 两个顶点间的相对旋转$R_{ij}$, 平移$t_{ij}$的信息。 相对刚体变换参数满足：$R_{ij} = R_{ji}^T$, $t_{ij} = -R_{ij}^Tt_{ji}$，同时还需满足compatibility constraint： $$ R_{ij} \\approx R_iR_j^T $$ $$ t_{ij} \\approx -R_iR_j^Tt_j + t_i $$\n在当前的state-of-art工作中，图G中的边集E是使用一个单独的，辅助的配准算法进行两两配准进行初始化的。而全局场景的一致性是通过后续同步算法来实现的。 与之相反，文中提出了一种联合的方法，通过将双视角配准与刚体变换同步紧密耦合为一个完全可微分的组件，提供了一种端到端的，可学习的全局配准pipeline3.1 Pairwise registration of point clouds (双视角配准) 在本节中，我们提出了一个可微分，双视角配准算法，可以十分轻松地与端到端的多视角三维配准算法结合起来。用${ P,Q} := { S_i, S_j | i \\ne j }$表示一对点云，其中$(P)l =: p_l \\in \\mathbb{R}^3$, $(Q)l =: q_l \\in \\mathbb{R}^3$分别代表在点云$P \\in \\mathbb{R}^{N_P \\times 3}$和$Q \\in \\mathbb{R}^{N_Q \\times 3}$中的每个点的坐标向量。而双视角配准的目标便是去恢复最优刚体变换矩阵$\\hat {R{ij}}$和$\\hat t{ij}$. $$ \\hat R_{ij}, \\hat t_{ij} = \\mathop {\\arg \\min }\\limits_{{R_{ij}},{t_{ij}}} \\sum\\limits_{i = 1}^{{N_P}} {\\left| {R_{ij}p_l + t_{ij} - \\phi(p_l, Q)} \\right|}^2 \\tag 3 $$\n其中$\\phi (p, Q)$是一个对应关系函数，用于将点$p$映射到其在点云$Q$中的对应点。等式（3）中的公式中便于求得一个可微的封闭形式的解，它受噪声分布的影响，接近于真值解。然而，最小二乘解不具有鲁棒性，因此Eq.3往往会在离群点概率高的情况下得到错误的刚体变换参数，在实践中，映射关系$\\phi(p, Q)$ 的表现远非理想，错误的对应关系占据了主导地位。为了避免这种情况，等式3可以通过引入一个异方差的加权矩阵来使得其对于离群点具有鲁棒性： $$ \\hat R_{ij}, \\hat t_{ij} = \\mathop {\\arg \\min }\\limits_{{R_{ij}},{t_{ij}}} \\sum\\limits_{i = 1}^{{N_P}} w_l{\\left| {R_{ij}p_l + t_{ij} - \\phi(p_l, Q)} \\right|}^2 \\tag 4 $$\n其中$w_l := (\\bold{w})_l$是假定的对应关系$\\gamma l \\in \\mathbb{R}^6$所对应的权重，通过一些权重函数$\\mathbb{w} = \\psi{init}(\\Gamma)$计算而得，其中$\\Gamma := { \\gamma_l } := {P, { \\phi(p_l, Q) }l}$, 而$\\psi{init} : \\mathbb{R} ^{N_P \\times 6} \\to \\mathbb{R}^{N_P}$. 如果假定的对应关系不是离群点，那么权重值$w_l$会接近于1，如果是离群点，那么便接近于0。Eq.4会在保留着可微分的封闭解的基础上得到正确的刚体变换参数。之后我们将这个封闭解表示为加权最小二乘刚体变换(weighted least squares transformation WLS trans).\n该可微分的封闭解可通过SVD分解求得。求解过程如下图：\n3.2 Differentiable transformation synchronization （可微分的刚体变换同步） 回到多视角配准的任务中来，我们重新考虑给定的初始点云集合$S$。 如果提前没有给定任何连接信息（即哪两帧点云之间有边（即配准关系）），图G可以通过指定$\\left(\\begin{array}{c}N_{\\mathcal{S}} \\ 2\\end{array}\\right)$组点云对（即两两之间都有边，类似于全连接），然后利用3.1中所提出的算法来估计其双视角刚体变换参数来进行初始化。全局刚体变换参数可以通过联合(即jointly， transformation synchronization)或独立的方式(将问题拆分为旋转同步(rotation synchronization)和平移同步(translation synchronization))进行估计。在此，我们选择后一种方法，它在谱关系下给出了一个可微的封闭形式的解。\nRotation synchronization: 旋转同步的目标是通过基于其观测到的相对旋转矩阵${ \\hat R_{ij} }$ 的比率来解决以下这个最小化问题，来得到全局的旋转矩阵${ R_i^*}$ $$ \\mathbf{R}_{i}^{*}=\\underset{\\mathbf{R}_{\\mathbf{i}} \\in S O(3)}{\\arg \\min } \\sum_{(i, j) \\in \\mathcal{E}} c_{i j}\\left|\\hat{\\mathbf{R}}_{i j}-\\mathbf{R}_{i} \\mathbf{R}_{j}^{T}\\right|_{F}^{2} \\tag{5} $$ 其中，权重$c_{i j}:=\\zeta_{\\text {init }}(\\boldsymbol{\\Gamma})$代表相对刚体变换参数$\\hat\\bold{M}_{ij}$的置信度。在谱松弛条件下，Eq.5可以得到一个封闭解。\nTranslation synchronization 相似的，平移同步的目标也是恢复得到全局的平移向量${\\mathbf{t}i^*}$，其能够使得下述最小二乘问题得到最小值。 $$ \\mathbf{t}{i}^{*}=\\underset{\\mathbf{t}{\\mathbf{i}}}{\\arg \\min } \\sum{(i, j) \\in \\mathcal{E}} c_{i j}\\left|\\hat{\\mathbf{R}}_{i j} \\mathbf{t}_{i}+\\hat{\\mathbf{t}}_{i j}-\\mathbf{t}_{j}\\right|^{2} \\tag{6} $$ Eq.6也能得到一个可微分的封闭解。\n3.3 Iterative refinement of the registration 配准迭代求精 上述的公式(3.1和3.2)在迭代方案中实现起来十分容易，反过来可以将其视为一种IRLS算法。在第k+1次迭代前，我们先通过使用第k次迭代中得到的同步后的相对刚体变换参数$\\mathbf{M}{ij}^{*(k)} = \\mathbf{M}{i}^{(k)}{\\mathbf{M}_{j}^{(k)}}^{-1}$来对点云Q进行预配准:$\\mathbf{Q}^{(k+1)}:=\\mathbf{M}{i j}^{*(k)} \\otimes \\mathbf{Q}$ ，其中$\\otimes$代表将刚体变换$\\mathbf{M}{ij}^{*(k)}$应用于点云$\\mathbf{Q}$上。此外，上一次迭代中的权重$\\mathbf{w}^{(k)}$和残差$\\mathbf{r}^{(k)}$会被当做边缘信息传入对应关系的权重函数(correspondence weighting function)，因此，$\\psi_{\\text{init}}$便可以被拓展为： $$ \\mathbf{w}^{(k+1)}:=\\psi_{\\text {iter }}\\left(\\mathbf{\\Gamma}^{(k+1)}, \\mathbf{w}^{(k)}, \\mathbf{r}^{(k)}\\right) \\tag{7} $$ 其中$\\mathbf{\\Gamma}^{(k+1)}:={\\gamma_{l}^{(k+1)}}:=\\left{\\mathbf{P},\\left{\\phi\\left(\\mathbf{p}_{l}, \\mathbf{Q}^{(k+1)}\\right)\\right}_{l}\\right}$\n类似的，输入$\\hat \\mathbf{M}{ij}^{(k)}$ （这里的输入的意思是指在一次迭代中完成了双视角配准，但尚未进行同步，此时会将上一步的结果作为输入传入同步层）和第k次迭代中同步后得到的刚体变换参数$\\mathbf{M}{ij}^{*(k)}$的差异也可以作为估计相对刚体变换信息的置信度$c_{ij}^{(k+1)}$的额外线索。因此：$\\zeta_{\\text{init}}(\\cdot)$可以被扩展为： $$ c_{i j}^{(k+1)}:=\\zeta_{\\text {iter }}\\left(\\boldsymbol{\\Gamma}^{(k+1)}, \\hat{\\mathbf{M}}_{i j}^{(k)}, \\mathbf{M}_{i j}^{*(k)}\\right) \\tag{8} $$\n4.Network Architecture 我们将提出的多视角配准算法实现为了一个深度神经网络，在这一节中，我们首先描述用于近似$\\phi(\\cdot)$, $\\psi_{\\text{init}}(\\cdot)$, $\\psi_{\\text{iter}}(\\cdot)$, $\\zeta_{\\text{init}}(\\cdot)$和$\\zeta_{\\text{iter}}(\\cdot)$的网络架构。随后再把它们集成为一个完全可微的，端到端的，可训练算法。\n4.1 Learned correspondence function Learned correspondence function: 对对应关系函数$\\phi(\\cdot)$的近似拓展了一个最近提出的全卷积的三维特征描述子FCGF，和一个软分配层(soft assignment layer)。 FCGF在稀疏的张量上进行操作，通过一次pass，为稀疏点云中的每一个点计算得到一个32维的特征描述子。值得一提的是，我们对$\\phi(\\cdot)$的模拟可以用任何一个最近提出的基于学习的特征描述网络，如PPFNet等。之所以选择FCGF是由于其具有高准确性，而计算复杂度又很低。\n令$\\mathbf{F_P},\\mathbf{F_Q}$代表点云P，Q经过相同网络权重的FCGF(即shared)后得到的embedding特征。随后，每个点的对应关系${\\phi(\\cdot)}$可以通过在高维特征空间中的最近邻搜索(NN)而得到。 然而，这样一种hard assignment的选择规则不是可微分的。因此我们通过计算一个分类分布的概率向量$\\mathbf{s}$，将最近邻选择(NN-selection)以概率的方式进行了re-form. 则点$\\mathbf{p}$在点云$\\mathbf{Q}$中的推测的对应关系被定义为： $$ \\phi(\\mathbf{p}, \\mathbf{Q}):=\\mathbf{s}^{T} \\mathbf{Q}, \\quad(\\mathbf{s}){l}:=\\frac{\\exp \\left(-d{l} / t\\right)}{\\sum_{l=1}^{N_{\\mathbf{Q}}} \\exp \\left(-d_{l} / t\\right)} \\tag{9} $$ 其中$d_{l}:=\\left|\\mathbf{f}_{\\mathbf{p}}-\\left(\\mathbf{F}_{\\mathbf{Q}}\\right)_{l}\\right|_{2}$， $\\mathbf{f_p}$是点$\\mathbf{p}$的FCGF的embedding，而t表示温度参数(??? temperature parameter)， 当t趋近于0时$t \\to 0$, $\\phi(\\mathbf{p},\\mathbf{Q})$会收敛于确定的最近邻搜索。\n跟随FCGF中的设定，使用对应关系损失$\\mathcal{L_c}$来监督$\\phi(\\cdot)$的学习。损失函数被定义为最严格的对比损失，并应用于FCGF的embedding 上。 $$ \\begin{aligned} \\mathcal{L}{c}=\\frac{1}{N{\\text {FCGF }}} \u0026amp; \\sum_{(i, j) \\in \\mathcal{P}}\\left{\\left[d\\left(\\mathbf{f}_{i}, \\mathbf{f}_{j}\\right)-m_{p}\\right]_{+}^{2} /|\\mathcal{P}|\\right.\\\n\u0026amp;+0.5\\left[m_{n}-\\min _{k \\in \\mathcal{N}} d\\left(\\mathbf{f}_{i}, \\mathbf{f}_{k}\\right)\\right]_{+}^{2} /\\left|\\mathcal{N}_{i}\\right| \\\n\u0026amp;\\left.+0.5\\left[m_{n}-\\min _{k \\in \\mathcal{N}} d\\left(\\mathbf{f}_{j}, \\mathbf{f}_{k}\\right)\\right]_{+}^{2} /\\left|\\mathcal{N}_{j}\\right|\\right} \\end{aligned} $$ 其中$\\mathcal{P}$是FCGF的mini batch $N_{\\text{FCGF}}$中所有positive pair的集合， 而$\\mathcal{N}$是用于最难负例挖掘的随机采样得到的子集。$m_p = 0.1$和$m_n = 1.4$是positive pair 和 negative pair的margin. 关于这个part如果感到困惑的话，可以参考另一篇blog：FCGF论文阅读笔记\n$\\phi(\\cdot)$ 详细的网络结构和训练设置，参数等如下：\n网络架构： FCGF特征描述子是在sparse tensor上的。三维数据的稀疏张量表示为坐标$C$和相关特征$F$的集合：\n$$ C=\\left[\\begin{array}{cccc} x_{1} \u0026amp; y_{1} \u0026amp; z_{1} \u0026amp; b_{1} \\\n\\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \\\nx_{N} \u0026amp; y_{N} \u0026amp; z_{N} \u0026amp; b_{N} \\end{array}\\right], F=\\left[\\begin{array}{c} \\mathbf{f}_{1}^{T} \\\n\\vdots \\\n\\mathbf{f}_{N}^{T} \\end{array}\\right] \\tag{1} $$\n其中$x_{i}, y_{i}, z_{i} \\in \\mathbb{Z}$是第i个三维坐标, $b_i$是batch的索引，为batch processing 提供了一个额外的维度，$\\mathbf{f_i}$是与第i个点相关的特征。FCGF是使用Minkowski engine实现的，Minkowski engine是一个auto-differentiation库，它提供了对稀疏卷积的支持，并实现了所有基本的深度学习层。 我们采用了FCGF原本的全卷积网络设计，其结构如下图：\n它使用了UNet架构，利用了skip connection 和 ResNet模块为每个点提取一个32维的特征描述子。为了得到独特的坐标$C$，我们使用在GPU上实现的体素网格下采样， voxel size $v := 2.5 \\text{cm}$\n4.2 Deep pairwise registration 尽管FCGF的特征描述子的性能表现很好，还是会有一些假定的对应关系$\\boldsymbol{\\Gamma}^{\\prime} \\subset \\boldsymbol{\\Gamma}$ 将会是错误的。此外，inliers 和 outliers并不像噪音那样分布，而是呈现出某种规律性。因此我们的目标就是利用深度神经网络学习这种规律性。最近，人们提出了一些网络，用来表示用于过滤二维或三维特征对应关系的复杂权重函数。\n在这里，我们提出基于[46: Learning to find good correspondences] 用[68: Learning two-view correspondences and geometry using order-aware network]中的Order-aware block(顺序感知模块)，来扩展3D outlier 过滤网络[29: Robust point-wise correspondences for point cloud based deformation monitoring of natural scenes]. 具体来说，我们创建了一个pairwise的配准模块 $f_{\\theta}: \\mathbb{R}^{N_{\\mathbf{P}} \\times 6} \\mapsto \\mathbb{R}^{N_{\\mathbf{P}}}$， 其输入是假定的对应关系$\\mathbf{\\Gamma}$的坐标，输出是权重$\\mathbf{w}:=\\psi_{\\text {init }}(\\boldsymbol{\\Gamma}):=\\tanh \\left(\\operatorname{ReLU}\\left(f_{\\theta}(\\mathbf{\\Gamma})\\right)\\right)$。随后将权重$\\mathbf{w}$与对应关系$\\mathbf{\\Gamma}$一起, 送入Eq.4的封闭解中去解得$\\hat{\\mathbf{R}}_{i j}$ 和 $\\hat{\\mathbf{t}}_{i j}$。 受到[53]和[68]的启发，我们在网络中添加了另一个配准模块$\\psi_{\\text{iter}}(\\cdot)$，并将权重$\\mathbf{w}$和点对之间的残差$\\mathbf{r}$ append到原有的输入中去，服从于：$\\mathbf{w}^{(k)} :=\\psi_{i t e r}\\left(\\operatorname{cat}\\left(\\left[\\boldsymbol{\\Gamma}^{(k)}, \\mathbf{w}^{(k-1)}, \\mathbf{r}^{(k-1)}\\right]\\right)\\right)$. 权重$\\mathbf{w}^{(k)}$随后再次与初始对应关系$\\mathbf{\\Gamma}$一同被送入Eq.4的封闭解中，去获得refined 后的双视角刚体变换参数。 为了保证$f_{\\theta}(\\cdot)$的扰动不变性，在每个回归模块中均采用了一种类似PointNet的架构，其对每个单独的对应关系进行操作。因为每个branch只对单独的点对对应关系进行操作，局部的三维上下文信息便通过使用了symmetric context normalization[65] 和 order-aware filtering layers的中间层进行提取。 配准模块的详细架构在supplementary里有。 registration network的训练是通过对batch上的$N_{\\mathrm{reg}}$个样例定义的配准误差进行监督的： $$ \\mathcal{L}_{\\mathrm{reg}}=\\alpha_{\\mathrm{reg}} L_{\\mathrm{class}}+\\beta_{\\mathrm{reg}} L_{\\mathrm{trans}} \\tag{10} $$\n其中$\\mathcal{L}{\\mathrm{class}}$是普通的二元交叉熵损失函数(此处存疑？？分明不是分类任务，为何在这里用了二元交叉熵损失函数) ， 而 $\\mathcal{L}{\\mathrm{trans}}$则定义如下： $$ \\mathcal{L}{\\text {trans }}=\\frac{1}{N{\\text {reg }}} \\sum_{(i, j)} \\frac{1}{N_{\\mathbf{P}}} \\sum_{l=1}^{N_{\\mathbf{P}}}\\left|\\hat{\\mathbf{M}}_{i j} \\otimes \\mathbf{p}_{l}-\\mathbf{M}_{i j}^{\\mathrm{GT}} \\otimes \\mathbf{p}_{l}\\right|_{2} \\tag{11} $$\n$\\mathcal{L}{\\mathrm{trans}}$用于惩罚与ground truth的偏移量。$\\alpha{\\mathrm{reg}}$ 和 $\\beta_{\\mathrm{reg}}$是用于控制contribution的权重。\n4.3 Confidence estimation block 在我们估计得到的相对刚体变换参数$\\hat \\mathbf{M}{ij}$之间，图$\\mathcal{G}$中的边encode了这些估计间的置信度$c{ij}$。图中每个边encode的置信度都由两部分构成：(i) 两两刚体变换估计的局部置信度$c_{ij}^{\\mathrm{local}}$. (ii) 从刚体变换同步(transformation synchronization)衍生得到的全局置信度$c_{ij}^{\\mathrm{global}}$. 我们将$c_{ij}^{\\mathrm{local}}$的估计任务视作一个分类任务，并认为其一些必要的信息包含在在registration block的倒数第二层的特征中。 令$\\mathbf{X}_{i j}^{\\text {conf }}=f_{\\theta}^{(-2)}(\\cdot)$ 表示registration block中的倒数第二层的输出。 我们提出了一个 *overlap pooling layer* 重叠池化层来通过加权平均池化提取全局特征$\\mathbf{x}_{i j}^{\\mathrm{conf}}$: $$ \\mathbf{x}_{i j}^{\\mathrm{conf}}=\\mathbf{w}_{i j}^{\\mathrm{T}} \\mathbf{X}_{i j}^{\\mathrm{conf}} \\tag{12} $$\n得到的全局特征与inlier的比率$\\delta_{i j}$(即权重比给定阈值高的点对对应关系的数量)进行concatenate。随后送入置信度估计网络，该网络由三个全连接层构成(129-64-32-1)，其后跟随一个ReLU激活函数。 所以local confidence局部置信度可以被表示为: $$ c_{i j}^{\\text {local }}:=\\zeta_{\\text {init }}(\\boldsymbol{\\Gamma}):=\\operatorname{MLP}\\left(\\operatorname{cat}\\left(\\left[\\mathbf{x}_{i j}^{\\text {conf }}, \\delta_{i j}\\right]\\right)\\right) \\tag{13} $$\nconfidence estimation block置信度估计模块的训练由置信度损失函数(confidence loss function) $\\mathcal{L}{\\mathrm{conf}} = \\frac{1}{N} \\sum{(i, j)} \\operatorname{BCE}\\left(c_{i j}^{\\text {local }}, c_{i j}^{\\text {GT }}\\right)$ 进行监督, 其中BCE指代二元交叉熵，ground truth confidence $c_{i j}^{\\mathrm{GT}}$是在运行时，通过控制角度误差的阈值$\\tau_{a} = \\arccos \\left(\\frac{\\operatorname{Tr}\\left(\\hat{\\mathbf{R}}_{i j}^{T} \\mathbf{R}_{i j}^{\\mathrm{GT}}\\right)-1}{2}\\right)$来计算得到的。\n在这里反思，原来作者所说的将其当做一个分类问题实质是上是一个二分类问题，$c_{ij}$的取值只有两个，要么是0， 要么是1。$\\zeta_{\\text {init }}(\\cdot)$函数计算得到了相对刚体变换参数的局部置信度。在另一方面，刚体变换同步层的输出(即全局刚体变换信息)提供了输入的相对刚体变换是如何与其他边之间保持全局一致的信息。 事实上，传统的同步算法[13,4,24]仅仅使用了其全局信息去在迭代中为每个边重新计算权重，原因在于他们并没有获得局部置信度的途径。相对刚体变换参数的全局置信度$c_{ij}^{\\mathrm{global}}$可以被表示为柯西权重函数[33,4]： $$ c_{i j}^{\\text {global }}=1 /\\left(1+r_{i j}^{*} / b\\right) \\tag{14} $$ 其中$r_{i j}^{*}=\\left|\\hat{\\mathbf{M}}_{i j}-\\mathbf{M}_{i}^{*} \\mathbf{M}_{j}^{*^{T}}\\right|_{F}$， 跟随[33,4]的思想，$b=1.482 \\gamma \\operatorname{med}\\left(\\left|\\mathbf{r}^{*}-\\operatorname{med}\\left(\\mathbf{r}^{*}\\right)\\right|\\right)$, 而$\\mathrm{med}(\\cdot)$代表一个平均算子(median operator)。$\\mathbf{r}^*$ 是残差$r_{ij}^*$的向量表达形式。此处存疑，$\\gamma$ 是啥？是对应关系？那这个怎么能混到实值计算里来呢？由于局部置信度与全局置信度提供了关于相对刚体变换参数的完整信息，我们使用其调和平均数将其结合为一个联合置信度$c_{ij}$: $$ c_{i j}:=\\zeta_{i t e r}\\left(c_{i j}^{\\text {local }}, c_{i j}^{\\text {global }}\\right):=\\frac{\\left(1+\\beta^{2}\\right) c_{i j}^{\\text {global }} \\cdot c_{i j}^{\\text {local }}}{\\beta^{2} c_{i j}^{\\text {global }}+c_{i j}^{\\text {local }}} \\tag{15} $$ 其中$\\beta$用于平衡局部置信度与全局置信度估计的贡献度，是在训练中学习得到的。\n仍存疑，这里与上面$c_{ij}^{\\mathrm{local}}$的0,1判断显然矛盾。那么$c_{ij}^{\\mathrm{local}}$到底怎么计算的？ 难道是误差$\\tau$与阈值的比值？？4.4 End-to-end multiview 3D registration 网络中每个独立的part 按照下图所示，连接成为一个端到端的多视角三维配准算法。\n我们先对对每个子网络进行预训练(pretrain)， 然后再在3DMatch数据集上以端到端的方式，使用官方的训练测试集划分来微调整个模型。 在微调阶段我们使用$N_{\\mathrm{FCGF}} = 4$来提取FCGF的特征，并从每个片段中随机采样2048个点的特征向量。这些feature被用于soft NN，来形成假定的$\\left(\\begin{array}{c}N_{\\mathcal{S}} \\ 2\\end{array}\\right)$组点对对应关系，随后被送入双视角配准网络。双视角配准的输出用于构建整个图，随后被输入刚体变换同步层。刚体变换参数迭代求精的过程共进行四次。我们使用联合多视角配准损失函数来对微调过程进行监督学习： $$ \\mathcal{L}=\\mathcal{L}_{\\mathrm{c}}+\\mathcal{L}_{\\mathrm{reg}}+\\mathcal{L}_{\\mathrm{conf}}+\\mathcal{L}_{\\mathrm{sync}} \\tag{16} $$\n其中刚体变换同步损失函数$\\mathcal{L}{\\text {sync }}$记做： $$ \\mathcal{L}{\\text {sync }}=\\frac{1}{N} \\sum_{(i, j)}\\left(\\left|\\mathbf{R}_{i j}^{*}-\\mathbf{R}_{i j}^{G T}\\right|_{F}+\\left|\\mathbf{t}_{i j}^{*}-\\mathbf{t}_{i j}^{G T}\\right|_{2}\\right) \\tag{17} $$\n我们对网络参数微调的过程共进行了2400次迭代，使用Adam优化器，学习率为$5 \\times 10 ^{-6}$\n","date":"2021-01-10T00:00:00Z","permalink":"https://codefmeister.github.io/p/learning-multiview-3d-point-cloud-registration/","title":"Learning Multiview 3D point Cloud Registration"},{"content":"Abstract 本文发表于CVPR。 其主要内容正如标题，是提出了一个对点云进行卷积的Module，称为PointConv。由于点云的无序性和不规则性，因此应用卷积比较困难。\n其主要的思路是，将卷积核当做是一个由权值函数和密度函数组成的三维点的局部坐标的非线性函数。通过MLP学习权重函数，然后通过核密度估计得到密度函数。\n还有一个主要的贡献在于，使用了一种高效计算的方法，转换了公式的计算分时，使得PointConv的卷积操作变得memory efficient，从而加深网络的深度。\nThis paper first published on CVPR. In this paper, author proposed a novel convolution operation which can be directly used on point cloud. As we all know, unlike image whose pixels are fixed, point cloud is irregular and unordered. So directly extend convolution operation into 3D pointcloud can be difficult.\nAuthor treat convolution kernels as nonlinear functions of the local coordinates of 3D points comprised of weight function and density function. The wight function is learned by multi-layer perceptron networks, the density function is learned through kernel density estimation.\nAnother main contribution of their work is that they reformulate the proposed convolution method to make it more memory efficient which significantly improves the depth of the network.\nAbout PointConv 作者提出了一种全新的，考虑到非均匀采样，对三维点云进行卷积的途径。 我们知道，卷积操作可以被看做是连续意义上的卷积函数的离散化近似。 在三维空间中，我们将卷积算子的权重函数视为是在以某个三维点为参考点的局部坐标系下的连续函数。该函数可以使用多层感知机进行模拟。这部分工作在之前已经有人做过，但是全部没有考虑到非均匀采样的问题。\n基于这个Motivation，我们进一步使用一个逆密度尺度来对MLP学到的权重函数进行重新计算，对应于原连续卷积函数的蒙特卡罗近似。我们将其称为PointConv。 PointConv以点云的位姿作为输入，通过MLP学习权重函数，然后再应用一个inverse density scale， 对权重函数进行重新计算，以弥补点云数据是由非均匀采样采得所带来的影响。\nPointConv最简单的实现是很消耗内存的，当输出通道的维度很大时，会给训练带来很大难度。 为了减少PointConv的内存消耗，作者通过改变加和顺序对公式进行了重写，大大提高了效率。\n此外，由于PointConv是卷积操作的完整近似，所以很容易就能从Conv推广到DeConv。DeConv层，也就是反卷积层，能够充分利用从粗糙层得到的信息，并将之传送到精细层去。而之前的很多卷积操作，不是full approxiamtion，所以就无法反卷积。对性能有很大影响。\nAuthor proposed a novel approach to apply convolution operation on 3D point clouds with consideration on non-uniform sampling. Note that convolution operation can be viewed as a discrete approximation of a continuous convolution operator. In 3D space, we can treat the weights of this convolution operator to be a continous function of the local 3D point coordinates with respect to a reference 3D point. The continuous function can be approximated by a multi-layer perceptron(MLP). This work has be done before, but all of them didn\u0026rsquo;t take non-uniform sampling into consideration.\nBased on this motivation, author used an inverse density scale to re-weight the continuous function learned by MLP, which correspond to the Monte Carlo approximation of the continuous convolution. PointConv involves taking the positions of point clouds as input and learning an MLP to approximate a weight function, as well as applying a inverse density scale on learned weights to compensate the non-uniform sampling.\nThe naive implementation of PointConv is memory inefficient when the channel size of the output features is very large and hence hard to train and scale up to large networks. In order to reduce the memory consumption of PointConv, author introduced an approach which is able to greatly increase the memory efficiency using a reformulation that changes the summation order.\nPointConv is full approximation of the convolution, it\u0026rsquo;s natural to extend PointConv to a PointDeconv, which an fully untilize the information in coarse layer and propagate to finer layers while most state of art algorithm cannot perform deconvolution because they are not the full approximation.\nConvolution on 3D Point Clouds d维向量的卷积定义如下： $$ (f*g)(x) = \\iint\\limits_{\\tau \\in {\\mathbb{R}^d}} {f(\\tau )g(x + \\tau )d\\tau } $$\n二维图像image的像素点是固定的。每个像素点会固定在某个体素网格。而点云不同，一个点云可以被表示为一个三维点集，其中每个点都包含着一个位置向量，同时还有其特征如颜色，表面向量等。不同于图像，点云有着更加灵活的形状，一个点的坐标(x,y,z)不会位于某个确定的网格上，而是可以取一个任意的连续值。因此，局部区域内不同点之间的相对位置是十分多变的。传统的光栅图像离散卷积滤波器不能够直接应用于3D点云上。\n为了得到一个能够应用于三维点云的卷积操作，首先回到连续的三维卷积：\n$$ Conv{(W,F){xyz}} = \\iiint\\limits{({\\delta _x},{\\delta _y},{\\delta _z}) \\in G} {W({\\delta _x},{\\delta _y},{\\delta _z})F(x + {\\delta _x},y + {\\delta _y},z + {\\delta _z})d{\\delta _x}{\\delta _y}{\\delta _z}} $$\n其中$F(x+\\delta_x,y+\\delta_y,z+\\delta_z)$是以$(x,y,z)$为中心的局部区域$G$中点的特征。点云可以被看做是从连续空间$\\mathbb{R}^3$中非均匀采样得到的。${\\delta _x},{\\delta _y},{\\delta _z}$是局部区域内的任意位置的三维坐标。\n那么PointConv定义如下：\n$$ PointConv{(S,W,F){xyz}} = \\sum\\limits{({\\delta _x},{\\delta _y},{\\delta _z}) \\in G} {S({\\delta _x},{\\delta _y},{\\delta _z})W({\\delta _x},{\\delta _y},{\\delta _z})F(x + {\\delta _x},y + {\\delta _y},z + {\\delta _z})} $$\n对连续函数的离散化近似从上可窥一见。 其中$S({\\delta _x},{\\delta _y},{\\delta _z})$是点$({\\delta _x},{\\delta _y},{\\delta _z})$处的逆密度inverse density。由于点云采样的非均匀性，$S({\\delta _x},{\\delta _y},{\\delta _z})$是十分有必要的。直觉上讲，点云内不同局部区域内的点的个数是很不相同的。\n如上图，因为点$p_3,p_5,p_6,p_7,p_8,p_9,p_{10}$之间离得都很近，所以它们每一个的贡献度应该更小。inverse density的原因。就是采样密度越大，这里点的人均贡献度应该越小。\nPointConv的公式如上。\nPointConv的具体实现 我们使用MLP来从三维坐标$({\\delta _x},{\\delta _y},{\\delta _z})$中近似得到权重函数$W({\\delta _x},{\\delta _y},{\\delta _z})$. 而逆密度函数$S({\\delta _x},{\\delta _y},{\\delta _z})$ 则由一个核密度估计及紧随其后的一个由MLP实现的非线性转换实现。\n计算权重函数的MLP的参数是在所有点上共享的，以达到扰动不变性的目的。 而逆密度函数首先需要估计点云在某点处的密度(kernel density estimation(KDE))，然后将这个估计出来的密度送入一个MLP来进行一个一维的非线性变换。其目的是在于让网络决定，是否去使用密度估计。\n首先得明确上图这个网络的输入和输出。\n输入是$F_{in}$，shape是$K \\times C_{in}$， 也就是说要对某个点进行卷积，那么它的输入是k个邻居的feature（当前维的feature是$C_{in}$). 此外输入还有$P_{local}, Density$，一个是k近邻的局部坐标，${K \\times 3}$, 一个是k近邻处的密度, $K \\times 1$。\n输出是$F_{out}$，shape为$1 \\times C_{out}$。\n$C_{in}, C_{out}$是输入输出feature的通道数。$k, c_{in}, c_{out}$分别指第$k$个邻接点，输入feature的第$c_{in}$个通道， 输出feature的第$c_{out}$个通道。\n因为每个点的权重函数不同，且其用于将$C_{in}$变换到$C_{out}$, 所以weight function的shape应该为$K \\times (C_{in} \\times C_{out})$， 即 $W \\in \\mathbb{R}^{K \\times (C_{in} \\times C_{out})}$. 那么第k个点处应用于第$c_{in}$个通道上的weight function应该是一个向量： $W(k,c_{in}) \\in \\mathbb{R}^{C_{out}}$\n所以有： $$ {F_{out}} = \\sum\\limits_{k = 1}^K {\\sum\\limits_{{c_{in}} = 1}^{{C_{in}}} {S(k)W(k,{c_{in}}){F_{in}}(k,{c_{in}})} } $$\n上图中有tile的操作，相当于人为广播broadcast.\nPointConv通过网络学习得到权重函数W的离散化模拟，对于每个输入点，通过MLP使用其相对坐标来计算权重。下图(a)举了一个连续的权重函数用于卷积的例子，而点云是对连续输入（i.e.空间）的离散化处理（i.e.采样），我们通过图(b)类似的方式进行离散化卷积来抽象出局部特征（对于不同的采样会输出不同的W和S，所以其效果也不同）。 需要说明的是，对于光栅图像，其某个局部区域内的相对坐标都是固定的（体素化网格），所以经过PointConv时，对于整个图像，会输出相同的权重函数W和密度函数S，会变为传统的离散卷积。（所以作者还在后文专门进行了实验，将二维图像升维到三维空间中，通过PointConv，结果确实和二维一致。所以证明了PointConv确实是三维连续卷积的full approximation。\nPointDeConv Efficient PointConv 这两个part搁置一下。因为我感觉论文的核心Part就是如何理解三维点云上的卷积操作。核心部分已经记录了。\n而且这篇论文我私以为存在一些问题，作者文中提到more details can be found in supplementary materials, 但是在哪都找不到他的补充材料，并且github上公开的源码并没有efficient realization of PointConv. 作者也不回答这些问题。\n","date":"2021-01-06T00:00:00Z","permalink":"https://codefmeister.github.io/p/pointconv%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"PointConv论文阅读笔记"},{"content":"torch中Dataset的构造与解读 Dataset的构造 要自定义自己的数据集，首先需要继承Dataset(torch.utils.data.Dataset)类.\n继承Dataset类之后，必须重写三个方法:__init__(), __getitem__(), __len__()\nclass ModelNet40(Dataset): def __init__(self, xxx): ... def __getitem__(self, item): ... def __len()__(self): ... 解读 单看上面的构造结构与三个需要重写的方法可能会一头雾水。我们详细分析其作用：\n  __init__的作用 __init__的作用与所有构造函数都一样，初始化一个类的实例。定义类的实际属性，如点云数据集中的unseen, guassian_noise等，是True还是False， 取出所有数据存储为成员变量等等。\n  __getitem__的作用 __getitem__的作用是，根据item的值取出数据。 item实际上就是索引值，会由Dataloader自动从0一直递增到__len__中取出的值。\n  __len__的作用 __len__的作用是，相当于返回整体数据data的shape[0]， 即给item的递增指定一个范围。\n  例子 class ModelNet40(Dataset): def __init__(self, num_points, partition=\u0026#39;train\u0026#39;, gaussian_noise=False, unseen=False, factor=4): self.data, self.label = load_data(partition) self.num_points = num_points self.partition = partition self.gaussian_noise = gaussian_noise self.unseen = unseen self.label = self.label.squeeze() self.factor = factor if self.unseen: ######## simulate testing on first 20 categories while training on last 20 categories if self.partition == \u0026#39;test\u0026#39;: self.data = self.data[self.label\u0026gt;=20] self.label = self.label[self.label\u0026gt;=20] elif self.partition == \u0026#39;train\u0026#39;: self.data = self.data[self.label\u0026lt;20] self.label = self.label[self.label\u0026lt;20] def __getitem__(self, item): pointcloud = self.data[item][:self.num_points] # 核心代码，就是用item取出的数据 if self.gaussian_noise: pointcloud = jitter_pointcloud(pointcloud) if self.partition != \u0026#39;train\u0026#39;: np.random.seed(item) anglex = np.random.uniform() * np.pi / self.factor angley = np.random.uniform() * np.pi / self.factor anglez = np.random.uniform() * np.pi / self.factor cosx = np.cos(anglex) cosy = np.cos(angley) cosz = np.cos(anglez) sinx = np.sin(anglex) siny = np.sin(angley) sinz = np.sin(anglez) Rx = np.array([[1, 0, 0], [0, cosx, -sinx], [0, sinx, cosx]]) Ry = np.array([[cosy, 0, siny], [0, 1, 0], [-siny, 0, cosy]]) Rz = np.array([[cosz, -sinz, 0], [sinz, cosz, 0], [0, 0, 1]]) R_ab = Rx.dot(Ry).dot(Rz) R_ba = R_ab.T translation_ab = np.array([np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]) translation_ba = -R_ba.dot(translation_ab) pointcloud1 = pointcloud.T rotation_ab = Rotation.from_euler(\u0026#39;zyx\u0026#39;, [anglez, angley, anglex]) pointcloud2 = rotation_ab.apply(pointcloud1.T).T + np.expand_dims(translation_ab, axis=1) euler_ab = np.asarray([anglez, angley, anglex]) euler_ba = -euler_ab[::-1] pointcloud1 = np.random.permutation(pointcloud1.T).T pointcloud2 = np.random.permutation(pointcloud2.T).T print(item) print(pointcloud1.shape) return pointcloud1.astype(\u0026#39;float32\u0026#39;), pointcloud2.astype(\u0026#39;float32\u0026#39;), R_ab.astype(\u0026#39;float32\u0026#39;), \\ translation_ab.astype(\u0026#39;float32\u0026#39;), R_ba.astype(\u0026#39;float32\u0026#39;), translation_ba.astype(\u0026#39;float32\u0026#39;), \\ euler_ab.astype(\u0026#39;float32\u0026#39;), euler_ba.astype(\u0026#39;float32\u0026#39;) def __len__(self): return self.data.shape[0] # 给item一个范围 进一步理解其执行逻辑 if __name__ == \u0026#39;__main__\u0026#39;: dataset1 = ModelNet40(num_points=1024, partition=\u0026#39;train\u0026#39;, gaussian_noise=True) dataloader = DataLoader(dataset1, batch_size=64, shuffle=False) count = 0 for src_pointcloud, tgt_pointcloud, Rotation, translation, _, _, _, _ in dataloader: print(src_pointcloud.shape) count += 1 print(count) 首先需要说明的是，在ModelNet40中，getitem中会打印item的当前值。\n如果执行这段代码，在shuffle=False的情况下，其结果为：\nitem从0一直增加到__len__返回的那个值-1， 也就是data的第一维（姑且称为batch维）。\n在getitem中取出的pointcloud的shape为(3, 1024)，只有两个axis.\n而最后输出的count，也就是main函数中整个for循环执行的次数，会是__len__() / batch_size.\n比如len是9480，即self.data的shape为(9480, 2048, 3)，那么item就会从0一直增加到9479. 在batch_size为64的情况下，for循环一共执行（即count为） 9480/64 = 148.125， 那么最终会执行149次。 也就是说，每次for循环实质上调用了getitem方法64次，最后在第一维上stack，使之shape变为(64, 3, 1024).\n","date":"2021-01-05T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch%E4%B8%ADdataset%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E8%AF%BB/","title":"torch中Dataset的构造与解读"},{"content":"numpy.cross 语法 numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)\n功能 Return the cross product of two (arrays of) vectors. The cross product of a and b in :math:R^3 is a vector perpendicular to both a and b. If a and b are arrays of vectors, the vectors are defined by the last axis of a and b by default, and these axes can have dimensions 2 or 3. Where the dimension of either a or b is 2, the third component of the input vector is assumed to be zero and the cross product calculated accordingly. In cases where both input vectors have dimension 2, the z-component of the cross product is returned.\n计算两个向量（向量数组）的叉乘。叉乘返回的数组既垂直于a，又垂直于b。 如果a,b是向量数组，则向量在最后一维定义。该维度可以为2，也可以为3. 为2的时候会自动将第三个分量视作0补充进去计算。\nParameters  a : array_like Components of the first vector(s). b : array_like Components of the second vector(s). axisa : int, optional Axis of a that defines the vector(s). By default, the last axis. axisb : int, optional Axis of b that defines the vector(s). By default, the last axis. axisc : int, optional Axis of c containing the cross product vector(s). Ignored if both input vectors have dimension 2, as the return is scalar. By default, the last axis. axis : int, optional If defined, the axis of a, b and c that defines the vector(s) and cross product(s). Overrides axisa, axisb and axisc.  axisa, axisb, axisc 分别指定两个输入和输出c的向量所在的维度。而axis则可以覆盖前三个参数，为全局指定向量所在维度。\nReturns  c : ndarray Vector cross product(s).  Raises  ValueError： When the dimension of the vector(s) in a and/or b does not equal 2 or 3.  当向量所在axis的dimension不为2或者3时，raise ValueError.\nSee Also(相关函数)  inner : Inner product 内积 outer : Outer product 外积 ix_ : Construct index arrays.  Notes .. versionadded:: 1.9.0 Supports full broadcasting of the inputs. 支持广播。\nExamples Vector cross-product. \u0026gt;\u0026gt;\u0026gt; x = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; y = [4, 5, 6] \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array([-3, 6, -3]) One vector with dimension 2. \u0026gt;\u0026gt;\u0026gt; x = [1, 2] \u0026gt;\u0026gt;\u0026gt; y = [4, 5, 6] \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array([12, -6, -3]) Equivalently: \u0026gt;\u0026gt;\u0026gt; x = [1, 2, 0] \u0026gt;\u0026gt;\u0026gt; y = [4, 5, 6] \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array([12, -6, -3]) Both vectors with dimension 2. \u0026gt;\u0026gt;\u0026gt; x = [1,2] \u0026gt;\u0026gt;\u0026gt; y = [4,5] \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array(-3) Multiple vector cross-products. Note that the direction of the cross product vector is defined by the `right-hand rule`. \u0026gt;\u0026gt;\u0026gt; x = np.array([[1,2,3], [4,5,6]]) \u0026gt;\u0026gt;\u0026gt; y = np.array([[4,5,6], [1,2,3]]) \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array([[-3, 6, -3], [ 3, -6, 3]]) The orientation of `c` can be changed using the `axisc` keyword. \u0026gt;\u0026gt;\u0026gt; np.cross(x, y, axisc=0) array([[-3, 3], [ 6, -6], [-3, 3]]) Change the vector definition of `x` and `y` using `axisa` and `axisb`. \u0026gt;\u0026gt;\u0026gt; x = np.array([[1,2,3], [4,5,6], [7, 8, 9]]) \u0026gt;\u0026gt;\u0026gt; y = np.array([[7, 8, 9], [4,5,6], [1,2,3]]) \u0026gt;\u0026gt;\u0026gt; np.cross(x, y) array([[ -6, 12, -6], [ 0, 0, 0], [ 6, -12, 6]]) \u0026gt;\u0026gt;\u0026gt; np.cross(x, y, axisa=0, axisb=0) array([[-24, 48, -24], [-30, 60, -30], [-36, 72, -36]]) ","date":"2020-12-30T00:00:00Z","permalink":"https://codefmeister.github.io/p/numpy.cross%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/","title":"numpy.cross函数解析"},{"content":"np.clip分析 语法 np.clip(a, a_min, a_max, out=None, **kwarys)\n作用 对数组a进行裁剪，小于a_min 的数用a_min代替， 大于a_max的数用a_max代替。\n需要注意的是，函数本身并不会对a_min和a_max之间的大小进行检查。\n参数  a: 待裁剪的数组 a_min: 下界 a_max: 上界  示例 \u0026gt;\u0026gt;\u0026gt; a = np.arange(10)\r\u0026gt;\u0026gt;\u0026gt; print(a)\rarray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\u0026gt;\u0026gt;\u0026gt; b = np.clip(a, 3, 7)\r\u0026gt;\u0026gt;\u0026gt; print(b)\rarray([3, 3, 3, 3, 4, 5, 6, 7, 7, 7])\r官方文档 Clip (limit) the values in an array.\nGiven an interval, values outside the interval are clipped to\rthe interval edges. For example, if an interval of ``[0, 1]``\ris specified, values smaller than 0 become 0, and values larger\rthan 1 become 1.\rEquivalent to but faster than ``np.minimum(a_max, np.maximum(a, a_min))``.\rNo check is performed to ensure ``a_min \u0026lt; a_max``.\rParameters\r----------\ra : array_like\rArray containing elements to clip.\ra_min : scalar or array_like or None\rMinimum value. If None, clipping is not performed on lower\rinterval edge. Not more than one of `a_min` and `a_max` may be\rNone.\ra_max : scalar or array_like or None\rMaximum value. If None, clipping is not performed on upper\rinterval edge. Not more than one of `a_min` and `a_max` may be\rNone. If `a_min` or `a_max` are array_like, then the three\rarrays will be broadcasted to match their shapes.\rout : ndarray, optional\rThe results will be placed in this array. It may be the input\rarray for in-place clipping. `out` must be of the right shape\rto hold the output. Its type is preserved.\r**kwargs\rFor other keyword-only arguments, see the\r:ref:`ufunc docs \u0026lt;ufuncs.kwargs\u0026gt;`.\r.. versionadded:: 1.17.0\rReturns\r-------\rclipped_array : ndarray\rAn array with the elements of `a`, but where values\r\u0026lt; `a_min` are replaced with `a_min`, and those \u0026gt; `a_max`\rwith `a_max`.\rSee Also\r--------\rufuncs-output-type\r ","date":"2020-12-28T00:00:00Z","permalink":"https://codefmeister.github.io/p/np.clip%E4%BD%9C%E7%94%A8%E8%A7%A3%E6%9E%90/","title":"np.clip作用解析"},{"content":"np.random.uniform() 语法 `numpy.random.uniform(low=0.0, high=1.0, size = None)\n作用 返回一个均匀分布的采样结果。 左闭右开区间[low, high).\n返回数组的shape与size相同。\n参数  low: 下界，默认为0.0 high: 上界，默认为1.0 size: 返回数组的shape， 默认为None，即返回一个单值  举例 \u0026gt;\u0026gt;\u0026gt; a = np.random.uniform(1,2,(3,4))\r\u0026gt;\u0026gt;\u0026gt; print(a)\rarray([[1.81297209, 1.79414559, 1.24677702, 1.44857774],\r[1.9171547 , 1.84473086, 1.33114168, 1.95953694],\r[1.66085822, 1.30895404, 1.1047299 , 1.6256421 ]])\rnp.random.randn() 语法 numpy.random.randn(d0, d1, ..., dn)\n作用 返回一个shape为(d0, d1, ..., dn)的正态分布采样。分布的均值为0,方差为1. 如果没有提供参数，则返回单个值的采样。\n举例 \u0026gt;\u0026gt;\u0026gt; a = np.random.randn(5,6)\r\u0026gt;\u0026gt;\u0026gt; print(a)\rarray([[-0.47617937, -0.43465103, 0.14896871, 0.21132357, 0.2143598 ,\r-0.03354328],\r[-0.04106843, -1.7749601 , -0.21961397, 0.09636438, -0.96454273,\r-0.19864323],\r[ 2.23603561, -0.85890889, 0.33559106, -0.04761999, -1.67373302,\r1.02406518],\r[ 0.2637569 , -0.21446205, 0.55802706, -0.93956703, 0.71275597,\r1.13559443],\r[-0.17459087, 1.11798002, -2.17611829, 0.64592587, 0.87040789,\r-0.85487641]])\r\u0026gt;\u0026gt;\u0026gt; print(a.shape)\r(5, 6)\r","date":"2020-12-28T00:00:00Z","permalink":"https://codefmeister.github.io/p/np.random%E4%B8%AD%E5%90%84%E5%87%BD%E6%95%B0%E4%B8%80%E8%A7%88/","title":"np.random中各函数一览"},{"content":"torch.detach() 作用 Returns a new Tensor, detached from the current graph.\n返回一个新的Tensor， 从原有的图中剥离。\nThe result will never require gradient.\n并且该Tensor不自动计算梯度。\n","date":"2020-12-28T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.detach/","title":"torch.detach()"},{"content":"Python 中 glob 作用简介 glob库中有两个函数:glob.glob()， glob.iglob(). 其作用是：遍历给定文件夹下所有符合条件的文件。\n常用的匹配符有：\n * 代表所有 ? 代表满足单个字符 []代表满足list中指定的字符  glob.glob(path, *, recursive=False) 在这里只介绍最基础的用法，用到的时候再深究。\npartition = \u0026#34;train\u0026#34; path_list = glob.glob(os.path.join(DATA_DIR, \u0026#39;modelnet40_ply_hdf5_2048\u0026#39;, \u0026#39;ply_data_%s*.h5\u0026#39; % partition)) 上述代码片段的意思是，寻找\u0026quot;DATADIR/modelnet40_ply_hdf5_2048/\u0026ldquo;下所有叫做\u0026quot;ply_data_train*.h5\u0026quot;的文件，并将其打包为一个**列表list**返回。\n如可能返回的是结果是：\n[\u0026ldquo;ply_data_train0.h5\u0026rdquo;, \u0026ldquo;ply_data_trainTx.h5\u0026rdquo;]\nglob.iglob(path, *, recursive=False) 作用与上面的函数一致。但是返回的不是list,而是一个iterable的迭代器。\n","date":"2020-12-27T00:00:00Z","permalink":"https://codefmeister.github.io/p/glob-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/","title":"glob 函数作用分析"},{"content":"torch.stack作用分析 语法  torch.stack(tensors, dim=0, *, out=None) \u0026ndash;\u0026gt; Tensor\n 作用  Concatenates a sequence of tensors along a new dimension.\nAll tensor need to be of the same size\n 将一个序列的tensor在新的一维上concatenate起来，所有tensor的shape需要相同。\nParameters  tensors(sequence of Tensors) \u0026ndash; sequence of tensors to concatenate dim(int) \u0026ndash; dimension to insert. Has to be between 0 and the number of dimensions of concanated tensors.  Keyword Arguments  out(Tensor, optional) \u0026ndash; the output tensor.  ","date":"2020-12-26T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.stack%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/","title":"torch.stack作用分析"},{"content":"torch.nn.parameter.Parameter 作用  a kind of Tensor that is to be considered a module parameter.\n Parameter是一种可以作为模型参数的Tensor.\n Parameters are Tensor subclasses, that have a very special property when used with Module S \u0026mdash;-when they\u0026rsquo;re assigned as Module attributes they are automatically added to the list of its parameters, and will appear e.g. in parameters() iterator. Assigning a Tensor doesn\u0026rsquo;t have such effect.\n Parameter是Tensor的子类，同时拥有一种非常特殊的性质：当他们与Module S一起使用时，也就是说当它们作为Module参数进行使用时，它们会自动添加到Module的参数列表中，并且出现在parameters()迭代器里。(这样就可以自动计算梯度等)\n构造参数  data(Tensor)\u0026ndash; parameter tensor requires_grad(bool, optional)\u0026ndash; if the parameter requires gradient. Default: True.  Example 定义一个网络Module如下：\nclass LayerNorm(nn.Module): def __init__(self, features, eps=1e-6): super(LayerNorm, self).__init__() self.a_2 = nn.Parameter(torch.ones(features)) self.b_2 = nn.Parameter(torch.zeros(features)) self.eps = eps def forward(self, x): mean = x.mean(-1, keepdim=True) std = x.std(-1, keepdim=True) return self.a_2 * (x - mean) / (std + self.eps) + self.b_2 那么，我们试着构造一个LayerNorm，来观察其参数：\n\u0026gt;\u0026gt;\u0026gt; layerNorm = LayerNorm(5) \u0026gt;\u0026gt;\u0026gt; for a in layerNorm.parameters(): print(a) Parameter containing: tensor([1., 1., 1., 1., 1.], requires_grad=True) Parameter containing: tensor([0., 0., 0., 0., 0.], requires_grad=True) 可以看到我们使用nn.Parameter进行构造的参数，自动传入了Module的参数列表。\n","date":"2020-12-24T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.nn.parameter.parameter%E5%88%86%E6%9E%90/","title":"torch.nn.parameter.Parameter分析"},{"content":"DCP论文阅读笔记 论文  Deep Closest Point: Learning Representations for Point Cloud Registration\nAuthor: Wang, Yue; Solomon, Justin\n Main Attribution 基于ICP迭代最近点算法，提出基于深度学习的DCP算法。解决了ICP想要采用深度学习方法时遇到的一系列问题。\n我们先回顾一下ICP算法的基本步骤：\nfor each iteration: find corresponding relations of points between two scan(using KNN) using SVD to solve Rotation Matrix and Translation vector update cloud Data 概括起来就是： 寻找最近点对关系，使用SVD求解刚体变换。如此循环往复。\n结合论文，个人理解将ICP算法扩展到深度学习存在着以下的难点（可能存在各种问题，笔者深度学习的相关知识很薄弱）：\n 首先，点对关系如果是确定的话，沿着网络反向传播可能存在问题。 SVD分解求解刚体变换，如何求梯度？(Confirmed by paper)  而文章克服了这些问题，主要有如下贡献：\n 提出了能够解决传统ICP算法试图推广时存在的困难的一系列子网络架构。 提出了能进行pair-wise配准的网络架构 评估了在采用不同设置的情况下的网络表现 分析了是global feature有用还是local feature对配准更加有用  网络架构 模型包含三个部分：\n(1) 一个将输入点云映射到高维空间embedding的模块，具有扰动不变性（指DGCNN当点云输入时点的前后顺序发生变化，输出不会有任何改变） 或者 刚体变换不变性（指PointNet对于旋转平移具有不变的特性）。该模块的作用是寻找两个输入点云之间的点的对应关系. 可选的模块有PointNet（Focus于全局特征）， DGCNN（结合局部特征和全局特征）。\n(2) 一个基于注意力attention的Pointer网络模块，用于预测两个点云之间的soft matching关系(类似于一种基于概率的soft match，之所以soft是由于它并没有显式规定点$x_i$必须与哪个点$x_j$有对应关系，而是通过一个softmax得到的各点和某点$x_i$存在对应关系的概率乘以各点数据，得到一个类似于概率的对应点坐标。 该模块采用的是Transformer(3) 一个可微的SVD分解层，用于输出刚体变换矩阵。\n问题阐述 熟悉点云配准的同学应该知道，问题十分清晰。这里直接粘一下原文。\n值得一提的是，作者分析了一下ICP的算法步骤。和我们上面描述的一样。就是用上次更新后的信息寻找最近关系，然后用寻找到的对应关系SVD求解得到$R,t$.所以如果初始值一开始生成的是很差的corresponding relation，那么一下就会陷入局部最优。\n而作者的思路就是：使用学习的网络来得到特征，通过特征获得一个更好的对应关系$m(\\cdot)$，用这个$m(\\cdot)$去计算刚体变换信息。代码分析与对应模块详解 我们采用一种Top-Down的视角来分析整个代码。先从整体入手，然后逐渐拆解模块进行分析。\n整体模块 DCP网络结构分为三个Part，从代码中就可以很清晰的看出来：第一个Module模块emd_nn用于抽象特征，第二个Module模块pointer用于match,第三个Module模块head用于求解刚体变换矩阵，具体代码如下：\nclass DCP(nn.Module): def __init__(self, args): # args 是一个存放各种参数的namespace super(DCP,self).__init__() self.emb_dims = args.embdims # 欲抽象到的特征维度，default为 512 self.cycle = args.cycle # ba的刚体变换关系是否重新进入网络计算 if args.emb_nn == \u0026#39;pointnet\u0026#39;: # emb_nn就是上文所说的第一个模块,若选择PointNet self.emb_nn = PointNet(emb_dims=self.emb_dims) elif args.emb_nn == \u0026#39;dgcnn\u0026#39;: # 若选择DGCNN self.emb_nn = DGCNN(emb_dims=self.emb_dims) else: raise Exception(\u0026#39;Not implemented\u0026#39;) # 其他网络尚未实现 if args.pointer == \u0026#39;identity\u0026#39;: # 不使用Transformer, hard match self.pointer = Identity() elif args.pointer == \u0026#39;transformer\u0026#39;: # soft matching by tranformer self.pointer = Transformer(args = args) else: raise Exception(\u0026#39;Not implemented\u0026#39;) if args.head == \u0026#39;mlp\u0026#39;: # 直接用MLP预测输出矩阵 self.head = MLPHead(args=args) elif args.head == \u0026#39;svd\u0026#39;: # 使用可微的SVD分解层 self.head = SVDHead(args=args) else: raise Exception(\u0026#34;Not implemented\u0026#34;) def forward(self, *input): src = input[0] tgt = input[1] src_embedding = self.emb_nn(src) tgt_embedding = self.emb_nn(tgt) # Module Part 1 (batch_size, emb_dims, num_points) src_embedding_p, tgt_embedding_p = self.pointer(src_embedding, tgt_embedding) # Module Part 2 src_embedding = src_embedding + src_embedding_p tgt_embedding = tgt_embedding + tgt_embedding_p rotation_ab, translation_ab = self.head(src_embedding, tgt_embedding, src, tgt) # Module Part 3 if self.cycle: rotation_ba, translation_ba = self.head(tgt_embedding, src_embedding, tgt, src) else: rotation_ba = rotation_ab.transpose(2,1).contiguous() translation_ba = -torch.matmul(rotation_ba, translation_ab.unsqueeze(2)).squeeze(2) return rotation_ab, translation_ab, rotation_ba, translation_ba 用于抽象feature的Module1：emb_nn 考虑emb_nn，我们有两个选择： 其一是PointNet， 其二是DGCNN.\nPointNet抽象的特征是global feature， 而DGCNN结合了local feature和global feature.\n我们希望得到的是对每一个点抽象而得的特征（即每一个点都有其embedding)，并利用两个点云之间点的embedding来生成映射关系（即Match关系）. 所以我们要得到的是per-point feature而不是one feature per cloud。\n出于上述原因，我们在最后一层的聚合函数aggregation function之前生成每个点的representation。 $$ F_X = {x_1^L,x_2^L, \u0026hellip;, x_i^L,\u0026hellip;,x_N^L} $$ $$ F_Y = {y_1^L, y_2^L, \u0026hellip;, y_i^L, \u0026hellip;, y_N^L} $$ 上标L代表第L层的输出（假定共有L层）。\nPointNet $x_i^l$是第$i$个点在第$l$层后的embedding，而$h_{\\theta}^l$是第$l$层的非线性映射函数。PointNet的forward mechanism可以用如下公式给出： $$ x_i^l = h_{\\theta}^l(x_i^{l-1}) $$ 作者@WangYue在github上公布的代码，使用的PointNet的网络架构如下：\nclass PointNet(nn.Module): def __init__(self, emb_dims=512): super(PointNet, self).__init__() self.conv1 = nn.Conv1d(3, 64, kernel_size=1, bias=False) self.conv2 = nn.Conv1d(64, 64, kernel_size=1, bias=False) self.conv3 = nn.Conv1d(64, 64, kernel_size=1, bias=False) self.conv4 = nn.Conv1d(64, 128, kernel_size=1, bias=False) self.conv5 = nn.Conv1d(128, emb_dims, kernel_size=1, bias=False) self.bn1 = nn.BatchNorm1d(64) self.bn2 = nn.BatchNorm1d(64) self.bn3 = nn.BatchNorm1d(64) self.bn4 = nn.BatchNorm1d(128) self.bn5 = nn.BatchNorm1d(emb_dims) def forward(self, x): x = F.relu(self.bn1(self.conv1(x))) x = F.relu(self.bn2(self.conv2(x))) x = F.relu(self.bn3(self.conv3(x))) x = F.relu(self.bn4(self.conv4(x))) x = F.relu(self.bn5(self.conv5(x))) return x 从上述代码中，可以看出，作者使用的PointNet并没有input-transform和feature-transform这两个Module，相当于只应用MLP不断对输入点云进行抽象，直到高维空间。 存疑：为什么不加Transform-Net？ 如果加上效果训练效果如何? 没有cat，cat之后效果如何？解答：记于2020-12-28日：这个问题太傻了。我们这个网络的目的就是学习出刚体变换矩阵。3x3的Transform Net相当于是硬学。而我们是通过其巧妙设计来优化模式，求解刚体变换矩阵。\nDGCNN DGCNN是作者@WangYue提出的一种网络架构，其特点是EdgeConv。可以结合全局特征与局部特征。 $$ x_i^l = f({{} h_{\\theta}^l(x_i^{l-1},x_j^{l-1}); \\forall j \\in N_i {}}) $$ $f$是每一层后的聚合函数。$N_i$指的是和点$x_i$存在KNN关系的点的集合。\nget_graph_feature是返回egde-feature的函数。这并不是我们关注的重点，代码简要粘贴一下。\ndef knn(x, k): inner = -2 * torch.matmul(x.transpose(2, 1).contiguous(), x) xx = torch.sum(x ** 2, dim=1, keepdim=True) pairwise_distance = -xx - inner - xx.transpose(2, 1).contiguous() idx = pairwise_distance.topk(k=k, dim=-1)[1] # (batch_size, num_points, k) return idx def get_graph_feature(x, k=20): # x = x.squeeze() idx = knn(x, k=k) # (batch_size, num_points, k) batch_size, num_points, _ = idx.size() device = torch.device(\u0026#39;cuda\u0026#39;) idx_base = torch.arange(0, batch_size, device=device).view(-1, 1, 1) * num_points idx = idx + idx_base idx = idx.view(-1) _, num_dims, _ = x.size() x = x.transpose(2, 1).contiguous() # (batch_size, num_points, num_dims) -\u0026gt; (batch_size*num_points, num_dims) # batch_size * num_points * k + range(0, batch_size*num_points) feature = x.view(batch_size * num_points, -1)[idx, :] feature = feature.view(batch_size, num_points, k, num_dims) x = x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1) feature = torch.cat((feature, x), dim=3).permute(0, 3, 1, 2) return feature 而网络中使用的DGCNN代码如下：\nclass DGCNN(nn.Module): def __init__(self, emb_dims=512): super(DGCNN, self).__init__() self.conv1 = nn.Conv2d(6, 64, kernel_size=1, bias=False) self.conv2 = nn.Conv2d(64, 64, kernel_size=1, bias=False) self.conv3 = nn.Conv2d(64, 128, kernel_size=1, bias=False) self.conv4 = nn.Conv2d(128,256, kernel_size=1, bias=False) self.conv5 = nn.Conv2d(512, emb_dims, kernel_size=1, bias=False) self.bn1 = nn.BatchNorm2d(64) self.bn2 = nn.BatchNorm2d(64) self.bn3 = nn.BatchNorm2d(128) self.bn4 = nn.BatchNorm2d(256) self.bn5 = nn.BatchNorm2d(emb_dims) def forward(self,x): batch_size, num_dims, num_points = x.size() x = get_graph_feature(x) x = F.relu(self.bn1(self.conv1(x))) x1 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn2(self.conv2(x))) x2 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn3(self.conv3(x))) x3 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn4(self.conv4(x))) x4 = x.max(dim=-1, keepdim=True)[0] x = torch.cat((x1, x2, x3, x4), dim=1) x = F.relu(self.bn5(self.conv5(x))).view(batch_size, -1, num_points) return x # (batch_size, emb_dims, num_points) 可以明显发现与原DGCNN不同的地方是: 作者这里每次forward前传时，并没有再对抽象出来的feature寻找knn进行进一步抽象。而是单纯的不断经过MLP。对比一下该部分原代码：\nx = get_graph_feature(x, k=self.k) # (batch_size, 3, num_points) --\u0026gt; (batch_size, 3*2, num_points, k) x = self.conv1(x) # (batch_size, 3*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x1 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x1, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv2(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x2 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x2, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv3(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 128, num_points, k) x3 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 128, num_points, k) --\u0026gt; (batch_size, 128, num_points) x = get_graph_feature(x3, k=self.k) # (batch_size, 128, num_points) --\u0026gt; (batch_size, 128*2, num_points, k) x = self.conv4(x) # (batch_size, 128*2, num_points, k) --\u0026gt; (batch_size, 256, num_points, k) x4 = x.max(dim=-1, keepdim=False) # (batch_size, 256, num_points, k) --\u0026gt; (batch_size, 256, num_points) x = torch.cat((x1, x2, x3, x4), dim=1) # (batch_size, 64+64+128+256, num_points) 差别十分明显。相当于网络结构中红框的部分消失了： 此处同样存疑，作者在论文里未提及此细节。\n用于Match（寻找点对关系）的Module2 基于Attention机制的Transformer 使用Attention机制的初衷在于：我们想让配准变得更加task specify。也就是说，不再独立地关注两个输入点云$X$,$Y$的embedding feature，而是关注$X$,$Y$之间的一些联合特性。于是乎，自然而然的想到了Attention机制。基于attention，设计一个可以捕捉self-attention和conditional attention的模块，用于学习$X,Y$点云之间的某些联合信息。\n我们将由上一个Module对两个点云各自独立生成的embedding特征$F_X,F_Y$作为输入，那么就有： $$ \\Phi_X = F_X + \\phi(F_X,F_Y) $$ $$ \\Phi_Y = F_Y + \\phi(F_Y,F_X) $$ 其中，$\\phi$是Transformer学习得到的映射函数:$\\phi: R^{N \\times P} \\times R^{N \\times P} \\to R^{N \\times P}$.\n我们将$\\phi$当做一个残差项，基于$F_X,F_Y$的输入顺序，为$F_X,F_Y$提供一个附加的改变项。\n Notice we treat $\\phi$ as a residual term, providing an additive change to $F_X$ and $F_Y$ depending on the order of its input.\n 之所以采取将$F_X \\to \\Phi_X$的Motivation：以一种适应$Y$中点的组织结构（个人理解即输入顺序）的方式改变$X$的Feature embedding。对$F_Y \\to \\Phi_Y$，动机相同。\n The idea here is that the map $F_X \\to \\Phi_X$ modifies the features associated to the points in X in a fashion that is knowledgeable about the structure of $Y$.\n 选择Transformer提供的非对称函数作为$\\phi$。Transformer由一些堆叠的encoder-decoder组成，是一种解决Seq2Seq问题的经典架构。关于Transformer的更多信息，移步我的另一篇博客《图解Transformer（译）》\n此Module中，encoder接收$F_X$并通过self-attention layer和MLP把它编码到其embedding space，而decoder有两个部分组成，第一个部分接收另一个集合$F_Y$, 然后像encoder一样将之编码到embedding space。另一个部分使用co-attention对两个已经映射到embedding space的点云进行处理。 所以输出$\\Phi_Y$,$\\Phi_Y$既含有$F_X$的信息，又含有$F_Y$的信息。\n这里的Motivation是：将两个点云之间的匹配关系问题(match problem)类比为Sq2Sq问题。（点云是在两个输入的点的序列中寻找对应关系，而Sq2Sq问题是在输入句子中寻找单词之间的联系关系）。\n为了避免不可微分的hard assignment，我们使用概率角度的一种方式来生成soft map，将一个点云映射到另一个点云。所以，每一个$x_i \\in X$都被赋予了一个概率向量： $$ m(x_i,Y) = softmax(\\Phi_y \\Phi_{x_i}^T) $$ 在这里，$\\Phi_Y \\in R^{N \\times P}$代表Y经过Attention Module后生成的embedding。而$\\Phi_{x_i}$代表矩阵$\\Phi_X$的第$i$行。 所以可以将$m(x_i, Y)$ 看做一个将每个$x_i$映射到$Y$中元素的soft pointer。\n下面我们关注文中Transformer的实现。其架构为： class Transformer(nn.Module): def __init__(self, args): super(Transformer, self).__init__() self.emb_dims = args.emb_dims self.N = args.n_blocks self.dropout = args.dropout self.ff_dims = args.ff_dims # Feed_forward Dims self.n_heads = args.n_heads # Multihead Attention的头数 c = copy.deepcopy() attn = MultiHeadedAttention(self.n_heads, self.emb_dims) ff = PositionwiseFeedForward(self.emb_dims, self.ff_dims, self.dropout) self.model = EncoderDecoder(Encoder(EncoderLayer(self.emb_dims, c(attn), c(ff), self.dropout),self.N), Decoder(DecoderLayer(self.emb_dims, c(attn), c(attn), c(ff), self.dropout), self.N), nn.Sequential(), nn.Sequential(), nn.Sequential()) def forward(self, *input): src = input[0] # batch_size, emb_dims, num_points tgt = input[1] src = src.transpose(2, 1).contiguous() # batch_size, num_points, emb_dims tgt = tgt.transpose(2, 1).contiguous() tgt_embedding = self.model(src, tgt, None, None).transpose(2, 1).contiguous() src_embedding = self.model(tgt, src, None, None).transpose(2, 1).contiguous() return src_embedding, tgt_embedding 上述代码是Transformer的实现。看起来有点绕，我们进一步关注其forward函数.\n流入Transformer的data： src,tgt: (batch_size, emb_dims, num_points)\n经过transopose.contiguous: src,tgt: (batch_size, num_points, emb_dims)\n随后将src, tgt传入self.model，得到了tgt_embedding, src_embedding.\n关注self.model，在__init__中定义了self.model:\n self.model = EncoderDecoder(Encoder(EncoderLayer(self.emb_dims, c(attn), c(ff), self.dropout), self.N), Decoder(DecoderLayer(self.emb_dims, c(attn), c(attn), c(ff), self.dropout),self.N), nn.Sequential(), nn.Sequential(), nn.Sequential()) self.model 整体是一个EncoderDecoder类。其传入的参数有一个Encoder，一个Decoder，三个Sequential.\n而Encoder传入的参数有两个，第一个是EncoderLayer，第二个是self.N。作为第一个参数的EncoderLayer传入了四个参数，分别是self.emb_dims, c(attn), c(ff), self.dropout.\nDecoder传入的参数也是两个，第一个是DecoderLayer，第二个是self.N。作为第一个参数的DecoderLayer传入了五个参数，分别是self.emb_dims, c(attn), c(attn), c(ff), self.dropout.\n这里的c是copy.deepcopy()，即深拷贝。完全复制一个新的对象，所以这些网络之间参数并不共享。\n首先来关注EncoderDecoder类：\nclass EncoderDecoder(nn.Module): def __init__(self, encoder, decoder, src_embed, tgt_embed, generator): super(EncoderDecoder, self).__init__() self.encoder = encoder self.decoder = decoder self.src_embed = src_embed self.tgt_embed = src_embed self.generator = generator def forward(self, src, tgt, src_mask, tgt_mask): # Take in and process masked src and target sequences return self.decode(self.encode(src, src_mask), src_mask, tgt, tgt_mask) def encode(self, src, src_mask): return self.encoder(self.src_embed(src), src_mask) def decode(self, memory, src_mask, tgt, tgt_mask): return self.generator(self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)) 从上述代码可以看出，EncoderDecoder类构造时传入的五个参数分别为： encoder, decoder, src_embed, tgt_embed, generator.\n其前传机制forward是self.decode(self.encode(src, src_mask), src_mask, tgt, tgt_mask)。即先将src,src_mask进行encode,将编码后的结果同src_mask, tgt, tgt_mask一同decode。\n而encode函数，是这样定义的: self.encoder(self.src_embed(src), src_mask), 即先将src通过src_embed网络，然后根据其mask再通过encoder网络。\n而decode函数，是：self.generator(self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)), 也就是说, tgt先经过tgt_embed网络，然后随memory, src_mask, tgt_mask一同传入decoder网络，decoder网络的输出再流入generator网络。\n所以我自己梳理了一下整个EncoderDecoder大概结构如下：\n进一步关注Encoder与Decoder：\ndef clones(module, N): return nn.ModuleList([copy.deepcopy(module) for _ in range(N)]) class Encoder(nn.Module): def __init__(self, layer, N): super(Encoder, self).__init__() self.layers = clones(layer, N) self.norm = LayerNorm(layer.size) def forward(self, x, mask): for layer in self.layers: x = layer(x, mask) return self.norm(x) 从上述代码，可以看出： Encoder在构造时需要传入两个参数，一个为layer, 一个为N。而在构造函数中，通过调用clones方法将传入的layer深复制(deepcopy)了N次，并作为一个ModuleList存储在self.layers成员变量中。\nclones方法的执行效果可从下例中窥见：\nnet = nn.Sequential(nn.Linear(5,7), nn.BatchNorm1d(5)) print(\u0026#39;net\u0026#39;,net) net_clones = clones(net, 3) print(\u0026#39;net_clones\u0026#39;, net_clones) 其执行结果是：将net复制了3次，装在一个ModuleList中返回。并且值得一提的是，这里是copy.deepcopy()，深复制，所以参数之间不共享。\n而LayerNorm定义如下:\nclass LayerNorm(nn.Module): def __init__(self, feature, eps=1e-6): super(LayerNorm, self).__init__() self.a_2 = nn.Parameter(torch.ones(features)) self.b_2 = nn.Parameter(torch.zeros(features)) self.eps = eps def forward(self, x): mean = x.mean(-1, keepdim=True) # 最后一维的均值 std = x.std(-1, keepdim=True) # 最后一维的标准差 return self.a_2 * (x - mean) / (std + self.eps) + self.b_2 # 对最后一维进行Norm 可见LayerNorm的作用是对输入的数据x，对其最后一维进行归一化操作。\n而Encoder整个的前传机制为：对于构造时生成的ModuleList,依次将x通过ModuleList中的每个网络layer，即x = layer(x, mask), 然后再将输出通过LayerNorm对最后一维进行归一化操作返回。 Encoder的网络结构图如下：\n进一步关注，Encoder在EncoderDecoder构造时，传入的layer参数为：EncoderLayer(self.emb_dims, c(attn), c(ff), self.dropout)。 解读EncoderLayer:\nclass EncoderLayer(nn.Module): def __init__(self, size, self_attn, feed_forward, dropout): super(EncoderLayer, self).__init__() self.self_attn = self_attn self.feed_forward = feed_forward self.sublayer = clones(SublayerConnection(size, dropout), 2) self.size = size def forward(self, x, mask): x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask)) return self.sublayer[1](x, self.feedforward) EncoderLayer在构造时需要传入的参数有：size, self_attn, feed_forward, dropout。 其中self_attn, feed_forward两个网络，以及size作为成员变量存储。而另一个成员变量sublayer通过clones方法将SublayerConnection(size, dropout)复制两遍，存着一个ModuleList.\n观察SublayerConnection:\nclass SublayerConnection(nn.Module): def __init__(self, size, dropout = None): super(SublayerConnection, self).__init__() self.norm = LayerNorm(size) def forward(self, x, sublayer): return x + sublayer(self.norm(x)) SublayerConnection在构造时，只传入了size, dropout两个参数，用于构造LayerNorm。而前传forward的时候，返回的是x + sublayer(self.norm(x))， 即将x通过了LayerNorm后，再通过作为参数传入的网络sublayer，最后与x相加，返回。\n搞清楚SublayerConnection的机制后，我们回看EncoderLayer的forward机制：x先通过一个传入网络为attn的sublayer，然后再通过一个传入网络为feedforward的sublayer. EncoderLayer网络结构如图：\n接下来关注attn，即MultiHeadedAttention:\ndef attention(query, key, value, mask=None, dropout=None): d_k = query.size(-1) scores = torch.matmul(query, key.transpose(-2, -1).contiguous()) / math.sqrt(d_k) # (nbatches, h, num_points, num_points) if mask is not None: scores = scores.masked_fill(mask == 0, -1e9) p_attn = F.softmax(scores, dim=-1) # (nbatches, h, num_points, num_points) return torch.matmul(p_attn, value), p_attn class MultiHeadedAttention(nn.Module): def __init__(self, h, d_model, dropout = 0.1): # h: number of heads ; d_model: dims of model(emb_dims) super(MultiHeadedAttention, self).__init__() assert d_model % h == 0 # we assume d_v always equals d_k self.d_k = d_model // h # d_k 是每个head的dim self.h = h self.linears = clones(nn.Linear(d_model, d_model), 4) self.attn = None self.dropout = None def forward(self, query, key, value, mask=None): if mask is not None: # Same mask applied to all h heads mask = mask.unsqueeze(1) nbatches = query.size(0) # 1) Do all the linear projections in batch from d_model =\u0026gt; h x d_k query, key, value = [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2).contiguous() for l,x in zip(self.linears, (query, key, value))] # (nbatches, h, num_points, d_k) # 2) Apply attention on all the projected vectors in batch. x, self.attn = attention(query, key, value, mask = mask, dropout= self.dropout) # 3) \u0026#34;Concat\u0026#34; using a view and apply a final linear. x = x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k) return self.linears[-1](x) MultiHeadAttention其构造函数有两个参数：h, d_model. 其中h是head的个数，而d_model实际上就是emb_dims。我们总是规定emb_dims是可以整除h的，否则每个attention的维度不是整数。d_k = d_model // h即是每个head的维度。同时在构造时，在self.linears中存储了一个ModuleList,ModuleList中有四个Linear线性映射d_model --\u0026gt; d_model。\nMultiHeadAttention的前传机制：\n(1) 通过线性映射linear projection，生成query, key, value.\n用zip方法将三个线性映射绑定到query, key, value上，相当于指定了其生成的矩阵。（这里的query, key, value只是用于生成query, key, value的原始数据，事实上都是x）。 将query, key, value分别通过对应的Linear Projection投影生成真正的query, key, value。 输入的x的shape是nbatches, num_points, emb_dims (emb_dim 即 d_model). 经过对应的Linear Projection后，生成的shape是nbatches, num_points, emb_dims, 通过view()变为nbatches, num_points, self.h, self.d_k。 随后又进行了transpose(1,2).contiguous(), 那么最后生成的query, key, value的shape是nbatches, self.h, num_points, self.d_k.\n需要说明的是，按照Transformer的理论，MultiHeadAttention的生成矩阵(即我们在上面用的投影应该是每个head有一个单独的projection)，但是因为这个projection是学习得到的，所以我们只用一个projection然后再进行view()分割得到MultiHead，在理论上应该能得到相同的效果。\n(2) 根据得到的query, key, value计算Self-Attention.\nSelf-Attention的计算： $softmax(\\frac{Q \\times K^T}{\\sqrt{d_k}}) V$\n返回的z的shape为：nbatches, self.h, num_points, self.d_k\n(3) 通过view进行所谓的Concatenate，将之应用于Linear网络，输出。\n首先进行一个transpose(1,2),随后改变其内存分布contiguous，然后再通过view()，相当于把多个头的attention拼接起来。此时的shape为：nbatches, num_points, h * d_k.\n再应用于第四个Linear上，输出的shape: (nbatches, num_points, d_model)\n整个Attention的网络结构如下： 下面关注PositionwiseFeedForward网络结构：\nclass PositionwiseFeedForward(nn.Module): def __init__(self, d_model, d_ff, dropout = 0.1): super(PositionwiseFeedForward, self).__init__() self.w_1 = nn.Linear(d_model, d_ff) self.norm = nn.Sequential() self.w_2 = nn.Linear(d_ff, d_model) self.dropout = None def forward(self, x): x = F.relu(self.w_1(x)).transpose(2,1).contiguous() x = self.norm(x).transpose(2,1).contiguous() x = self.w_2(x) return x PositionwistFeedForward的网络结构比较简单，不再单独分析。 整个Encoder的结构分析完毕。 下面再关注一下Decoder:\nclass Decoder(nn.Module): def __init__(self, layer, N): super(Decoder, self).__init__() self.layers = clones(layer, N) self.norm = LayerNorm(layer.size) def forward(self, x, memory, src_mask, tgt_mask): for layer in self.layers: x = layer(x, memory, src_mask, tgt_mask) return self.norm(x) class DecoderLayer(nn.Module): # Decoder is made of self-attn, src-attn, and feed forward(defined below) def __init__(self, size, self_attn, src_attn, feed_forward, dropout): super(DecoderLayer, self).__init__() self.size = size self.self_attn = self_attn self.src_attn = src_attn self.feed_forward = feed_forward self.sublayer = clones(SublayerConnection(size, dropout), 3) def forward(self, x, memory, src_mask, tgt_mask): m = memory x = self.sublayer[0](x, lambda x: self.self_attn(x,x,x,tgt_mask)) x = self.sublayer[1](x, lambda x: self.src_attn(x,m,m,src_mask)) return self.sublayer[2](x, self.feed_forward) Decoder的网络结构如图：\n而DecoderLayer，接收的变量有x,memory,src_mask,tgt_mask，相当于先计算self-attention,再计算co-attention，最后feed-forward，其网络结构为： 至此Transformer应该已经分析清楚了。\n用于SVD求解的模块Module3 我们的最终目的是求出刚体变换矩阵。使用上一个Module中计算出的soft pointer，可以生成一个平均意义上的match point。 $$ \\hat{y_i} = (Y_m)^T m(x_i,Y) $$ 这里，$Y_m$是指一个$R^{N \\times 3}$的矩阵，包含着$Y$中所有点的信息。 根据这样一种match关系，便可以通过SVD求解出刚体变换矩阵。\n为了能够使得梯度反向传播，我们必须对SVD进行求导，由于我们使用SVD求解的只是3x3，可以使用其导数的近似形式。SVD求导的详细请参考论文:\n Estimating the jacobian of the singular value decomposition: Theory and applications\n class SVDHead(nn.Module): def __init__(self, args): super(SVDHead, self).__init__() self.emb_dims = args.emb_dims self.reflect = nn.Parameter(torch.eye(3), requires_grad=False) self.reflect[2, 2] = -1 def forward(self, *input): src_embedding = input[0] tgt_embedding = input[1] src = input[2] tgt = input[3] batch_size = src.size(0) d_k = src_embedding.size(1) scores = torch.matmul(src_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_k) scores = torch.softmax(scores, dim=2) src_corr = torch.matmul(tgt, scores.transpose(2, 1).contiguous()) src_centered = src - src_mean(dim=2, keepdim=True) src_corr_centered = src_corr - src_corr.mean(dim=2, keepdim = True) H = torch.matmul(src_centered, src_corr_centered.transpose(2,1).contiguous()) U,S,V = [],[],[] R = [] for i in range(src.size(0)): u, s, v = torch.svd(H[i]) r = torch.matmul(v, u.transpose(1, 0).contiguous()) r_det = torch.det(r) if r_det \u0026lt; 0: u, s, v = torch.svd(H[i]) v = torch.matmul(v, self.reflect) r = torch.matmul(v, u.transpose(1, 0).contiguous()) R.append(r) U.append(u) S.append(s) V.append(v) U = torch.stack(U, dim=0) V = torch.stack(V, dim=0) S = torch.stack(S, dim=0) R = torch.stack(R, dim=0) t = torch.matmul(-R, src.mean(dim=2, keepdim = True)) + src_corr.mean(dim=2, keepdim=True) return R, t.view(batch_size, 3) 疑惑： 没在源码中看到有针对SVD求导的优化。\n损失函数 $$ Loss = ||R_{XY}^TR_{XY}^g - I||^2 + ||t_{XY} - t_{XY}^g||^2 + \\lambda||\\theta||^2 $$\n关于DCP_v1和DCP_v2 DCP_v1 没有应用Attention机制。\nDCP_v2 应用了Attention机制。\n深入探究 关于特征提取：选择PointNet还是DGCNN? PointNet 学习的是全局特征， 而DGCNN通过构建k-NN Graph学习到的是局部集合特征。\n从文中的实验结果可以看出，使用DGCNN作为emb_net，比PointNet的性能始终要好。 关于计算刚体变换：选择MLP还是SVD？ MLP在理论上可以模拟任何非线性映射。 而SVD是针对任务进行有目的性设计的网络。\n从文中的实验结果可以看出，使用SVD计算rigid transformation总是更优。 结语 以上就是我个人对DCP的笔记记录以及一些解读。\n疑惑: LayerNorm的作用机制如何？\nDCP的缺点 DCP 的文章主要有如下问题：\n 实验进行的数据集是ModelNet40， ModelNet40严格上来讲适用于分类任务，所有点基本都是均匀采样的，没有离群点， 即使有噪声也是人为添加的高斯噪声，这就使得文章的结论很缺乏说服力。 DCP没有涉及裁剪率的问题，只能对默认两个点云之间是满射，这是不对的。在应用中也会有很多问题。  如果觉得文章对您有帮助，欢迎点赞留言交流。给作者买杯咖啡就更感激不过了！ ","date":"2020-12-22T00:00:00Z","permalink":"https://codefmeister.github.io/p/dcp%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"DCP论文阅读笔记"},{"content":"torch.unsqueeze()函数解读 语法 torch.unsqueeze(input, dim) --\u0026gt; Tensor\nParameters   input(Tensor) \u0026ndash; the input tensor\n  dim(int) \u0026ndash; the index at which to insert the singleton dimension\n  功能  Return a new tensor with a dimension of size one inserted at the specified position.\n 返回一个新的tensor，在指定的位置插入维度为1的一维。\n The returned tensor shares the same underlaying data with this tensor.\n 返回的这一Tensor在内存中是和原Tensor共享一个内存数据的。(可以用contiguous来重新分配)\n A dim value within the range [-input.dim() - 1, input.dim() + 1) can be used. Negative dim will correspond to unsqueeze() applied at dim = dim + input.dim() + 1\n dim的取值范围是[-input.dim() - 1, input.dim() + 1). 负的dim值将被映射到dim + input.dim() + 1这一位置去。就相当于$-n$就是从最右往左数第$n$个位置。(-1就是最右插入的位置)\nExample \u0026gt;\u0026gt;\u0026gt; x = torch.tensor([1,2,3,4]) \u0026gt;\u0026gt;\u0026gt; print(x.shape) torch.Size([4]) \u0026gt;\u0026gt;\u0026gt; y = torch.unsqueeze(x,0) \u0026gt;\u0026gt;\u0026gt; print(y.shape) torch.Size([1, 4]) \u0026gt;\u0026gt;\u0026gt; z = torch.unsqueeze(x,1) \u0026gt;\u0026gt;\u0026gt; print(z.shape) torch.Size([4, 1]) ","date":"2020-12-22T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.unsqueeze%E8%A7%A3%E8%AF%BB/","title":"torch.unsqueeze()解读"},{"content":"DGCNN 前言 因为关心的领域主要是配准，对于分类等网络的架构设计分析并没有侧重太多，主要侧重的是EdgeConv的思想。\n论文  Dynamic Graph CNN for Learning on Point Clouds, Wang, Yue and Sun, Yongbin.\n 核心思想:关于EdgeConv 将点云表征为一个图，${\\rm{G}}(V,\\xi )$ ,点云的每一个点对应图中的一个结点，而图中的每一条边对应的是点之间的特征feature，称为Edge-feature。举个例子，最简单的情景，可以通过KNN来构建图。Edge Feature用$e_{ij}$来表示，定义为： $$ e_{ij} = h_{\\Theta}(x_i,x_j) $$ $$ h_{\\Theta}: {R^F} \\times {R^F} \\to {R^{F'}} $$ $h_{\\Theta}$是一个非线性的映射，拥有一系列可学习的参数。\n提出了一个名为EdgeConv的神经网络模块Module，该模块基于卷积神经网络，可以适应在点云上的高阶任务。EdgeConv的对于第i个顶点的输出为：\n其中$□$代表的是一个对称聚合函数，如$\\Sigma, max$。\n可以将上述描述类比为在图像上的卷积操作。我们把$x_i$看作是中心像素点，而$x_j:(i,j) \\in \\xi$可以看做是围绕在点$x_i$周围的像素($x_j$事实上就是和$x_i$之间存在着feature edge的点）。所以类比这样的卷积操作，Edge-Conv可以将n个点的$F$维点云通过“卷积”转换为具有n个点的$F'$维的点云。 所以选择$h$和$□$就变得十分关键。它会直接影响EdgeConv的性能特性。\n一些其他的选择在下一个小part中讨论。在本文中，作者采用的： $$ h_{\\Theta}(x_i,x_j) = {\\bar h}_{\\Theta}(x_i, x_j - x_i) $$\n从这个表达式可以非常明显的看出，既结合了全局形状结构，也结合了局部的结构信息。Global shape structure通过$x_i$捕捉，local neighborhood information通过$x_j - x_i$来捕捉。\n更具体一点的说，通过如下两个公式来计算edge_feature以及x'： $$ e_{ijm}' = ReLU(\\theta_m \\cdot(x_j - x_i) + \\phi_m \\cdot x_i) $$ $$ x_{im}' = \\mathop {\\max }\\limits_{j:(i,j) \\in \\xi }e_{ijm}' $$\n可以通过shared MLP实现。$\\Theta = (\\theta_1, \u0026hellip;, \\theta_M,\\phi_1, \u0026hellip;, \\phi_M)$\n文中采用了Dynamic Graph Update，即动态图更新。在每一层计算结束得到新的$x'$后，会根据在特征空间上的最近邻(其实就是x\u0026rsquo;间的欧式距离)关系，动态更新图。这也是该文章命名的由来。动态更新可以使得EdgeConv的感受野变得越来越大，与点云的直径一样大，同时还很稀疏。\n在每一层之后，根据新的特征点云$x'$，在特征空间上的距离，对于每一个点，使用KNN寻找其k个最近点，重新构建Feature Edge。\n网络结构 网络结构的整体结构并不是我关注的重点。作者给出的网络结构有两个：一个用于classification,一个用于segmentation。\n同时，需要说明的是，作者在Sec.4中描述的网络结构与贴的图不一致。这里采用的是修正后的网络结构图。 部分关键代码 寻找KNN，获得feature_edge的代码：\ndef knn(x,k): inner = -2 * torch.matmul(x.transpose(2, 1), x) xx = torch.sum(x**2, dim=1, keepdim=True) pairwise_distance = -xx - inner - xx.transpose(2, 1) idx = pairwise_distance.topk(k=k, dim=-1)[1] #(batch_size, num_points, k) return idx def get_graph_feature(x, k=20, idx=None, dim9 = False): # x: (batch_size, 3, num_points) batch_size = x.size(0) num_points = x.size(2) x = x.view(batch_size, -1, num_points) if idx is None: if dim9 == False: idx = knn(x, k=k) else: idx = knn(x[:, 6:], k=k) device = torch.device(\u0026#39;cuda\u0026#39;) idx_base = torch.arange(0, batch_size, device=device).view(-1,1,1)*num_points idx = idx + idx_base idx = idx.view(-1) _,num_dims,_ = x.size() x = x.transpose(2,1).contiguous() # (batch_size, num_points, num_dims) --\u0026gt; (batch_size*num_points, num_dims) feature = x.view(batch_size*num_points, -1)[idx, :] # KNN feature = feature.view(batch_size, num_points, k, num_dims) x = x.view(batch_size, num_points, 1, num_dims).repeat(1,1,k,1) feature = torch.cat((feature-x, x), dim=3).permute(0, 3, 1, 2).contiguous() return feature # (batch_size, 2*num_dims, num_points, k) 下面这部分代码是分类网络，从中可以窥到EdgeConv以及动态更新的机制:\nclass DGCNN_cls(nn.Module): def __init__(self, args, output_channels = 40): super(DGCNN_cls, self).__init__() self.args = args self.k = args.k self.bn1 = nn.BatchNorm2d(64) self.bn2 = nn.BatchNorm2d(64) self.bn3 = nn.BatchNorm2d(128) self.bn4 = nn.BatchNorm2d(256) self.bn5 = nn.BatchNorm1d(args.emb_dims) self.conv1 = nn.Sequential(nn.Conv2d(6,64, kernel_size = 1, bias = False), self.bn1, nn.LeakyReLU(negative_slope=0.2)) self.conv2 = nn.Sequential(nn.Conv2d(64*2, 64, kernel_size=1, bias = False), self.bn2, nn.LeakyReLU(negative_slope=0.2)) self.conv3 = nn.Sequential(nn.Conv2d(64*2, 128, kernel_size=1, bias = False), self.bn3, nn.LeakyReLU(negative_slope=0.2)) self.conv4 = nn.Sequential(nn.Conv2d(128*2, 256, kernel_size=1, bias = False), self.bn4, nn.LeakyReLU(negative_slope=0.2)) self.conv5 = nn.Sequential(nn.Conv1d(512, args.emb_dims, kernel_size=1, bias=False), self.bn5, nn.LeakyReLU(negative_slope=0.2)) self.linear1 = nn.Linear(args.emb_dims*2, 512, bias=False) self.bn6 = nn.BatchNorm1d(512) self.dp1 = nn.Dropout(p=args.dropout) self.linear2 = nn.Linear(512, 256) self.bn7 = nn.BatchNorm1d(256) self.dp2 = nn.Dropout(p=args.dropout) self.linear3 = nn.Linear(256, output_channels) def forward(self, x): batch_size = x.size(0) x = get_graph_feature(x, k=self.k) # (batch_size, 3, num_points) --\u0026gt; (batch_size, 3*2, num_points, k) x = self.conv1(x) # (batch_size, 3*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x1 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x1, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv2(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x2 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x2, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv3(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 128, num_points, k) x3 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 128, num_points, k) --\u0026gt; (batch_size, 128, num_points) x = get_graph_feature(x3, k=self.k) # (batch_size, 128, num_points) --\u0026gt; (batch_size, 128*2, num_points, k) x = self.conv4(x) # (batch_size, 128*2, num_points, k) --\u0026gt; (batch_size, 256, num_points, k) x4 = x.max(dim=-1, keepdim=False) # (batch_size, 256, num_points, k) --\u0026gt; (batch_size, 256, num_points) x = torch.cat((x1, x2, x3, x4), dim=1) # (batch_size, 64+64+128+256, num_points) x = self.conv5(x) #(batch_size, 64+64+128+256, num_points) --\u0026gt; (batch_size, emb_dims, num_points) x1 = F.adaptive_max_pool1d(x, 1).view(batch_size, -1) # (batch_size, emb_dims, num_points) --\u0026gt; (batch_size, emb_dims) x2 = F.adaptive_avg_pool1d(x, 1).view(batch_size, -1) # (batch_size, emb_dims, num_points) --\u0026gt; (batch_size, emb_dims) x = torch.cat((x1, x2), 1) # (batch_size, emb_dims*2) x = F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2) # (batch_size, emb_dims*2) --\u0026gt; (batch_size, 512) x = self.dp1(x) x = F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2) # (batch_size, 512) --\u0026gt; (batch_size, 256) x = self.dp2(x) x = self.linear3(x) #(batch_size, 256) --\u0026gt; (batch_size, output_channels) return x 特性 置换不变性 考虑每一层的输出：\n每一层的输出$x_i'$是不会随着输入$x_j$的输入顺序改变而变化的。其原因在于max是一个对称的函数。\n平移不变性 EdgeConv有着部分额平移不变性。因为： $$ h_{\\Theta}(x_i,x_j) = {\\bar h}_{\\Theta}(x_i, x_j - x_i) $$ 从这个公式就可以看出，函数的一部分是Translation-dependent的，而另一部分是具有平移不变性的。\n用EdgeConv的理论重新审视其他网络 PointNet PointNet的特点是将每一个点进行单独处理，不断抽象到高维空间（这也正是其缺乏局部结构信息的缺陷来源）。 所以PointNet实际是本文理论的一种特殊情形。$k = 1, \\xi = \\emptyset$,采用的Edge Function实际上是：$h_{\\Theta}(x_i,x_j) = h_{\\Theta}(x_i)$.只考虑到Global feature而忽略了local geometry。\nPointNet++ PointNet++意识到了PointNet中存在的问题，所以它通过FPS采样，然后通过ball query构造局部点集，再通过PointNet抽象出局部特征。\nPointNet++ 首先通过欧氏距离来构建图Graph，然后每经过一个layer对图进行一次粗糙化。在每一层，首先通过FPS选取一些点，只有这些被选取的点将保留，其他的点都将被抛弃。通过这种方法，图会在每经过一层网络后变得越来越小。同时，PointNet++使用输入数据的欧式距离来计算点对关系，所以就导致了他们的图在整个训练过程中是固定的，而不是动态调整的（DGCNN一大特点就是动态图）。Edge Function是$h_{\\Theta}(x_i,x_j)=h_{\\Theta}(x_j)$\nMoNet 与 PCNN 笔者还未阅读这两篇论文。看的时候没什么概念。先留个坑。\n","date":"2020-12-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/dgcnn%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","title":"DGCNN论文解读"},{"content":"图解Transformer  Reference: The Illustrated Transformer\n 本文自译用于加深理解与印象。\n关于注意力机制，可以参考先前的Seq2Seq Model with Attention\nTransformer是论文Attention is All You Need提出的。在这篇文章中，我们将尝试把事情弄得简单一点，逐个介绍概念，以便更好理解。\nA High-Level Look 我们首先把模型看作是一个黑箱。在机器翻译领域的应用中，输入一种语言的一个句子，会输出另外其翻译结果。 揭开盖子，我们能够看到一个编码组件encoding component，一个解码组件decoding component，还有其之间的连接关系connections。 编码组件是一堆编码器构成的（Paper中堆叠了六个编码器，六个并没有什么说法，你也可以尝试其他数字）。解码组件也是由一堆解码器构成的（数量与编码器相同）。 所有编码器在结构上都是相同的，然而他们并不共享参数（或权重）。 每一个都可以被拆分为两个子层sub-layers。 编码器的输入首先流过self-attention层，self-attention层可以帮助我们在对某个特定的词进行编码的时候同时关注到句子中其他位置单词的影响。\nself-attention层的输出被送往feed-foward neural network，即前馈神经网络层。完全相同的前馈网络，独立地作用于每一个位置position上。\n解码器也有上述这两个层，但除此以外，在这两层之间，还有一个attention layer，帮助解码器更加关注输入句子中相关的部分。（作用类似于Seq2Seq中的注意力机制的作用。） Bringing The Tensor Into The Picture 现在，我们已经了解了模型的主要组件，下面让我们开始研究各种矢量/张量以及它们如何在这些组件之间流动，以将经过训练的模型的输入转换为输出。\n首先我们将每一个输入单词通过embedding algorithm转换为一个词向量。 嵌入过程只发生在最底部的encoder。对于所有的编码器Encoder，他们都接受一个size为512的向量列表作为输入。只不过对于最底部的Encoder，其输入为单词经过嵌入后得到的词向量，而其他的Encoder的输入，是其下方一层Encoder的输出。列表的size是一个我们可以设定的超参数——通常来讲它会是我们训练集中最长的一个句子的长度。\n在将输入序列中的单词进行Embedding之后，他们中的每一个都会流过编码器的两层。 从这里我们可以看到一个Transformer非常重要的特性，那便是每一个位置上的单词在Encoder中自己的路径上各自流动。在self-attention层中，这些路径之间存在相互依赖。而前馈层feed-forward中彼此间并无依赖。所以在流经前馈层的时候，可以进行并行化处理。\n下面我们将举一个短句的例子，然后观察sub-layer上发生了什么。\nNow We\u0026rsquo;re Encoding 像我们先前提到的，一个编码器接收一个向量列表作为输入。这个向量列表首先被送往self-attention层，然后再送往feed-forward前馈层。处理结束后将其output送往下一个Encoder。  每个位置的单词都被送往一个self attention层，然后再穿过一个前馈神经网络——每个向量独立穿过这个完全相同的网络。\n Self-Attention at a High Level self-attention是Paper中提出的一个全新概念，不要被其简单的命名给迷惑。\n假设我们输入了如下一个句子，并试图进行翻译：\n\u0026ldquo;The animal didn\u0026rsquo;t cross the street because it was too tired\u0026rdquo;\n那么句子中的it指代谁呢？是指街道street还是指动物animal。这个问题对人类来说再简单不过，不过对算法来说却不是这样。\n当处理单词it时，self-attention机制就可以让it与animal联系在一起。\n当模型处理每个单词（即输入序列中的每个position）时，self-attention可以在输入序列中的其他位置中寻找线索，来帮助这个单词获得更好的编码效果。\n如果你熟悉RNN的话，想一下RNN是通过维持一个隐藏状态，来结合先前的处理过的向量与当前的输入向量。 而Self-attention层是结合所有其他相关单词的\u0026quot;理解\u0026quot;，将这些理解“融入”对当前处理单词的编码中。  当我们在最顶端的编码器#5对单词it进行编码时，注意力机制的一部分就会集中在The Animal上，并将它的一部分编码表示（representation，我个人理解为是编码表示）融入到对it的编码中去。\n Self-Attention in Detail 我们先看一下如何使用向量来计算self-attention，然后再看一次它真正的实现方式——通过矩阵计算。\nSelf-Attention的第一步：为输入的向量列表中的每一个向量(在这里的例子，由于是最底层，所以输入的是单词的Embedding)都创建三个向量。所以对于每个单词而言，我们创建了一个Query vector，一个Key vector，一个Value vector。这三个向量是通过将输入向量乘以三个矩阵（矩阵是在训练中得到的）而得到的。\n值得关注的是，这些新的向量在维度上比输入向量更小。他们的维度是64，而embedding和编码器的input/output向量的维度是512。这些向量并不是必须要比原来的维度更小，这仅仅是一种架构上的选择，为的是multiheaded attention的计算恒定。\n 用$x_1$乘以权重矩阵$W^Q$就得到了$x_1$的query vector-$q1$。类似这样，我们最终为输入序列中的每个单词都创造一个query，一个key，以及一个value投影。\n 第二步：计算score。例如当我们计算下例中的第一个单词\u0026quot;Thinking\u0026quot;时，我们需要基于当前单词，为输入句子中其他位置的每个单词打分（有一点条件概率的意思）。这个分数决定了在我们对这个单词进行编码的时候，对输入序列的单词需要给予多少注意力。\n该分数通过将query vector与key vector进行点积操作dot product来得到。所以当我们对位置1的单词计算其self-attention时，第一个分数会是q1和k1的点积。第二个分数是q1和k2的点积。 第三步是将这些分数除以8(8是论文中key vector维度64的平方根，这可以使得梯度更加稳定，同时你可以选取其他的值)。\n第四步是经过一个softmax操作，softmax可以保证score经过处理后全部为正，而且加和为1. softmax score决定了每个单词将对这个position的下一次编码起到多大作用。显然，当前位置的单词会有最大的softmax score，但是无疑，关注与当前单词有关的单词是很有用。\n第五步：是将每个值向量value vector乘以其对应的softmax分数（要准备将他们加在一起了），这一步的动机就是放大那些我们focus的单词，而淡化那些不那么重要的单词。\n第六步：将所有加权后的值向量weighted value vector（上一步得到的）相加，得到self-attention层对于该位置（例子中是第一个单词）的输出。 以上就是self-attention的计算过程。得到的向量是一个我们可以直接送往前馈神经网络的向量。 在实际的实现中，我们通过矩阵运算来更快的处理。\nMatrix Calculation of Self-Attention 第一步： 计算Query,Keyand Value矩阵。我们通过把输入的向量打包为一个矩阵，然后乘以我们训练得到的权重矩阵计算之。  X中的每一行对应输入序列中的一个单词。我们从图中又一次可以看到embdding vector和q/k/v向量的在维度上是不同的。\n 最后：由于我们使用矩阵进行数据处理，我们可以把2-6步浓缩到一步，直接计算出self-attention层的输出。 The Beast With Many Heads 论文随后进一步细化了self-attention层，为其增加了一种叫做multi-headed attention的机制。它通过两种方式提升attention-layer的表现。\n \u0026ldquo;Multi-head\u0026quot;扩展了模型focus于不同位置的能力。就像上面那个例子一样，z1包含有其他每个字母编码的一小部分，但其主要还是被其本来位置上的单词所主宰。在我们翻译类似\u0026quot;The animal didn\u0026rsquo;t cross the street because it was too tired\u0026quot;这种句子时，Multi-Head Attention是非常有用的，因为我们想要知道it指代的是谁。 \u0026ldquo;Multi-head\u0026quot;给了Attention Layer一些代表子空间representation subspaces。Multi-Headed Attention机制下，我们不再是只有一组权重矩阵，而是有多组权重矩阵(Transformer中使用了八个attention head，所以我们最后会得到八组Query/Key/Value的权重矩阵。每一组都是随机初始化， 然后经过循环后，每一组都用于将输入向量投影到不同的子空间中representation subspace。    Multi-headed Attention机制下，我们分别保存着每个子空间(each head)的Q/K/V矩阵。\n 那么为上述八组Q/K/V矩阵，分别做完上述的self-attention计算后，我们会得到八个不同的Z矩阵。 然后迎面而来的就有一个小问题，前馈神经网络并不需要8个矩阵，它期待的输入是一个矩阵，其中每一个向量代表一个单词。所以我们需要一种方法来将八个矩阵浓缩为一个。\n怎么做呢？我们concatenate这些矩阵，然后将拼接后的矩阵乘以一个额外的weights matrix\u0026ndash;$WO$。所得到的结果Z就会捕捉到所有attention head中包含的信息，然后这个Z被送往FFNN。 以上就是Multi-head self-attention的全部，下面我们将所有的信息集合在一张图中： 说完了attention-head，我们回顾一下先前的例子，看一下不同的attention head在我们对it进行编码的是如何focus的。  当我们编码单词it时，一个attention head更集中于the animal上，另一个更集中于tired上。从语义上分析，it在编码时融入了animal和tired的representation\n 所有attention head全部加进来的情况如下，语义上有点难解释。 Representing The Order of the Sequence Using Positional Encoding 以上我们描述的模型中，缺失了单词在输入序列中的输入顺序。（没有时序信息）\n为了记录这一点，Transformer为每个input embedding加上了一个向量。这些向量遵循模型学习的一种特定模式specific pattern，有助于确定每个单词的位置，或序列中不同单词之间的距离。这里的直觉是：将这些值添加到embedding中，当其被投影到Q/K/V向量中或者在进行点积操作时，就会提供有意义的距离信息。 假设embedding是四维的话，那么实际的positional encoding看起来可能是这个样子: 而pattern看起来应该是什么样子？\n在下图中，每一行对应一个向量的位置信息的编码结果。所以第一行就是我们将要加到输入序列中第一个单词的embedding结果上的向量。每一行含有512个值，每个值的取值范围都是[-1,1],下图进行了可视化。 positional encoding的公式在论文中详细描述了，而且这也不是唯一的对位置信息进行编码的方法。但是论文中的编码方式有一个优势：可以对未训练过的序列长度进行很好的缩放。\nThe Residuals 一个encoder架构的细节是： 在每个sub-layer之后，都有一个residual connection，随后是一个layer-normalization归一化操作。 如果我们将向量和layer-norm与self attention的操作形象化，它看起来会是这样： 对于解码器的子层，也是这样。如果我们把它想象成一个由两个堆叠的编码器和解码器（Paper中是六个），它看起来应该是这样的。 The Decoder Side 我们已经讨论了编码器方面的绝大部分概念，也知道了其是如何工作的。下面让我们看一下他们是怎么样一起工作的。\n编码器从处理输入序列开始，最顶端的编码器的输出随后被转换为attention vector $K,V$的集合。这些向量在每一个解码器decoder的encoder-decoder层使用，用于帮助解码器focus在input sequence的恰当位置。 下面的步骤重复这个过程，直到遇到终止符（表明decoder已经完成输出）。每一步的输出都会在下一个时间步反馈给最底层的解码器，解码器会将其输出一层一层向上bubble up，就像编码器所做的一样。同时，我们也为解码器的输入加上了位置信息的编码。\n解码器中的self-attention layer与编码器中有微微的一些不同。\n在解码器中，self-attention layer只允许将时序上在前的位置信息“融合”进输出序列，这是通过在softmax步前进行mask来完成的。\n而Encoder-Decoder Attention层的工作原理，类似于Multiheaded self-attention，不同的是，它从其下一层创建Query Matrix， 而Key和Value矩阵都来自编码器最上层的输出。\nThe Final Linear and Softmax Layer 解码器输出的是一个浮点数的向量，我们应该如何将其转换为单词呢？这就是最后一个线性层的工作，其后还跟着一个Softmax层。\nLinear Layer是一个简单的全连接神经网络，将解码器产生的向量投影到一个维度大的多的向量logits vector\n假设我们的模型从训练集中学到了10000个不同的英文单词，那么我们的logits vector就有10000个元素，每个都对应着一个单词的score。这就是我们将其转换成单词的方法。\nSoftmax 层随后将这些score转换为概率，有最高概率的单词被选中，然后输出。\n","date":"2020-12-18T00:00:00Z","permalink":"https://codefmeister.github.io/p/%E5%9B%BE%E8%A7%A3transformer/","title":"图解Transformer"},{"content":"Conv1d与Conv2d 本文分为几个部分来详解Conv2d与Conv1d。主要侧重于Conv2d\n前言 本文记于2020年12月15日，起因是DGCNN中部分卷积使用了二维卷积，部分卷积使用了一维卷积。加之之前对Conv2d与Conv1d属于一种迷迷糊糊的状态，趁着这个机会弄清楚。\nConv2d原理（二维卷积层） 二维互相关运算 互相关运算与卷积运算 虽然卷积层得名于卷积(convolution)运算，但所有框架在实现卷积层的底层，都采用的是互相关运算。实际上，卷积运算与互相关运算类似，为了得到卷积运算的输出，我们只需要将核数组左右翻转并上下翻转，然后再与输入数组做互相关运算。所以这两种运算虽然类似，但是输出并不相同。\n但是由于深度学习中核数组都是学习得到的，所以卷积层无论使用互相关运算还是卷积运算，都不影响模型预测时的输出。也就是说我们用卷积运算学出的核数组与用互相关运算学出的核数组两者之间可以通过上下翻转，左右翻转来相互转换。所以在框架乃至于绝大部分深度学习文献中，都使用互相关运算来代替了卷积运算。\n互相关运算 在二维卷积层中，一个二维输入数组和一个二维核(kernel)数组通过互相关运算输出一个二维数组。举个例子来解释二维互相关运算：\n假设输入数组的高和宽均为3， 核数组的高和宽均为2，该数组在卷积运算中又称为卷积核或者过滤器(filter)。 19是这样得出的： $19 = 0\\times0 + 1\\times1 + 3\\times2 + 4\\times3$ 。\n卷积窗口从输入数组的最左上方开始，按照从左往右，从上往下的顺序，依次在输入数组上滑动。当卷积窗口滑动到某一位置时，窗口中的输入子数组与核数组按元素相乘并求和。得到输出数组中对应位置的元素。\n二维卷积层 二维卷积层将输入和卷积核做互相关运算，并加上一个标量偏差来得到输出。卷积层的模型参数包含了卷积核和标量偏差。我们在训练模型的时候，通常先对卷积层进行随机的初始化，然后不断迭代卷积核和偏差。\n卷积窗口形状为$p \\times q$的卷积层称为$p \\times q$卷积层。\n特征图与感受野 二维卷积层输出的二维数组可以看做是输入在空间维度上(宽和高)上某一级的表征，也叫特征图(feature map)。影响元素$x$的前向计算的所有可能输入区域(甚至可能大于输入的实际尺寸)叫做$x$的感受野(receptive field)。以上图为例，图中输入的阴影部分的四个元素就是输出数组中阴影部分元素的感受野。如果我们将该输出再和一个$2 \\times 2$的核数组做互相关运算，输出单个元素$z$。那么$z$在输入上的感受野包含全部的9个元素。\n可见，我们可以通过更深的卷积神经网络使特征图中单个元素的感受野变得更加广阔，从而捕捉输入上更大尺寸的特征。\n填充与步幅 卷积层的输出形状由输入形状和卷积核窗口形状决定，通过填充与步幅，我们可以改变给定形状的输入和卷积层下的输出形状。\n填充 填充padding是指在输入高和宽的两侧填充元素(通常是0元素)。如下图： 假设输入形状为$n_h \\times n_w$， 卷积核窗口形状是$k_h \\times k_w$，在高的两侧一共填充$p_h$行，在宽的两侧一共填充$p_w$列，那么输出形状将会是： $$ (n_h - k_h + p_h + 1) \\times (n_w - k_w + p_w + 1) $$ 很多情况下我们会设置$p_h = k_h -1$和$p_w = k_w - 1$来使得输入输出具有相同的高和宽。\n对于任意的二维数组X，当两端的填充个数相同，并使得输入和输出具有相同的高和宽时，我们就知道输出Y[i,j]是输入以X[i,j]为中心的窗口同卷积核进行互相关运算而得到的。\n步幅 卷积窗口从输入数组的最左上方开始，按照从左向右，从上向下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅(stride)。\n当高上步幅为$s_h$，宽上步幅为$s_w$时，输出形状为： $$ [(n_h - k_h + p_h + s_h)/s_h] \\times [(n_w - k_w +p_w +s_w) / s_w] $$\n为了表述简洁，当输入的高和宽两侧的填充数分别为$p_h$和$p_w$时，我们称填充为$(p_h, p_w)$。特别地，当$p_h = p_w = p$时，填充为$p$。当在高和宽上的步幅分别为$s_h$和$s_w$时，我们称步幅为($s_h,s_w$)。特别地，当$s_h = s_w = s$时，步幅为$s$。在默认情况下，填充为0，步幅为1.\n多输入通道和多输出通道 多输入通道 当输入数据含多个通道时，我们需要构造一个输入通道数和输入数据的通道数相同的卷积核，从而能够与含多通道的输入数据做互相关运算。\n假设输入数据的通道数为$c_i$，那么卷积核的输入通道数同样为$c_i$。设卷积核的窗口形状为$k_h \\times k_w$。当$c_i = 1$，我们知道卷积核只包含一个形状为$k_h \\times k_w$的二维数组。当$c_i \u0026gt; 1$时，我们将会为每个输入通道各分配一个形状为$k_h \\times k_w$的核数组，这$c_i$个数组在通道维上连结，即得到一个形状为$c_i \\times k_h \\times k_w$的卷积核。\n由于输入和卷积核各有$c_i$个通道，我们可以在各个通道上对输入的二维数组和卷积核的二维核数组做互相关运算，再将这$c_i$个互相关运算的二维输出按照通道相加，得到一个二维数组。 这就是多个通道的输入数据与多输入通道的卷积核做二维互相关运算的输出。 多输出通道 当输入通道有多个时，因为我们对各个通道的结果进行了累加，所以不论输入通道数是多少，输出通道数总是为1。 设卷积核输入通道数和输出通道数分别为$c_i$和$c_o$，宽和高分别为$k_h$和$k_w$。如果希望得到含多个通道的输出，我们可以为每个输出通道分别创建形状为$c_i \\times k_h \\times k_w$的核数组。将它们在输出通道维连结，卷积核的形状即：$c_o \\times c_i \\times k_h \\times k_w$。 在做互相关运算时，每个输出通道上的结果由卷积核在该输出通道上的核数组与整个输入数组计算而来。\n$1 \\times 1$卷积层 与 全连接层 最后我们讨论卷积窗口形状为$1 \\times 1 （k_h = k_w =1)$的多通道卷积层。我们通常称之为$1\\times1$卷积层，并将其中的卷积运算称为$1\\times1$卷积。因为使用了最小窗口，$1\\times1$卷积失去了卷积层可以识别高和宽维度上相邻元素构成的模式的功能。实际上，$1\\times1$卷积的主要计算发生在通道维上。$1\\times1$卷积的输入和输出具有相同的高和宽。输出中的每个元素来自于输入中在高和宽上相同位置的元素在不同通道之间按权重累加。假设我们将通道维当做特征维，而将高和宽维度上的元素当成数据样本，那么$1\\times1$卷积层的作用于全连接层等价。\n用$1\\times1$卷积替代全连接层的时候，一定需要注意Tensor的维度顺序。 Conv1d Conv1d的输入是三维数据:(Batch_size, channels, width) 卷积操作沿着通道维对width维进行。\n","date":"2020-12-16T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/conv1d%E4%B8%8Econv2d/","title":"Conv1d与Conv2d"},{"content":"LeakyReLU 语法  CLASS torch.nn.LeakyReLU(negative_slope: float = 0.01, inplace: bool = False)\n 作用 Element-wise\n对于每个x，应用函数如图： 函数图像 ","date":"2020-12-14T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/leakyrelu%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/","title":"LeakyReLU函数解析"},{"content":"MATrICP 论文  Improved techniques for multi-view registration with motion averaging\nLi, Zhongyu Zhu, Jihua Lan, Ke Li, Chen Fang, Chaowei\n 核心思想 将Trimmed ICP与运动平均算法结合起来，应用到多视角聚类上。\n算法步骤 1. 估算各帧之间的重叠百分比$\\xi_{i,j}$ 总的来说，估算各帧之间的重叠百分比主要分为两步：\n(1) 对于每一帧，计算其$d_{threshold}$\n(2) 计算出每一帧的$d_{threshold}$之后，使用该参数计算该帧与其他帧的重叠百分比。\n1.0 背景知识 ObjFunc：\n1.1 计算$d_{threshold}$ 对于第i帧的每一个点，可以在其他所有帧中寻找到N-1个对应点（通过NN），假设第i帧有$N_i$个点，那么一共会有$N_i * (N-1)$个点对与距离。因为我们是要进行多视角配准的，相当于把当前帧作为源scan，其他所有帧组成的模型作为目标模板进行配准。所以将这些所有距离按照从小到大进行排序，然后依次对于每一个距离，计算该距离以及之前所有距离对应的ObjectFunction值。可以使用cumsum操作。结果是得到同样长度的ObjectFunction值的数组，取其中的最小值，该目标函数最小值对应着一个距离$d_i$，这个距离$d_i$就可以作为第i帧的$d_{threshold}$，用于第i帧与其他帧（第j帧）的重叠率估算。\n1.2 计算第i帧与其他帧的重叠百分比 对于第$i$帧，我们现在有其$d_{threshold}$。那么求$\\xi_{i,j}$，即为：使用NN寻找点对pair$(P_i,P_j)$，然后从小到大排列，取$d \u0026lt; d_{threshold}$的部分。假设有$N_j^{'}$个点对满足要求。那么重叠百分比$\\xi_{i,j} = N_j^{'} / N_j$，$N_j$为第j帧的点。\n2. 根据估算得到的${\\xi_{i,j}}$，选择重叠率高的scan pair，应用TrICP算法求解其relative Motion $M_{i,j}$ 2. 应用运动平均算法 在应用Motion Average前，我们已经有了初始的Global Motion以及一系列Relative Motion。\n运动平均的主要思想是，将relative Motion看作是global Motion的某种组合。先求出$\\Delta M_{i,j}$，将其转换为李代数对应的6x1的向量。然后通过Average的思想，求出global Motion的变化值。\n2.1 计算relative motion $M_{i,j}$的变化值 通过global motion，可以求出$\\Delta M_{i,j}$ $$ \\Delta M_{i,j} = M_i^0 M_{i,j} {(M_j^0)}^{-1} $$\n2.2 转换为李代数，从SE(4) 到 se(4) $$ \\Delta m_{i,j} = logm(\\Delta M_{i,j}) $$\n2.3 求李代数上变化量的均值 首先先使用映射将其李代数映射为其对应的六元向量： $$ \\Delta v_{i,j} = vec(\\Delta m_{i,j}) $$\n然后构造一个矩阵D，应用如下公式即可求出global motion的Average值。\n$D_{i,j}$在第i列是$-I$，在第j列为$I$。\nD的含义可能比较难理解，我们有：\n$$ \\Delta \\zeta = D^{\\dag} \\Delta V_{i,j}\n$$ $$ D \\Delta \\zeta = \\Delta V_{i,j} $$ 该符号打不出来，我们用$\\Delta \\zeta$代替了。\n举个例子： 一共3个scan。relativeMotion有两个，假设为$\\Delta v_{1,2}, \\Delta v_{1,3}$。\n可以看出来，通过D对$\\Delta \\zeta$的线性变换，的确得到了$\\Delta v_{i,j}$的另一种表现形式，所以对D求伪逆，左乘在$V_{i,j}$旁，即可得到包含有global motion的结果。\n2.4 根据求得的global motion difference，变换回SE(4)，对现有Motion进行更新。 2.5 判断是否满足条件，若不满足重新回到2.1， 若满足退出。 条件：\n","date":"2020-12-03T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/matricp%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","title":"MATrICP论文解读"},{"content":"ndarray的转置(transpose) 对于A是由np.ndarray表示的情况：\n可以直接使用命令A.T。\n也可以使用命令A.transpose()。\nA.T 与 A.transpose()对比 结论: 在默认情况下，两者效果相同，但transpose()可以指定交换的axis维度。\n对于一维数组，两者均不改变，返回原数组。\n对于二维数组，默认进行标准的转置操作。\n对于多维数组A,A.shape为(a,b,c,d,...,n)，则转置后的shape为(n,...,d,c,b,a)。\n对于.transpose()，可以指定转置后的维度。语法：A.transpose((axisOrder1,...,axisOrderN))，其效果等同于np.transpose(A,(axisOrder1,...,axisOrderN)),(axisOrder)中是想要得到的索引下标顺序。效果详见例子。\nExample： 二维默认情况下： A = np.array([[1,2],[3,4]]) print(A) print(A.T) print(A.transpose()) 结果如下：\n多维默认情况下： a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) print(a.shape) print(a.T.shape) print(a.transpose().shape) 结果如下：\n指定维度情况： a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) print(a.shape) print(a.transpose(1,2,0).shape) A = np.transpose(a,(1,2,0)) print(A.shape) 结果如下：\n从截图中可以看出，a.transpose(1,2,0)与np.transpose(a,(1,2,0))效果相同。代码段中给出的axes是(1,2,0)，这决定了transpose后的数组，其shape在第一个维度即shape[0]上是原来的shape[1]，第二维shape[1]是原来的shape[2]，第三维shape[2]是原来的shape[0]。所以原shape为(3,2,4)。新的shape为(2,4,3)。\n","date":"2020-11-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/np.transpose%E8%AF%A6%E8%A7%A3/","title":"np.transpose()详解"},{"content":"np.unique()官方文档分析以及举例 1.1 官方文档及解读 numpy.unique 语法：numpy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)\n作用：找到array中不重复（独一无二）的元素\n返回值：默认返回不重复元素的sorted排好序的从小到大的数组。可选的返回值有：\n 输入数组提供不重复值(unique)元素的索引下标(如果有多个返回第一个) 利用unique数组重构原有的input数组所需要的的索引下标 该unique元素在input数组中的出现次数，相当于count  Parameter\n  ar：array like\n输入的数组，除非特别指定axis，数组将被展平为1-D形式进行处理。\n  return_index: bool, optional\n如果为True，返回输入数组提供不重复值(unique)元素的索引下标(如果有多个返回第一个)\n  return_inverse: bool, optional\n如果为True，返回利用unique数组重构原有的input数组所需要的的索引下标\n  axis: int or None, optional\n进行操作的维度。如果为None，数组将被展平作为一维数组处理，如果指定了axis，则以该维索引构成的子数组作为元素，将整个数组视为一维数组进行处理。如果axis被使用，则不支持Object Array以及structured arrays。\n  Returns\n  unique: ndarray\n排好序(从小到大)的unique值\n  unique_indices: ndarray, optional\nunique数组中对应位置的value值第一次在input数组中出现的下标值。当return_index = True时返回。\n  unique_inverse: ndarray, optional\n利用unique数组重构源输入input数组所需要的索引下标。当return_inverse = True的时候返回。\n  unique_count: ndarray, optional 每个unique values在原数组中出现的次数，当return_counts=True时返回。\n  NOTE\n当axis被指定时，subarrays按照指定轴的维度索引。该操作通过将specified axis挪到数组的第一维，然后再将subarrays展开。被展平的subarrays被视为一个结构化类型，我们就可以把以这个结构化类型将原数组视为一个1维数组。结果排序是按结构化元素的第一个元素（类似字典序）排列的。\n1.2 Examples 补一个return_counts:\n \u0026gt;\u0026gt;\u0026gt; a = np.array([1,1,2,2,2,3,8,5,4]) \u0026gt;\u0026gt;\u0026gt; x,x2 = np.unique(a,return_counts = True) x: [1,2,3,4,5,8] x2:[2,3,1,1,1,1,dtype=int64] ","date":"2020-11-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/np.unique%E8%A7%A3%E8%AF%BB/","title":"np.unique()解读"},{"content":"numpy.linalg.norm 语法 numpy.linalg.norm(x,ord=None,axis=None,keepdims=False)\nParameters  x: array_like   Input array. If axis is None, x must be 1-D or 2-D, unless ord is None. If both axis and ord are None, the 2-norm of x.ravel will be returned.\n X是输入的array, array的情况必须是以下三种情况之一:\n axis未指定，ord指定。此时x必须是一维或二维数组 axis指定，x任意 axis未指定，ord未指定，此时x任意，返回值为x被展平后的一维向量x.ravel的二范数。   ord：{non-zero int, inf, -inf, \u0026lsquo;fro\u0026rsquo;, \u0026lsquo;nuc\u0026rsquo;}, optional   Order of the norm (see table under Notes). inf means numpy\u0026rsquo;s inf object. The default is None.\n 范数的阶数，可以不指定。默认为None。inf代表无穷大，-inf为无穷小。\n可选的阶数见下图：\n axis:{None, int, 2-tuple of ints},optional   If axis is an integer, it specifies the axis of x along which to compute the vector norms. If axis is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed. If axis is None then either a vector norm (when x is 1-D) or a matrix norm (when x is 2-D) is returned. The default is None.\n 如果axis是整数，指定了一个维度，在该维度上按照向量进行范数计算。如果是一个二元整数组，指定了两个维度，在指定的这两个维度上可以构成矩阵。对这些矩阵进行计算。如果没有指定axis,那么对于一维输入返回其向量形式的范数计算值，对于二维输入返回其矩阵形式的范数。默认值为None\n keepdims: bool, optional   If this is set to True, the axes which are normed over are left in the result as dimensions with size one. With this option the result will broadcast correctly against the original x.\n 如果keepdims=True，被指定计算范数的维度将在返回结果中保留，其size为1。计算结果会在该维度上进行broadcast\n各范数详析 NOTE: 对于ord\u0026lt;1的各个范数，结果在严格意义不等于数学意义上的范数。但在数值计算层面仍然有效。 默认情况 当不指定ord时，即ord = None，对于矩阵，计算其Frobenius norm，对于向量，计算其2-norm\nFrobenius范数 ord = 'fro'\n其公式为：\nF范数只对矩阵存在。其值为对所有元素的绝对值的平方求和后开平方。\nNuclear范数(核范数) ord = 'nuc' 只对矩阵存在，矩阵的核范数等于其所有奇异值的和。\n无穷大范数 对于矩阵：max(sum(abs(x), axis=1)) ,每一行最终得到一个数，返回最大的数。\n对于向量：max(abs(x)\n无穷小范数 对于矩阵: min(sum(abs(x),axis=1)),每一行得到一个数，返回最小的数。\n对于向量: min(abs(x))\n0 范数 对于矩阵：不存在\n对于向量：sum(x!=0) 所有非零元素的和\n1 范数 对于矩阵：max(sum(abs(x)),axis=0，每一列得到一个数，返回最大值。\n对于向量：sum(abs(x)**ord)**(1./ord)\n-1 范数 对于矩阵：min(sum(abs(x)),axis=0，每一列得到一个数，返回最小值。\n对于向量：sum(abs(x)**ord)**(1./ord)\n2 范数 对于矩阵：最大的奇异值\n对于向量：sum(abs(x)**ord)**(1./ord)\n-2范数 对于矩阵：最小的奇异值\n对于向量：sum(abs(x)**ord)**(1./ord)\n其余int值对应的范数 对于矩阵： Undefined\n对于向量：sum(abs(x)**ord)**(1./ord)\n","date":"2020-11-21T00:00:00Z","permalink":"https://codefmeister.github.io/p/numpy%E6%B1%82%E8%A7%A3%E8%8C%83%E6%95%B0-numpy.linalg.norm/","title":"numpy求解范数--numpy.linalg.norm"},{"content":"python中parse_args以及namespace 声明：本笔记记录的是使用parse_args在函数内部进行传参，并非在命令行进行输入。所有操作均需先进行import argparse。\n通过以下操作，可以在传参时直接传入args这个namespace，而不是具体的某个参数。\n创建argparse对象，设置参数以及默认值 使用argparse.ArgumentParser()创建对象，使用argparser.add_argument()操作设置参数以及默认值。\nExample: parser = argparse.ArgumentParser('Exampe') parser.add_argument('--NDArray',type=np.ndarray,default= NDArray) argument中的参数类型丰富多样，可以是任何数据类型。使用--name来设置参数名，使用type = 设置类型，使用default设置初始化后的默认值。\nparser转换为name_space 使用命令parser.parse_args()，即可将一个ArgumentParser转换为name_space.转换为namespace后，可以对先前设置的argument通过.name的方式类似属性一样进行访问，同样可以进行赋值，存取等操作。\nargs = parser.parse_args() print(args.NDArray) a = np.array([[1,2],[3,4]]) args.NDArray = a namespace 的一些操作 在初始化ArgumentParser时，我们可能忘记添加某些argument，这就导致在转换为namespace后缺少某些attribute.\n我们可以对args使用.__setattr(name,value)设置新的属性值。开辟之后就可以使用.attr的方式进行赋值存取。 同样，我们可以使用.__contains__(attribute_name)判断args这个namespace是否含有该属性。\nargs.__setattr__('cloudArray',[]) args.cloudArray.append(1024) if args.__contains__('cloudArray'): print('namespace args contains attr') ","date":"2020-11-21T00:00:00Z","permalink":"https://codefmeister.github.io/p/parse_args%E4%BC%A0%E5%8F%82/","title":"parse_args传参"},{"content":" 本文参考 lr_scheduler介绍 以及 PyTorch optim文档\n 1 概述 1.1 PyTorch文档：torch.optim解读  下图是optim的文档\n  TORCH.OPTIM torch.optim is a package implementing various optimization algorithms. Most commonly used methods are already supported, and the interface is general enough, so that more sophisticated ones can be also easily integrated in the future.\n torch.optim简介\ntorch.optim是PyTorch实现的一个包，里面有各种各样的优化算法，大部分常用的优化算法都已经被支持，接口也十分通用，所以可以用来集成实现更加复杂的系统。\n How to use an optimizer To use torch.optim you have to construct an optimizer object, that will hold the current state and will update the parameters based on the computed gradients.\n 如何使用PyTorch提供的optimizer\n通过torch.optim来创建一个Optimizer对象，这个对象中会保存当前的状态，并且会根据计算的梯度值更新参数。\n Constructing it To construct an Optimizer you have to give it an iterable containing the parameters (all should be Variables) to optimize. Then, you can specify optimizer-specific options such as the learning rate, weight decay, etc.\n NOTE If you need to move a model to GPU via .cuda(), please do so before constructing optimizers for it. Parameters of a model after .cuda() will be different objects with those before the call. In general, you should make sure that optimized parameters live in consistent locations when optimizers are constructed and used.\n  构造Optimizer\n构造Optimizer时，需要传入一个包含需要进行优化的所有参数的iterable对象，所有参数都必须是Variables类型。随后可以进一步设置optimizer的其他具体参数，如learning rate, weight decay, etc.\n注意:\n如果需要将模型移到cuda上(通过.cuda命令)，那么必须先移动模型，再对模型构造optimizer。因为调用.cuda前的模型参数与调用.cuda后的模型参数不同。\n通常来讲，在使用Optimizer对参数进行优化时，需要保证构造和使用时，被优化的参数保存在同一位置。\n以下是实例：\n Example:\noptimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9) optimizer = optim.Adam([var1, var2], lr=0.0001)   Per-parameter options Optimizers also support specifying per-parameter options. To do this, instead of passing an iterable of Variables, pass in an iterable of dicts. Each of them will define a separate parameter group, and should contain a params key, containing a list of parameters belonging to it. Other keys should match the keyword arguments accepted by the optimizers, and will be used as optimization options for this group.\n NOTE You can still pass options as keyword arguments. They will be used as defaults, in the groups that didn\u0026rsquo;t override them. This is useful when you only want to vary a single option, while keeping all others consistent between parameter groups.\n  Per-parameter option\n我个人翻译为逐参数选项。Optimizer在构造的时候同样支持对每个参数进行指定。要实现这种功能，我们不再传入一个含有Variable类型参数的iterable对象，而是传入一个dict字典类型的iterable对象。每个字典都定义了一个参数组，该参数组的key值是\u0026quot;params\u0026quot;，而对应的值为一个包含参数的列表。同样的可以利用字典的键值对Optimizer的其他参数进行指定，但是key必须与Optimizer构造器传参时的关键字一致。这些指定的Optimizer的参数会被单独应用于该字典中的params这些参数。\n注意：你仍然可以在构造器中以关键字方式传入参数，这些参数将被当做默认值使用，如果一组参数没有override这个参数，那么就将自动使用默认的参数值。\n以下是实例：\n For example, this is very useful when one wants to specify per-layer learning rates:\noptim.SGD([ {'params': model.base.parameters()}, {'params': model.classifier.parameters(), 'lr': 1e-3} ], lr=1e-2, momentum=0.9)   This means that model.base\u0026rsquo;s parameters will use the default learning rate of 1e-2, model.classifier\u0026rsquo;s parameters will use a learning rate of 1e-3, and a momentum of 0.9 will be used for all parameters.\n 对于上面这个例子，首先我们可以看到，传入了一个dict的列表。列表中有两个dict，第一个的paramskey 对应的是model.base.parameters()，而没有对Optimizer的其他参数进行具体指定。第二个dict的paramskey对应的是model.classifier.parameters()，此外还有一个键值对，说明了lr的值为1e-3。而在列表之外同时又传入了lr=1e-2,momentum=0.9，这两个值将作为默认值来使用。所以整个Optimizer中，base's parameters将使用默认的学习率1e-2,默认的动量超参数0.9;而classifier.parameters()将使用其dict中提供的学习率1e-3,momentum仍然使用默认值。\n Taking an optimization step All optimizers implement a step() method, that updates the parameters. It can be used in two ways:\n  optimizer.step()   This is a simplified version supported by most optimizers. The function can be called once the gradients are computed using e.g. backward().\n 采取优化步骤\n所有的Optimizer都实现了step()方法，该方法可以用于更新参数。可以通过两种方式使用.step()进行优化：\n第一种方式：optimizer.step()\n该方法是一个简化后的版本，被大多数optimizer所支持。该函数一般在所有梯度值被更新（或者被计算）后进行调用,如在.backward()后进行调用。\n以下是例子：\n Example:\nfor input, target in dataset: optimizer.zero_grad() output = model(input) loss = loss_fn(output, target) loss.backward() optimizer.step()   optimizer.step(closure)   Some optimization algorithms such as Conjugate Gradient and LBFGS need to reevaluate the function multiple times, so you have to pass in a closure that allows them to recompute your model. The closure should clear the gradients, compute the loss, and return it.\n 第二种方式：optimizer.step(closure)\n有一些优化算法例如Conjugate Gradient，LBFGS等需要多次重新计算函数，所以需要传入一个闭包closure，闭包中应该实现的操作有：清零梯度，计算损失并返回。\n以下是例子：\n Example:\nfor input, target in dataset: def closure(): optimizer.zero_grad() output = model(input) loss = loss_fn(output, target) loss.backward() return loss optimizer.step(closure)  具体的各个优化算法的数学原理在此不表，详参手写的笔记本。\n2 如何调整学习率 torch.optim.lr_scheduler模块，提供了一些根据训练次数来调整学习率(learning rate)的方法，一般情况下我们会设置随着epoch的增大而逐渐减小学习率，从而达到更好的训练效果。 而torch.optim.lr_scheduler.ReduceLROnPlateau提供了一些基于训练中某些测量值使得学习率动态下降的办法。\n学习率的调整应该放在optimizer更新之后，参考模板：\ndefine scheduler for epoch in range(1000): train(...) validate(...) scheduler.step() 注意： 在PyTorch 1.1.0之前的版本，学习率的调整应该被放在optimizer更新之前，如果我们1.1.0之后仍然将学习率的调整(即scheduler.step())放在optimizer\u0026rsquo;s update(即optimizer.step)之前，那么learning rate schedule的第一个值将被跳过。所以如果某个代码是在1.1.0之前的版本开发，移植到高版本进行运行，发现效果变差，可以检查是否将scheduler.step()放在了optimizer.step()之前。\n 注：以上部分参考官方文档批示。\n 2.1 torch.optim.lr_scheduler.StepLR 首先贴上官方文档：\n torch.optim.lr_scheduler.StepLR(optimizer, step_size, gamma=0.1, last_epoch=-1, verbose=False)   Decays the learning rate of each parameter group by gamma every step_size epochs. Notice that such decay can happen simultaneously with other changes to the learning rate from outside this scheduler. When last_epoch=-1, sets initial lr as lr.\n StepLR可以根据超参数gamma每隔固定的step_size就衰减learning_rate一次。需要说明的是，这种对learning_rate的更新可以与外界的其他变化同时进行。当last_epoch = -1时，将lr置为初始值。\n Parameters\n optimizer (Optimizer) – Wrapped optimizer. step_size (int) – Period of learning rate decay. gamma (float) – Multiplicative factor of learning rate decay. Default: 0.1. last_epoch (int) – The index of last epoch. Default: -1. verbose (bool) – If True, prints a message to stdout for each update. Default: False.   参数说明\n optimizer(Optimizer) \u0026mdash;\u0026ndash;用于指定scheduler的应用对象。 step_size(int)\u0026mdash;\u0026ndash;用于指定步长，即几次迭代之后进行一次decay gamma(float)\u0026mdash;\u0026ndash;学习率衰减的乘法因子，默认值为0.1 last_epoch(int)\u0026mdash;\u0026ndash;更新的边界index，当等于这个值的时候，重置lr，默认为-1 verbose(bool)\u0026mdash;\u0026ndash;如果为True，每次decay会向stdout输出一条信息。默认为false.  以下是实例：\n Example\n# Assuming optimizer uses lr = 0.05 for all groups # lr = 0.05 if epoch \u0026lt; 30 # lr = 0.005 if 30 \u0026lt;= epoch \u0026lt; 60 # lr = 0.0005 if 60 \u0026lt;= epoch \u0026lt; 90 # ... scheduler = StepLR(optimizer, step_size=30, gamma=0.1) for epoch in range(100): train(...) validate(...) scheduler.step()  可见:每经过一个step_size，\nlr = lr*gamma ","date":"2020-11-21T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.optim%E8%A7%A3%E8%AF%BB/","title":"torch.optim解读"},{"content":"矩阵的基础知识（转置，逆，迹，行列式）  References: MatrixCookBook(Version 2012) Chapter1\n Chapter1: Basics 1 Basics 注：${A^H}$是A的Transposed and complex conjugated matrix (Hermitian)，即转置复共轭矩阵。\n1.1 矩阵的迹(Trace) 式子(11)表明矩阵的迹是主对角线元素的和。\n式子(12)表明矩阵的迹是矩阵的特征值的和。\n式子(13)表明矩阵的迹等于其转置矩阵的迹。\n式子(14)表明AB的迹等于BA的迹。\n式子(15)表明A+B的迹等于A的迹加B的迹。 式子(16)表明ABC的迹等于BCA的迹等于CAB的迹。\n式子(17)表明一个nx1的向量a，a的转置乘以a所得的常数等于a乘以a的转置所得矩阵的迹。\n1.2 行列式(Determinant) 前提：此处的A是nxn矩阵。\n式子(18)表明矩阵的行列式等于特征值的连乘积。\n式子(19)表明cA的行列式等于A的行列式的${c^n}$倍。\n式子(20)表明矩阵的行列式等于其转置矩阵的行列式。\n式子(21)表明矩阵AB的行列式等于矩阵A的行列式乘以矩阵B的行列式。\n式子(22)表明矩阵${A^{-1}}$的行列式等于矩阵A的倒数。\n式子(23)表明矩阵${A^n}$的行列式等于矩阵A的行列式的n次幂。\n式子(24)表明如果u和v是nx1向量，那么${I+uv^T}$的行列式等于${1+u^Tv}$的值。\n式子(25)表明如果A是2x2矩阵，I+A的行列式等于${1+det(A)+Tr(A)}$,即1+A的行列式+A的迹。\n式子(26)表明如果A是3x3矩阵，I+A的行列式等于${1+det(A)+Tr(A)+\\frac{1}{2}Tr(A)^2-\\frac{1}{2}Tr(A^2)}$。\n式子(27)不表。\n式子(28)表示对于微小扰动$\\varepsilon$，可以将$\\varepsilon A$近似作为2x2形式处理：\n1.3 特例：2x2矩阵 2x2矩阵有着以上的性质与结论。\n","date":"2020-11-15T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/matrixcookbook-chapter1%E7%9F%A9%E9%98%B5%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","title":"MatrixCookBook Chapter1:矩阵的基础知识"},{"content":"model.eval() model.eval() 作用等同于 self.train(False)\n简而言之，就是评估模式。而非训练模式。\n在评估模式下，batchNorm层，dropout层等用于优化训练而添加的网络层会被关闭，从而使得评估时不会发生偏移。\n总结 在对模型进行评估时，应该配合使用with torch.no_grad() 与 model.eval()：\n loop: model.train() # 切换至训练模式 train…… model.eval() with torch.no_grad(): Evaluation end loop ","date":"2020-11-14T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/model.eval%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/","title":"model.eval()作用分析"},{"content":"Iverson Bracket Iverson Bracket 又称 艾弗森括号。常用方括号来表示。满足括号内的条件则值为1， 不满足条件则值为0.\nExample $$ \\hat{\\mathbf{R}}, \\hat{\\mathbf{t}}=\\arg \\max {\\mathbf{R}^{\\prime}, \\mathbf{t}^{\\prime}} \\sum{i}^{|C|} \\llbracket\\left|\\mathbf{R}^{\\prime} x_{i}+\\mathbf{t}^{\\prime}-y_{i}\\right|\u0026lt;\\tau \\rrbracket $$\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.arange() 语法 x = numpy.arange(start,end,step,dtype=None)\nParameters说明  start: Optional，起始值，默认值为0。 end: 结束值(不含)。 step: Optional，步长，默认值为1。 dtype：Optional，默认为None，从其他输入值中推测。  功能 [start,end)的左闭右开区间内，每隔一个step取一次值。return值是ndarray。 对于浮点数来说，length = ceil((end - start)/step)，由于浮点数的上溢，此条规则可能会导致在浮点数情况下，最后一个element比end长。\nNote 如果使用非整数步长（譬如0.1），结果往往不一致（原因见上），所以在这种情况下推荐使用numpy.linspace。\nExample \u0026gt;\u0026gt;\u0026gt; np.arange(3) array([0, 1, 2]) \u0026gt;\u0026gt;\u0026gt;np.arange(3.0) array([ 0., 1., 2.]) \u0026gt;\u0026gt;\u0026gt;np.arange(3,7) array([3, 4, 5, 6]) \u0026gt;\u0026gt;\u0026gt;np.arange(3,7,2) array([3, 5]) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.repeat() 作用 可以用于重复数组中的元素\n语法 numpy.repeat(a, repeats, axis=None)\n参数解读 Parameters   a : array_like\nInput array. repeats : int or array of ints\nThe number of repetitions for each element. repeats is broadcasted to fit the shape of the given axis. axis : int, optional\nThe axis along which to repeat values. By default, use the flattened input array, and return a flat output array.    a: array_like\n输入的想要进行repeat的数组 repeats：int or array of ints\nrepeats参数应该是int类型或者是一个int数组。是对每一个元素repeat的次数。repeats将被广播去适应给定axis的shape。 axis: int, optional\nrepeat操作进行的维度，可选，int值。如果未指定，默认情况下，会将数组展平(flattened)，然后返回一个扁平的重复后的数组。  Returns   repeated_array : ndarray\nOutput array which has the same shape as a, except along the given axis.    repeated_array : ndarray\n返回的repeat后的数组，除了在指定的axis维度以外，其余各维度的shape与原数组a一致。  Example \u0026gt;\u0026gt;\u0026gt; np.repeat(3, 4) array([3, 3, 3, 3]) # 下面这个例子中，x被展平(flattened，返回的数组也是一个扁平数组) \u0026gt;\u0026gt;\u0026gt; x = np.array([[1,2],[3,4]]) \u0026gt;\u0026gt;\u0026gt; np.repeat(x, 2) array([1, 1, 2, 2, 3, 3, 4, 4]) # 下面这个例子指定了axis=1，axis=1的维度上的shape值为2， # 而只给定了3一个数字，所以进行了广播，即进行的操作实际为（3，3） \u0026gt;\u0026gt;\u0026gt; np.repeat(x, 3, axis=1) array([[1, 1, 1, 2, 2, 2], [3, 3, 3, 4, 4, 4]]) # 下面这个例子指定了axis=0，同时给定了repeats数组 # 其长度等于axis=0的shape值。对第一行重复1次，对第二行重复两次。 \u0026gt;\u0026gt;\u0026gt; np.repeat(x, [1, 2], axis=0) array([[1, 2], [3, 4], [3, 4]]) # 如果给定的repeats数组长度与axis不一致，会报错，can not broadcast \u0026gt;\u0026gt;\u0026gt; y = np.array([[1,2],[3,4],[5,6],[7,8]]) \u0026gt;\u0026gt;\u0026gt; np.repeat(y,(3,1),axis = 0) ValueError: operands could not be broadcast together with shape (4,) (2,) # 如果未指定axis，默认展平，但是repeats是数组，同样会报错。 \u0026gt;\u0026gt;\u0026gt; np.repeat(y,(3,1)) ValueError: operands could not be broadcast together with shape (8,) (2,) 类似的函数 如果repeat的功能和你想象中的不一致，那么你可能寻找的是这个函数：\n numpy.tile(A,reps)\n它的功能是：用A，按照reps指定的次数拼成一个新的数组。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.tile 语法 numpy.tile(A,reps)\n作用  Construct an array by repeating A the number of times given by reps.\nIf reps has length d, the result will have dimension of max(d, A.ndim).\nIf A.ndim \u0026lt; d, A is promoted to be d-dimensional by prepending new axes. So a shape (3,) array is promoted to (1, 3) for 2-D replication, or shape (1, 1, 3) for 3-D replication. If this is not the desired behavior, promote A to d-dimensions manually before calling this function.\nIf A.ndim \u0026gt; d, reps is promoted to A.ndim by pre-pending 1\u0026rsquo;s to it. Thus for an A of shape (2, 3, 4, 5), a reps of (2, 2) is treated as (1, 1, 2, 2).\nNote : Although tile may be used for broadcasting, it is strongly recommended to use numpy\u0026rsquo;s broadcasting operations and functions.\n 通过按照reps给定的次数，repeat数组A，构造一个新的数组。\n新的数组的维度数取决于A.ndim和reps的长度d中最大的一个，即max(d,A.ndim)\n如果A.ndim\u0026lt;d，数组A会被升维到d维，通过在其前面增加new axes。如(3,)可以被升维到二维(1,3)，三维(1,1,3)。如果不希望这样的行为，那么需要在调用tile前手动升维。\n如果A.ndim\u0026gt;d，reps会通过前置1的方式被“升维”到A.ndim，如A.shape为(2,3,4,5)，给定的reps为(2,2)。那么reps会被当做(1,1,2,2)处理。\n参数与返回值 Parameters   A : array_like\nThe input array. reps : array_like\nThe number of repetitions of A along each axis.    A: array_like\n输入数组A reps: array_like\n每一维度A的重复次数  Returns   c : ndarray\nThe tiled output array.    c : ndarray\n输出数组  Example 仔细观察下面的例子，你会发现：\n 首先，返回数组的shape十分有规律，就是升维后的shape与reps的相乘。 其次，返回数组十分有规律。就像贴瓷砖一样，将原数组当做瓷砖，一块一块的进行贴合。（搭积木一般）  \u0026gt;\u0026gt;\u0026gt; a = np.array([0, 1, 2]) # a.ndim == len(reps) \u0026gt;\u0026gt;\u0026gt; np.tile(a, 2) array([0, 1, 2, 0, 1, 2]) # a.ndim \u0026lt; len(reps), a被升维为(1,3),返回结果为(2,6) \u0026gt;\u0026gt;\u0026gt; np.tile(a, (2, 2)) array([[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2]]) # a.ndim \u0026lt; len(reps), a被升维为(1,1,3)，返回结果为(2,1,6) \u0026gt;\u0026gt;\u0026gt; np.tile(a, (2, 1, 2)) array([[[0, 1, 2, 0, 1, 2]], [[0, 1, 2, 0, 1, 2]]]) \u0026gt;\u0026gt;\u0026gt; b = np.array([[1, 2], [3, 4]]) # b.ndim \u0026gt; len(reps),reps被作为(1,2)处理，返回结果为(2,4) \u0026gt;\u0026gt;\u0026gt; np.tile(b, 2) array([[1, 2, 1, 2], [3, 4, 3, 4]]) # b.ndim == len(reps), 返回结果为(4,2) \u0026gt;\u0026gt;\u0026gt; np.tile(b, (2, 1)) array([[1, 2], [3, 4], [1, 2], [3, 4]]) # c.ndim \u0026lt; len(reps)，c被升维为(1,4),返回结果为(4,4) \u0026gt;\u0026gt;\u0026gt; c = np.array([1,2,3,4]) \u0026gt;\u0026gt;\u0026gt; np.tile(c,(4,1)) array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) 类似的函数 repeat : Repeat elements of an array.\nbroadcast_to : Broadcast an array to a new shape\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.concatenate 语法 numpy.concatenate((a1,a2,...), axis=0, out=None, dtype=None, casting=\u0026quot;same_kind\u0026quot;)\n作用 将一个数组序列在指定的维度上进行连接join\nParameter  a1,a2,\u0026hellip; : sequence of array_like   The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default)\n 数组序列的shape在除了axis指定维度以外的所有维度上都应该相同。axis默认为第一个维度，即axis=0。\n axis : int, optional   The axis along which the arrays will be joined. If axis is None, arraysare flattened before use. Default is 0.\n axis指定了数组进行join操作的维度。默认为0，即第一维。如果axis=None，那么数组将会先展平，再进行join。\n out : ndarray, optional   If provided, the destination to place the result. The shape must be correct, matching that of what concatenate would have returned if no out argument were specified.\n 如果指定了out，则将join后的结果输出到out指定的数组中，但shape必须正确。如果没有指定out，则会返回一个匹配大小的数组。\n dtype : str or dtype,optional   If provided, the destination array will have this dtype. Cannot be provided together with out.\n 如果提供了dtype，则输出的数组的数据类型会与dtype中指定的一致。不可以同时与out一起指定。1.20.0中新增，以前的numpy无法使用。\n casting : { \u0026lsquo;no\u0026rsquo;, \u0026lsquo;equiv\u0026rsquo;, \u0026lsquo;safe\u0026rsquo;, \u0026lsquo;same_kind\u0026rsquo;, \u0026lsquo;unsafe\u0026rsquo; }, optional   Controls what kind of data casting may occur.Defaults to \u0026lsquo;same_kind\u0026rsquo;.\n ‘no’ means the data types should not be cast at all. ‘equiv’ means only byte-order changes are allowed. ‘safe’ means only casts which can preserve values are allowed. ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32, are allowed. ‘unsafe’ means any data conversions may be done.   控制数据类型的cast，共有五种类型。不表。1.20.0中新增，以前的numpy无法使用。\nExample \u0026gt;\u0026gt;\u0026gt; a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) \u0026gt;\u0026gt;\u0026gt; print(a.shape) \u0026gt;\u0026gt;\u0026gt; b = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]]]) \u0026gt;\u0026gt;\u0026gt; print(b.shape) \u0026gt;\u0026gt;\u0026gt; x = np.concatenate((a,b),axis = 0) \u0026gt;\u0026gt;\u0026gt; print(x.shape) 结果如图： 可见，在指定维度上，第0维进行了join。\n\u0026gt;\u0026gt;\u0026gt; x1 = np.concatenate((a,b),axis = 1) 结果如图： 可以看出，如果指定axis=1，则会报错，因为除了axis=1的其他维度上，shape并不相等。\n\u0026gt;\u0026gt;\u0026gt; x2 = np.concatenate((a,b),axis=None) \u0026gt;\u0026gt;\u0026gt; print(x2.shape) 可以看出，数组被展平了。\n注意事项  When one or more of the arrays to be concatenated is a MaskedArray, this function will return a MaskedArray object instead of an ndarray, but the input masks are not preserved. In cases where a MaskedArray is expected as input, use the ma.concatenate function from the masked array module instead.\n 当有一个或者多个MaskedArray作为输入进行concatenate时，不再会返回一个ndarray，而是会返回MaskedArray,但是其mask不会保留，所以在输入中有MaskedArray的情况下，应该尽量使用ma.concatenate，而不是np.concatenate()。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy求矩阵的特征值与特征向量(np.linalg.eig) 语法 np.linalg.eig(a)\n功能  Compute the eigenvalues and right eigenvectors of a square array.\n 求方阵(n x n)的特征值与右特征向量\nParameters  a : (\u0026hellip;, M, M) array   Matrices for which the eigenvalues and right eigenvectors will be computed\n a是一个矩阵Matrix的数组。每个矩阵M都会被计算其特征值与特征向量。\nReturns  w : (\u0026hellip;, M) array   The eigenvalues, each repeated according to its multiplicity. The eigenvalues are not necessarily ordered. The resulting array will be of complex type, unless the imaginary part is zero in which case it will be cast to a real type. When a is real the resulting eigenvalues will be real (0 imaginary part) or occur in conjugate pairs\n 返回的w是其特征值。特征值不会特意进行排序。返回的array一般都是复数形式，除非虚部为0，会被cast为实数。当a是实数类型时，返回的就是实数。\n v : (\u0026hellip;, M, M) array   The normalized (unit \u0026ldquo;length\u0026rdquo;) eigenvectors, such that the column v[:,i] is the eigenvector corresponding to the eigenvalue w[i].\n 返回的v是归一化后的特征向量（length为1）。特征向量v[:,i]对应特征值w[i]。\nRaises  LinAlgError   If the eigenvalue computation does not converge.\n Ralated Function:  See Also eigvals : eigenvalues of a non-symmetric array. eigh : eigenvalues and eigenvectors of a real symmetric or complex Hermitian (conjugate symmetric) array. eigvalsh : eigenvalues of a real symmetric or complex Hermitian (conjugate symmetric) array. scipy.linalg.eig : Similar function in SciPy that also solves the generalized eigenvalue problem. scipy.linalg.schur : Best choice for unitary and other non-Hermitian normal matrices.\n 相关的函数有：\n eigvals：计算非对称矩阵的特征值 eigh：实对称矩阵或者复共轭对称矩阵(Hermitian)的特征值与特征向量 eigvalsh: 实对称矩阵或者复共轭对称矩阵(Hermitian)的特征值与特征向量 scipy.linalg.eig scipy.linalg.schur  Notes  .. versionadded:: 1.8.0\nBroadcasting rules apply, see the numpy.linalg documentation for details.\nThis is implemented using the _geev LAPACK routines which compute the eigenvalues and eigenvectors of general square arrays.\nThe number w is an eigenvalue of a if there exists a vector v such that a @ v = w * v. Thus, the arrays a, w, and v satisfy the equations a @ v[:,i] = w[i] * v[:,i] for $i \\in \\{0,...,M-1\\}$.\nThe array v of eigenvectors may not be of maximum rank, that is, some of the columns may be linearly dependent, although round-off error may obscure that fact. If the eigenvalues are all different, then theoretically the eigenvectors are linearly independent and a can be diagonalized by a similarity transformation using v, i.e, inv(v) @ a @ v is diagonal.\nFor non-Hermitian normal matrices the SciPy function scipy.linalg.schur is preferred because the matrix v is guaranteed to be unitary, which is not the case when using eig. The Schur factorization produces an upper triangular matrix rather than a diagonal matrix, but for normal matrices only the diagonal of the upper triangular matrix is needed, the rest is roundoff error.\nFinally, it is emphasized that v consists of the right (as in right-hand side) eigenvectors of a. A vector y satisfying y.T @ a = z * y.T for some number z is called a left eigenvector of a, and, in general, the left and right eigenvectors of a matrix are not necessarily the (perhaps conjugate) transposes of each other.\nReferences G. Strang, Linear Algebra and Its Applications, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, Various pp.\n 需要说明的是，特征向量之间可能存在线性相关关系，即返回的v可能不是满秩的。但如果特征值都不同的话，理论上来说，所有特征向量都是线性无关的。此时可以利用inv(v)@ a @ v来计算特征值的对角矩阵（对角线上的元素是特征值，其余元素为0),同时可以用v @ diag(w) @ inv(v)来恢复a。\n同时需要说明的是，这里得到的特征向量都是右特征向量。即$Ax = {\\lambda}x$.所以，数组a,w,v满足:a @ v[:,i] = w[i] * v[:,i] for $i \\in \\{0,...,M-1\\}$.\nExamples \u0026gt;\u0026gt;\u0026gt; from numpy import linalg as LA (Almost) trivial example with real e-values and e-vectors. \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(np.diag((1, 2, 3))) \u0026gt;\u0026gt;\u0026gt; w; v array([1., 2., 3.]) array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) Real matrix possessing complex e-values and e-vectors; note that the e-values are complex conjugates of each other. \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(np.array([[1, -1], [1, 1]])) \u0026gt;\u0026gt;\u0026gt; w; v array([1.+1.j, 1.-1.j]) array([[0.70710678+0.j , 0.70710678-0.j ], [0. -0.70710678j, 0. +0.70710678j]]) Complex-valued matrix with real e-values (but complex-valued e-vectors); note that ``a.conj().T == a``, i.e., `a` is Hermitian. \u0026gt;\u0026gt;\u0026gt; a = np.array([[1, 1j], [-1j, 1]]) \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(a) \u0026gt;\u0026gt;\u0026gt; w; v array([2.+0.j, 0.+0.j]) array([[ 0. +0.70710678j, 0.70710678+0.j ], # may vary [ 0.70710678+0.j , -0. +0.70710678j]]) Be careful about round-off error! \u0026gt;\u0026gt;\u0026gt; a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]]) \u0026gt;\u0026gt;\u0026gt; # Theor. e-values are 1 +/- 1e-9 \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(a) \u0026gt;\u0026gt;\u0026gt; w; v array([1., 1.]) array([[1., 0.], [0., 1.]]) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy中求矩阵的逆与伪逆 numpy中求矩阵的逆：numpy.linalg.inv()\nnumpy中求矩阵的伪逆: numpy.linalg.pinv()\nnumpy中求矩阵的逆（numpy.linalg.inv) 使用命令numpy.linalg.inv(Matrix)\n功能  Compute the (multiplicative) inverse of a matrix.\nGiven a square matrix a, return the matrix ainv satisfying dot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n 计算一个方阵的逆，使之满足$AA^{-1}=A^{-1}A=I$\nParameters  a : (\u0026hellip;, M, M) array_like\nMatrix to be inverted.  a是输入的要计算逆的矩阵数组。\nReturns  ainv : (\u0026hellip;, M, M)\nndarray or matrix (Multiplicative) inverse of the matrix a.  返回的是对应的逆矩阵的数组。\nRaises  LinAlgError\nIf a is not square or inversion fails.  如果a不是方阵或者不可逆，则Raise LinAlgError\nExamples \u0026gt;\u0026gt;\u0026gt; from numpy.linalg import inv \u0026gt;\u0026gt;\u0026gt; a = np.array([[1., 2.], [3., 4.]]) \u0026gt;\u0026gt;\u0026gt; ainv = inv(a) \u0026gt;\u0026gt;\u0026gt; np.allclose(np.dot(a, ainv), np.eye(2)) True \u0026gt;\u0026gt;\u0026gt; np.allclose(np.dot(ainv, a), np.eye(2)) True If a is a matrix object, then the return value is a matrix as well: \u0026gt;\u0026gt;\u0026gt; ainv = inv(np.matrix(a)) \u0026gt;\u0026gt;\u0026gt; ainv matrix([[-2. , 1. ], [ 1.5, -0.5]]) Inverses of several matrices can be computed at once: \u0026gt;\u0026gt;\u0026gt; a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]]) \u0026gt;\u0026gt;\u0026gt; inv(a) array([[[-2. , 1. ], [ 1.5 , -0.5 ]], [[-1.25, 0.75], [ 0.75, -0.25]]]) numpy中求矩阵的伪逆(numpy.linalg.inv) 伪逆的定义以及意义 伪逆在某些情况下特指摩尔彭若斯广义逆。 广义逆矩阵： $A$的摩尔彭若斯矩阵记为$A^+$.那么有两个基本性质：\nAA^+A=A A^+AA^+=A^+ 功能  Compute the (Moore-Penrose) pseudo-inverse of a matrix. Calculate the generalized inverse of a matrix using its singular-value decomposition (SVD) and including all large singular values.\n.. versionchanged:: 1.14\nCan now operate on stacks of matrices\n Parameters  a : (\u0026hellip;, M, N) array_like   Matrix or stack of matrices to be pseudo-inverted.\n 要做伪逆运算的矩阵或者矩阵的栈\n rcond : (\u0026hellip;) array_like of float   Cutoff for small singular values. Singular values less than or equal to rcond * largest_singular_value are set to zero. Broadcasts against the stack of matrices.\n 对很小的奇异值做裁剪。当某个奇异值小于等于最大的奇异值乘以rcond，就将它设置为0.\n hermitian : bool, optional   If True, a is assumed to be Hermitian (symmetric if real-valued), enabling a more efficient method for finding singular values. Defaults to False.\n 如果为真，相当于告诉Numpy输入矩阵是Hermitian矩阵。会采用更加有效的方法去寻找奇异值。默认为False.\nReturns  B : (\u0026hellip;, N, M) ndarray   The pseudo-inverse of a. If a is a matrix instance, then so is B.\n 返回a的伪逆\nRaises  LinAlgError   If the SVD computation does not converge.\n 如果矩阵不能进行奇异值分解(SVD)，则报错。\nSee Also -------- scipy.linalg.pinv : Similar function in SciPy. scipy.linalg.pinv2 : Similar function in SciPy (SVD-based). scipy.linalg.pinvh : Compute the (Moore-Penrose) pseudo-inverse of a Hermitian matrix.  Notes  The pseudo-inverse of a matrix A, denoted$A^+$, is defined as: \u0026ldquo;the matrix that \u0026lsquo;solves\u0026rsquo; [the least-squares problem] $Ax = b$,\u0026rdquo; i.e., if ${\\bar x}$ is said solution, then $A^+$ is that matrix such that${\\bar x} = A^+b$.\n  It can be shown that if : $Q_1 \\Sigma Q_2^T = A$ is the singular value decomposition of A, then :$A^+ = Q_2\\Sigma^+ Q_1^T$, where :$Q_{1,2}$ are orthogonal matrices, :$\\Sigma$ is a diagonal matrix consisting of A\u0026rsquo;s so-called singular values, (followed, typically, by zeros), and then :$\\Sigma^+$ is simply the diagonal matrix consisting of the reciprocals of A\u0026rsquo;s singular values (again, followed by zeros). [1]_\n  References:\n.. [1] G. Strang, Linear Algebra and Its Applications, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, pp. 139-142.\n 对于矩阵A，有方程$Ax=b$,那么它的摩尔彭若斯伪逆$A^+$满足：对于$\\bar x = A^+b$,$\\bar x$能使得Ax与b的二范数距离最小。\n矩阵A的摩尔彭若斯伪逆可以通过奇异值分解来求得。A的奇异值分解为：$Q_1 \\Sigma Q_2^T = A$。那么其伪逆$A^+ = Q_2\\Sigma^+ Q_1^T$。其中$\\Sigma^+$就是$\\Sigma$的对角元素的倒数构成的对角矩阵。其实因为$\\Sigma$本身就是对角矩阵，$\\Sigma^+$就是$\\Sigma^{-1}$.\nExamples The following example checks that a * a+ * a == a and a+ * a * a+ == a+:\n\u0026gt;\u0026gt;\u0026gt; a = np.random.randn(9, 6) \u0026gt;\u0026gt;\u0026gt; B = np.linalg.pinv(a) \u0026gt;\u0026gt;\u0026gt; np.allclose(a, np.dot(a, np.dot(B, a))) True \u0026gt;\u0026gt;\u0026gt; np.allclose(B, np.dot(B, np.dot(a, B))) True ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"#! https://zhuanlan.zhihu.com/p/435196716\nPRML 第一章习题解 1.1 多项式最小二乘法的封闭解 已知： $E=\\frac{1}{2} \\sum_{n=1}^{N}\\left{\\left(\\sum_{j=0}^{M} \\omega_{j} x_{n}^{j}\\right)-t_{n}\\right}^{2}$ ，由于Sigma函数的特殊性，我们考虑对每一项进行求解：\n对于$E_{n}=\\frac{1}{2}\\left(\\sum_{j=0}^{N} \\omega_{j} x_{n}^{j}-t_{n}\\right)^{2}$，令$q_{n}=\\sum_{j=0}^{n} \\omega_{j} x_{n}^{j}-t_{n}$,则有：$E_{n}=\\frac{1}{2} q_{n}^{2}$\n则： $$ \\begin{aligned} \\frac{\\partial E_{n}}{\\partial \\omega_{i}}=\\frac{\\partial E_{n}}{\\partial q_{n}} \\cdot \\frac{\\partial q_{n}}{\\partial \\omega_{i}} \u0026amp;=q_{n} \\cdot x_{n}^{i} \\\n\u0026amp;=\\left(\\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{j}-t_{n}\\right) \\cdot x_{n}^{i} \\\n\u0026amp;=\\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{i+j}-t_{n} \\cdot x_{n}^{i} \\end{aligned} $$\n那么对于$ E=\\sum_{n=1}^{N} E_{n} $，有：\n$$ \\begin{aligned} \\frac{\\partial E}{\\partial \\omega_{i}} \u0026amp;=\\sum_{n=1}^{N} \\frac{\\partial E_{n}}{\\partial \\omega_{i}} \\\n\u0026amp;=\\sum_{n=1}^{N}\\left(\\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{i+j}-t_{n} \\cdot x_{n}^{i}\\right) \\\n\u0026amp;=\\sum_{n=1}^{N} \\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{i+j}-\\sum_{n=1}^{N} t_{n} x_{n}^{i} \\end{aligned} $$\n令$\\frac{\\partial E}{\\partial \\omega_{i}}=0$, 则有：\n$$\\sum_{n=1}^{N} \\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{i+j}=\\sum_{n=1}^{N} t_{n} \\cdot x_{n}^{i}$$\n证毕。\n1.2 带L2正则的最小二乘法封闭解 $\\widetilde{E}(\\vec{\\omega})=\\frac{1}{2} \\sum_{n=1}^{N}\\left{y\\left(x_{n}, \\vec{\\omega}\\right)-t_{n}\\right}^{2}+\\frac{\\lambda}{2}|\\vec \\omega|^{2}$\n$$ \\begin{aligned} \\frac{\\partial \\widetilde{E}}{\\partial \\omega_{i}} \u0026amp;=\\sum_{n=1}^{N} \\sum_{j=0}^{M} \\omega_{j} \\cdot x_{n}^{i+j}-\\sum_{n=1}^{N} t_{n} x_{n}^{i} + \\frac{1}{2} \\lambda \\frac{\\partial(\\omega_1^2+\\omega_2^2+ \u0026hellip; + \\omega_j^2)}{\\partial \\omega_i} \\\n\u0026amp;=\\sum_{n=1}^{N} \\sum_{j=0}^{M} \\omega_{j} x_{n}^{i+j}-\\sum_{n=1}^{N} {t_n} x_{n}^{i}+\\lambda \\omega_{i} . \\end{aligned} $$\n令$ \\frac{\\partial \\widetilde{E}}{\\partial \\omega_{i}}=0 $，可得： $$ \\sum_{j=0}^{M} \\omega_{j} \\sum_{n=1}^{N} x_{n}^{i+j}+\\lambda \\omega_{i}=\\sum_{n=1}^{N} t_{n} x_{n}^{i} $$ 即： $$ \\sum_{j=0}^{M} \\omega_{j}\\left(\\sum_{n=1}^{N} x_{n}^{t+j}+\\lambda \\delta_{i j}\\right)=\\sum_{n=1}^{N} {t_n} x_{n}^{i} $$ 其中， $$ \\delta_{ij}= \\begin{cases}0 \u0026amp; i \\neq j \\ 1 \u0026amp; i=j\\end{cases} $$\n1.3 贝叶斯公式的简单应用 1.4 概率密度的变换：线性变换 ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"标量、向量、矩阵求导 向量对向量求导 对向量进行求导时，除了遵循雅克比矩阵外，常常容易会被矩阵的排列所混淆。\n在做PRML1.9时，遇到了行向量对列向量求导的问题，着实让我迷惑了许久。\n查阅资料后，得出如下结论，记录在此：\n  排列方式均可，但需保持一致。无需太过纠结。\n  可以直接按照如下公式进行求导，因为如果你选择其他排列方式，结果就是差一个转置而已。\n  $$ \\frac{\\partial A \\vec{x}}{\\partial \\vec{x}}=A^{T} $$ $$ \\frac{\\partial A \\vec{x}}{\\partial \\vec{x}^{T}}=A $$ $$ \\frac{\\partial\\left(\\vec{x}^{T} A\\right)}{\\partial \\vec{x}}=A $$\n可以看出来，多转置则结果也会多一个转置。\n不同文献给出了不同的结果——超越矩阵，存在争议。\n标量对向量求偏导 记$ y=\\vec{x}^{T} \\cdot A \\cdot \\vec{x} $， 则有：\n$$ \\frac{\\partial y}{\\partial \\vec{x}}=\\frac{\\partial\\left(\\vec{x}^{T} \\cdot A \\cdot \\vec{x}\\right)}{\\partial \\vec{x}}=\\left(A^{T}+A\\right) \\cdot \\vec{x} $$\n若$A$为对称阵，则： $$ \\frac{\\partial\\left(\\vec{x}^{T} A \\vec{x}\\right)}{\\partial \\vec{x}}=2 A \\vec{x} $$\n标量$det(A)$对方阵$A$求导： $$ \\frac{\\partial|A|}{\\partial A}=\\left(A^{*}\\right)^{T}=|A| \\cdot\\left(A^{-1}\\right)^{T} $$\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python如何使得list中的元素是ndarray 在一个代码实现时，会想要类似MATLAB一样，拥有一个struct类型的数组，数组中的每个cell都是一个ndarray。因为在某些维度上shape不同，所以不能整合为一个大的ndarray。\n要实现上述需求，可以进行如下操作:\ntargetList = [] targetList.append(ndarray) 这样即可获得由ndarray构成的list，可以进一步对list进行concatenate等操作再次整合。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Python中李群SO(3)与李代数so(3)之间指数映射与实现源码 调用scipy.linalg.expm() 对于李群SE(3)、SO(3)，和与其对应的李代数se(3),so(3)。指数映射是十分重要的。\n在Python中我们可以调用：scipy.linalg.expm()来将李代数$\\xi $对应的反对称矩阵${\\hat \\xi }$映射到其对应的旋转矩阵$R$。\n源码示例 import scipy.linalg.expm as expm def SkewFun(a): \u0026quot;\u0026quot;\u0026quot; got the corresponded antiSymmetric Matrix of the Lie algebra :param a: Lie algebra :return: antiSymmetric Matrix \u0026quot;\u0026quot;\u0026quot; if len(a) == 3: A = np.array([[0, -a[2], a[1]], [a[2], 0, -a[0]], [-a[1], a[0], 0] ]) return A if len(a) == 2: A = np.array([a[1], -a[0]]) return A exit(-1) def so3ToSO3(xi): return expm(SkewFun(xi) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Python判断不可变对象（字符串，整数，浮点数，数组）相等的办法以及其底层实现原理 Python中，判断不可变对象是否相等与Java十分不同。\n结论 Python中判断两个字符串相等：既可以使用\u0026quot;==\u0026quot;，又可以使用\u0026quot;is\u0026quot;。\n判断整数，浮点数以及Tuple时，最好使用\u0026quot;==\u0026quot;\na = 'abc' b = 'abc' print(a is b) print(a == b) 这个问题可以进一步引申至Python的底层实现原理上。\n原理 整数 Python在底层实现中，一切都是对象。包括整数等也是对象。这些基本的不可变对象在python里会被频繁的引用,创建,如果不能重用的话，极易导致效率瓶颈,所以python引入了整数对象池的机制。\nPython中，对于[-5,256]的整数，创建了整数对象池，创建范围内的小整数会自动引用对象池中的整数对象。\na = -5 b = -5 print(a is b) print(a == b) a1 = -6 b1 = -6 print(a1 is b1) print(a1 == b1) 从运行结果图上可以看出，-5由于是小整数，引用整数池中的对象，所以是同一个对象,a is b为True。而-6由于不在范围内，每次都会新建一个对象，所以是两个对象，a is b为False。\n同理可以测试256,257。前者为True，后者为False。\n浮点数 由于浮点数有无穷多个，所以浮点数并没有常量池。在创建浮点数对象时会直接新建一个对象。\na = 0.0 b = 0.0 print(a is b) print(a == b) 从结果中可见，两者值相等，但并不是指向同一内存地址。\n字符串 Python中存在着intern机制。由于字符串是不可变对象，它对字符串维护着一个字典，每次新建一个字符串变量时，会先查询字典中是否已经有该字符串值。如果有，直接引用。如果没有再新建。这个机制决定了字符串值相等，则一定指向相同的对象。\nTuple 对于元组，虽然其是不可变对象，但在底层实现无intern机制，就是单纯的一个可以迭代的数组，存放着元素。每次创建都会开辟地址。所以新建两个值相同的变量会创建两个对象。使用\u0026quot;==\u0026quot;判断。\na = (1,2,3) b = (1,2,3) print(a == b) print(a is b) 结果也印证了这一点。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python中判断列表为空 判断列表为空是一个非常基础的问题。但是也有很多写法。\n方法1：len() list = [] if len(list) == 0: print('list is empty') 方法2：直接使用if判断 list = [] if not list: print('list is empty') 直接使用list作为判断标准，则空列表相当于False\n方法3：使用==进行判断 EmptyList = [] list = [] if list==EmptyList: print('list is empty') 注意: Python中与Java不同。Java中==用于判断两个变量是否指向同一个对象，即地址是否相同。但是Python中不是，Python中，==用于判断两个变量的值相等。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python中怎么表示自然底数e和浮点数精度epsilon 自然底数e可以直接使用math.e表示。\n浮点数精度epsilon可以使用np.spacing(1)来表征epsilon，等效于MATLAB中的eps.\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"PyTorch中默认维度 PyTorch中默认维度: B C H W。\n即Batch_size，Channel, Height, Width\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Mechanics of Seq2Seq Models With Attention  Reference: Visualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention)\n 前言 Sequence-to-sequence模型在深度学习领域取得了很多成就。\n这文章真的牛逼。\n有视频不翻译了。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"AdaptiveMaxPool AdaptiveMaxPool是PyTorch中提供的自适应池化层。\n其主要特殊的地方在于： 无论输入Input的size是多少，输出的size总为指定的size。\nAdaptiveMaxPool1d() m = nn.AdaptiveMaxPool1d(3) input = torch.randn(4,3,7) output = m(input) # output的size为(4,3,3) AdaptiveMaxPool2d() m = nn.AdaptiveMaxPool2d((3,6)) input = torch.randn(2,64,8,9) output = m(input) # output的size为(2,64,3,6) AdaptiveMaxPool3d() 同理\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"torch.topk 语法  torch.topk(input, k, dim=None, largest=True, sorted=True, *, out = None)\n 作用 返回输入tensorinput中，在给定的维度dim上k个最大的元素。\n如果dim没有给定，那么选择输入input的最后一维。\n如果largest = False，那么返回k个最小的元素。\n返回一个namedtuple类型的元组(values, indices)，其中indices是指元素在原数组中的索引。\nsorted = True， 则返回的k个元素是有序的。\nParameters   input (Tensor) \u0026ndash; the input tensor\n输入的张量\n  k (int) \u0026ndash; the k in \u0026ldquo;top-k\u0026rdquo;\n返回的k的值\n  dim(int, optional) \u0026ndash; the dimension to sort along\n指定的排序的维度, dim若为-1，文档未说明，但是根据实操效果，应该是对最后一维进行search。\n如shape为Batch_size x p x q，返回结果为Batch_size x p x k。\n  largest(bool, optional) \u0026ndash; controls whether to return largest or smallest elements\nTrue返回最大值，False返回最小值。\n  sorted(bool, optional) \u0026ndash; controls whether to return the elements in sorted order\n控制返回的元素是否排序。\n  例子 \u0026gt;\u0026gt;\u0026gt; x = torch.arange(1., 6.) \u0026gt;\u0026gt;\u0026gt; x tensor([ 1., 2., 3., 4., 5.]) \u0026gt;\u0026gt;\u0026gt; torch.topk(x, 3) torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2])) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"如何设置随机种子 设置随机种子 应该为torch, numpy,以及Python设置随机种子，并提高torch卷积精度。\ndef set_seed(seed): random.seed(seed) np.random.seed(seed) os.environ[\u0026#39;PYTHONHASHSEED\u0026#39;] = str(seed) torch.manual_seed(seed) torch.cuda.manual_seed(seed) torch.cuda.manual_seed_all(seed) torch.backends.cudnn.deterministic = True torch.backends.cudnn.benchmark = False 设置随机种子之后，仍然发现训练结果不同？考虑是数据采样的问题 背景： 数据集需要对数据进行随机采样。从全体数据中sample得到部分。\n踩坑： 在DataLoader中，num_worker会影响在已经设置好的随机种子下，对数据的采样结果，导致每次拿到的数据均不同。\n解决方法： 删除num_worker.\n原始： 相同seed下，每次提取的数据都不一致。\ntrainLoader = DataLoader(dataset, batch_size=10, shuffle=True, num_worker=1) 修改：相同seed下，每次随机得到的数据一致。\ntrainLoader = DataLoader(dataset, batch_size=10, shuffle=True) 实验对比发现，即使num_worker=1，仍然会导致无法复现。原因分析，num_worker是用于数据提取的多线程数，多线程情况下线程同步问题会导致随机种子在多次实验中波动。删除num_worker即可。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"#! https://zhuanlan.zhihu.com/p/430893923\nA Baseline for detecting misclassified and out-of-distribution examples in nerual networks 论文阅读笔记 本文发表在ICLR2017，作者Dan Hendrycks. 是不确定性最朴素的baseline做法。\nMotivation 为了检测样本是否被误分类以及样本是否属于OOD样本，作者提出了一个简单的baseline做法，即使用softmax输出的最大预测概率作为依据来辨别。实验发现，正确分类的样本输出会拥有比错误分类样本或者OOD样本更大的softmax输出。\ntwo question:\n error and success precdiction in- and out-of-distribution detection  Metrics 作者使用AUROC 和 AUPR作为指标。\nAUROC以真阳性率与假阳性率为横纵坐标画图。反应模型的查全率。perfect model 其AUROC应该为100%，一个完全随机模型其AUROC为50%。 当正负例的base rate有很大不同时，AUROC不那么完美。\n而AUPR以精度和召回率为横纵坐标画图，反应模型的查准率。 一个perfect model其AUPR应该为100%。\nMethod 对于任意一个样本，计算其softmax的最大输出概率。以此为依据计算AUROC，AUPR，可以发现，正常样本下的AUROC、AUPR显著高于异常样本下的AUROC、AUPR。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"#! https://zhuanlan.zhihu.com/p/427073494\nEvidential Deep Learning to Quantify Classification Uncertainty 论文阅读笔记 Motivation 在当下的机器学习以及深度学习领域，重要的不是Accuracy，而是更重要的鲁棒性、安全性等方面。\n问题：当我们在MNIST上训练一个手写体识别网络的时候，网络可以达到很好的分类识别性能，但是当我们给网络输入一个猫的图片的时候，尽管这个样本网络并不熟悉，网络还是会输出一个标签，而不是简单的告诉我们，他不认识或者说他不知道。这类样本称为OOD(out-of-distribution )的样本，由此，我们引入Uncertainty的概念。\nSubjective Logic 主观逻辑  在此我仅就个人理解对主观逻辑在多元分类问题下进行形式化描述，对此有兴趣的读者可以进一步阅读书籍《Subjective Logic》\n 不同于普通的概率学，我们引入主观逻辑Subjective Logic对模型的不确定性进行度量。\n对于多元分类问题，其有$K$个标签，对于样本$i$，我们预测输出概率$\\mathbf{p}=[p_1, p_2, \u0026hellip;,p_k]$，则我们对每个标签所属的概率$p_k$赋予一个belief mass，记为$b_k$，则： $$ u+\\sum_{k=1}^{K} b_{k}=1 $$\n其中$u$为uncertainty, 且对于$k = 1, \u0026hellip; ,K$，$u \\geq 0$, $b_k \\geq 0$。\n如何获得$b_k$此刻便成为了主要问题。为此，我们引入证据evidence，记为$e_k$. 则： $$ b_{k}=\\frac{e_{k}}{S} \\quad \\text { and } \\quad u=\\frac{K}{S} $$\n其中$S=\\sum_{i=1}^{K}\\left(e_{i}+1\\right)$. 需要注意的是，事实上，$S=\\sum_{i=1}^{K}\\left(e_{i}+a_i\\right)$. $a_i$为先验。在此，其实对先验进行了简化处理。在此处，直接取1，其实代表了没有预知信息，所以取均匀分布。\n对一个样本的belief assignment可以与一个Dirichlet 分布对应起来。$\\alpha_{k}=e_{k}+1$. 狄利克雷分布度量了各个概率$p_k$的概率分布，即二阶概率。狄利克雷分布由$\\boldsymbol{\\alpha}=\\left[\\alpha_{1}, \\cdots, \\alpha_{K}\\right]$进行参数化。 $$ D(\\mathbf{p} \\mid \\boldsymbol{\\alpha})= \\begin{cases}\\frac{1}{B(\\boldsymbol{\\alpha})} \\prod_{i=1}^{K} p_{i}^{\\alpha_{i}-1} \u0026amp; \\text { for } \\mathbf{p} \\in \\mathcal{S}_{K} \\ 0 \u0026amp; \\text { otherwise }\\end{cases} $$\nMethod 文章设计提出了一种神经网络，用于分类，同时提供其不确定性uncertainty。\n对于任意一个样本$i$，网络输出各个类的概率$\\mathbf{p}_i$，显然$\\mathbf{p}i$为单纯形。则对于该概率$\\mathbf{p}i$，我们有狄利克雷分布$D\\left(\\mathbf{p}{i} \\mid \\boldsymbol{\\alpha}{i}\\right)$，用于度量概率$\\mathbf{p}_i$的概率密度分布。\n文章提出的做法是十分简单的，直接将网络输出层前的softmax层换为一个激活层，以保证输出值非负。以输出值作为网络预测的evidence。并以此evidence预测概率$\\mathbf{p_i}$的狄利克雷分布的参数$\\mathbf{\\alpha}i$。有： $$ \\boldsymbol{\\alpha}{i}=f\\left(\\mathbf{x}{i} \\mid \\Theta\\right)+1 $$ 随后，以此计算概率：$\\boldsymbol{\\alpha}{i} / S_{i}$。\nLoss函数的设计 作者一共设计了三种Loss函数。\nNLL 负对数似然函数 $$ \\mathcal{L}{i}(\\Theta)=-\\log \\left(\\int \\prod{j=1}^{K} p_{i j}^{y_{i j}} \\frac{1}{B\\left(\\boldsymbol{\\alpha}_{i}\\right)} \\prod_{j=1}^{K} p_{i j}^{\\alpha_{i j}-1} d \\mathbf{p}_{i}\\right)=\\sum_{j=1}^{K} y_{i j}\\left(\\log \\left(S_{i}\\right)-\\log \\left(\\alpha_{i j}\\right)\\right) $$\n观察该Loss损失函数，$-\\log \\left(\\int \\prod_{j=1}^{K} p_{i j}^{y_{i j}} \\frac{1}{B\\left(\\boldsymbol{\\alpha}_{i}\\right)} \\prod_{j=1}^{K} p_{i j}^{\\alpha_{i j}-1} d \\mathbf{p}_{i}\\right)$中积分项，前半部分为似然，后半部分为狄利克雷分布，作为先验。随后对$\\mathbf{p}_i$进行积分，便得到联合概率分布的边际似然函数。\n$\\sum_{j=1}^{K} y_{i j}\\left(\\log \\left(S_{i}\\right)-\\log \\left(\\alpha_{i j}\\right)\\right)$中，$\\hat{p}_{k}=\\frac{\\alpha_{k}}{S}$，相当于Cross-Entropy交叉熵。\nBayes Risk Risk Function Risk function is expected loss.即：风险函数就是loss的期望。\ndigamma function $$ \\psi(x)=\\frac{d}{d x} \\ln (\\Gamma(x))=\\frac{\\Gamma^{\\prime}(x)}{\\Gamma(x)} \\sim \\ln x-\\frac{1}{2 x} $$ digamma函数就是对gamma函数取导数求导所得的函数。\n基于交叉熵损失，我们有： $$ \\mathcal{L}{i}(\\Theta)=\\int\\left[\\sum{j=1}^{K}-y_{i j} \\log \\left(p_{i j}\\right)\\right] \\frac{1}{B\\left(\\boldsymbol{\\alpha}_{i}\\right)} \\prod_{j=1}^{K} p_{i j}^{\\alpha_{i j}-1} d \\mathbf{p}_{i}=\\sum_{j=1}^{K} y_{i j}\\left(\\psi\\left(S_{i}\\right)-\\psi\\left(\\alpha_{i j}\\right)\\right) $$\n上式很容易理解，对概率的积分即为期望。\n基于平方差损失，同样有： $$ \\begin{aligned} \\mathcal{L}{i}(\\Theta) \u0026amp;=\\int\\left|\\mathbf{y}{i}-\\mathbf{p}{i}\\right|{2}^{2} \\frac{1}{B\\left(\\boldsymbol{\\alpha}{i}\\right)} \\prod{i=1}^{K} p_{i j}^{\\alpha_{i j}-1} d \\mathbf{p}_{i} \\\n\u0026amp;=\\sum_{j=1}^{K} \\mathbb{E}\\left[y_{i j}^{2}-2 y_{i j} p_{i j}+p_{i j}^{2}\\right]=\\sum_{j=1}^{K}\\left(y_{i j}^{2}-2 y_{i j} \\mathbb{E}\\left[p_{i j}\\right]+\\mathbb{E}\\left[p_{i j}^{2}\\right]\\right) . \\end{aligned} $$\n最后一点点还未搞清楚的地方：在原文中，提出三个Loss的时候，有这么一句话：\n Note that while the above loss in Equation 3 corresponds to the Bayes classifier in the PAC-learning nomenclature, ones we will present below are Gibbs classifiers.\n 个人理解是第一个Loss是将网络视作贝叶斯分类器，而第二个Loss、第三个Loss是将网络视为吉布斯分类器的。\nKL散度 随后，作者应该是从实验中观察到一个现象。例如手写体识别中，网络会对每个instance生成各个类的evidence，那么自然而然在训练中，当网络观察到一个圆圈出现，它便会在0这一类生成很大的evidence。这在遇到0时没有什么问题，但在遇到6的时候，0同样会生成较大的evidence值，6也会生成较大的evidence值。虽然这些evidence可能对分类判断的最终结果没有影响，（因为我们取最大值的Evidence所属的类作为分类结果），但是对网络的uncertainty有妨害。\n我们的动机是，对它所属的那一类，evidence很大很大，对不属于的类，evidence便趋近于0. 于是作者设计了一项Loss函数，每个instance所对应的Dirichlet分布的参数$\\mathbf{\\alpha}$，除去有贡献的evidence后$\\tilde{\\boldsymbol{\\alpha}}{i}=\\mathbf{y}{i}+\\left(1-\\mathbf{y}{i}\\right) \\odot \\boldsymbol{\\alpha}{i}$所对应的Dirichlet分布与均匀Dirichlet分布（其evidence为0, $\\mathbf{\\alpha} = [1, \u0026hellip;, 1]$)的KL散度，迫使导致分类错误的evidence接近于0.\n将两项结合起来，便可以使得对第一项有贡献的evidence变大，其余没有贡献的evidence因受到第二项的惩罚而趋近于0. 同时，引入一项退火参数$\\lambda_t$，调节两项Loss之间的比重，从而使得一开始训练时，网络不会被过度惩罚而变为均匀分布。不得不说，这个Loss项设计的十分巧妙。\n$$ \\mathcal{L}(\\Theta)=\\sum_{i=1}^{N} \\mathcal{L}_{i}(\\Theta)+\\lambda_{t} \\sum_{i=1}^{N} K L\\left[D\\left(\\mathbf{p}_{\\mathbf{i}} \\mid \\tilde{\\alpha}_{i}\\right) | D\\left(\\mathbf{p}_{i} \\mid\\langle 1, \\ldots, 1\\rangle\\right)\\right] $$\n第二项Loss可以进一步被处理为： $$ \\begin{aligned} \u0026amp;K L\\left[D\\left(\\mathbf{p}{i} \\mid \\tilde{\\boldsymbol{\\alpha}}{i}\\right) | D\\left(\\mathbf{p}{i} \\mid \\mathbf{1}\\right)\\right] \\\n\u0026amp;\\quad=\\log \\left(\\frac{\\Gamma\\left(\\sum{k=1}^{K} \\tilde{\\alpha}{i k}\\right)}{\\Gamma(K) \\prod{k=1}^{K} \\Gamma\\left(\\tilde{\\alpha}{i k}\\right)}\\right)+\\sum{k=1}^{K}\\left(\\tilde{\\alpha}{i k}-1\\right)\\left[\\psi\\left(\\tilde{\\alpha}{i k}\\right)-\\psi\\left(\\sum_{j=1}^{K} \\tilde{\\alpha}_{i j}\\right)\\right] \\end{aligned} $$\n实验部分 实验部分分为两部分进行。一部分是OOD样本的uncertainty。一部分是对抗样本。\n欢迎指正交流。\n存在的问题  网络直接将最后一层Softmax改为激活函数，网络结构上是否能针对uncertainty设计单独模块？ 在Subjective Logic中，分布的先验可以不为均匀分布，对特定任务下是否有影响？  ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Gaussian Processes 高斯过程  Lecture Link: https://www.youtube.com/watch?v=MfHKW5z-OOA\u0026amp;list=PLE6Wd9FR--EdyJ5lbFl8UuGjecvVw66F6\u0026amp;index=9\n Guassian 基础知识 首先引入简单的高斯分布。\n如下图，左右都有很多二元数据$x=\\left[\\begin{array}{l}x_{1} \\ x_{2}\\end{array}\\right] \\in \\mathbb{R}^{2}$。我们想要用一个分布去拟合两个变量的分布。所以我们使用一个二元高斯分布。不论左右，其均值都为$\\mu=\\left[\\begin{array}{l}\\mu_{1} \\ \\mu_{2}\\end{array}\\right] =\\left[\\begin{array}{l}0 \\ 0\\end{array}\\right]$，但是协方差矩阵却不一样。对于左边的分布，如果我们知道$x$增大，我们并不能获得关于$y$的任何多余信息，也就是说两个变量没有关联，所以对应的协方差为$0$. 对于右边的分布，随着$x$的增大，$y$也在增大，所以右图看起来像一个椭圆。所以两者的协方差为不妨设为$0.5$.\n协方差covariance某种程度上等价于互相关系数correlation。协方差矩阵中对应位置数值大小反应了两个变量之间的相关关系，协方差为$0$代表没有关联，协方差为正代表正相关。\n这里我们列出一些涉及的公式：\n协方差： $$ \\begin{aligned} \\operatorname{cov}(X, Y) \u0026amp;=\\mathrm{E}[(X-\\mathrm{E}[X])(Y-\\mathrm{E}[Y])] \\\n\u0026amp;=\\mathrm{E}[X Y-X \\mathrm{E}[Y]-\\mathrm{E}[X] Y+\\mathrm{E}[X] \\mathrm{E}[Y]] \\\n\u0026amp;=\\mathrm{E}[X Y]-\\mathrm{E}[X] \\mathrm{E}[Y]-\\mathrm{E}[X] \\mathrm{E}[Y]+\\mathrm{E}[X] \\mathrm{E}[Y] \\\n\u0026amp;=\\mathrm{E}[X Y]-\\mathrm{E}[X] \\mathrm{E}[Y] \\end{aligned} $$\n相关系数： $$ \\rho_{X, Y}=\\operatorname{corr}(X, Y)=\\frac{\\operatorname{cov}(X, Y)}{\\sigma_{X} \\sigma_{Y}}=\\frac{\\mathrm{E}\\left[\\left(X-\\mu_{X}\\right)\\left(Y-\\mu_{Y}\\right)\\right]}{\\sigma_{X} \\sigma_{Y}} =\\frac{\\mathrm{E}(X Y)-\\mathrm{E}(X) \\mathrm{E}(Y)}{\\sqrt{\\mathrm{E}\\left(X^{2}\\right)-\\mathrm{E}(X)^{2}} \\cdot \\sqrt{\\mathrm{E}\\left(Y^{2}\\right)-\\mathrm{E}(Y)^{2}}} $$\n现在我们换一种视角来看高斯分布，我们在三维空间里看这个二元高斯分布$\\left[\\begin{array}{l}x_{1} \\ x_{2}\\end{array}\\right] \\sim \\mathcal{N}\\left(\\left[\\begin{array}{l}\\mu_{1} \\ \\mu_{2}\\end{array}\\right],\\left[\\begin{array}{ll}\\Sigma_{11}, \u0026amp; \\Sigma_{12} \\ \\Sigma_{21}, \u0026amp; \\Sigma_{22}\\end{array}\\right]\\right)$，z轴代表其两个变量的联合概率密度，那么整个高斯分布在三维空间中的形状是钟形。从随机变量$X_1$的某个特定值处切一刀，可以得到$X = x_1$时，变量$X_2$的条件概率分布。\n但是问题随之出现，已知多元高斯分布的均值、协方差矩阵，如何求条件概率呢？\n我们可以参照Theorem，进行求解。定理中给出了边缘分布与条件概率分布的求解公式。 进一步考虑高斯函数的采样。我们往往是通过如下步骤对高斯函数进行采样，首先由高斯函数得到其累积分布函数(CDF)，随后由一个均匀分布出发，在$[0,1]$之间均匀采样，将采样得到的值project到高斯分布的CDF上，便可以得到高斯分布的采样。因为高斯函数的CDF两边平缓中间陡峭，而且关于均值$\\mu$中心对称。所以采样大多分布在均值附近，均值附近稠密，尾端稀疏。\n我们已经将$\\mathcal{N}(\\mathbf{0}, \\mathbf{I})$介绍完毕，如何由其得到任意均值和协方差$\\mathcal{N}(\\mu, \\Sigma)$的分布呢？\n由一元高斯分布，我们知道，由$\\mathcal{N}(0,1)$高斯分布可以得到任意分布$\\mathcal{N}(\\mu, \\sigma^2)$，等价于$\\mu + \\sigma \\mathcal{N}(0,1)$. 同理可推广至多元分布情形，只需我们可以求得矩阵的平方根。\n我们引入cholesky decomposition，对协方差矩阵进行分解,$\\Sigma=L L^{\\top}$,等价于原来的平方根。于是可以效仿一元高斯分布，求得任意多元高斯分布的值。\nGaussian Process ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"#! https://zhuanlan.zhihu.com/p/428553023\nOn Calibration of Modern Neural Networks 论文阅读笔记  本篇笔记主要记录Calibration的相关知识，以及作者的一些insight。如何使网络calibrating的一些方法并没有涉及。\n 摘要 作者发现，在深度神经网络盛行的当下，虽然网络的精度(Accuracy)大大提升了，但是网络的标定性（Calibration）很差。\nWhat is Calibration? $$ \\mathbb{P}(\\hat{Y}=Y \\mid \\hat{P}=p)=p, \\quad \\forall p \\in[0,1] $$ 上式中，$\\hat Y$是预测输出，$Y$是真实标签。$\\hat P$为网络输出该标签的信心confidence。$P(Y|P)$表示网络对输出Y有信心P。\n即：网络输出的confidence应当等于真实的概率。以二分类问题举例，对于一个分类网络，如果以最终输出预测的值作为信心confidence，它应当等于分类正确的概率。换言之：让模型的softmax输出能真实的反映决策的置信度。\nReliability Diagrams 可靠性直方图是用来描绘模型可靠性的一类直方图。 完美标定的(perfect calibrated) 模型应当是一条对角线。\n在有限的样本个数下，我们根据模型输出的prediction将样本分为$M$组，分别计算其Accuracy与confidence。如果我们用$B_m$指代第$m$个样本集合。那么有： $$ \\operatorname{acc}\\left(B_{m}\\right)=\\frac{1}{\\left|B_{m}\\right|} \\sum_{i \\in B_{m}} \\mathbf{1}\\left(\\hat{y}_{i}=y_{i}\\right) $$ 其中$\\hat y$为预测输出，$y$ 为真实样本标签。 $$ \\operatorname{conf}\\left(B_{m}\\right)=\\frac{1}{\\left|B_{m}\\right|} \\sum_{i \\in B_{m}} \\hat{p}_{i} $$ 其中$\\hat p_i$为第$i$个样本模型预测的信心confidence。\n那么可以以此画出Reliability Diagrams。如下图：\n中间为gap，即confidence与精度之间的差距。完美的标定模型其可靠性图应当是一条对角线。confidence能够精确反应预测精度。\nExpected Calibration Error(ECE) 期望标定误差 $$ \\mathrm{ECE}=\\sum_{m=1}^{M} \\frac{\\left|B_{m}\\right|}{n}\\left|\\operatorname{acc}\\left(B_{m}\\right)-\\operatorname{conf}\\left(B_{m}\\right)\\right| $$\n可用于度量标定。在图中表现为gap的均值。\nMaximum Calibration Error(MCE) 最大标定误差 $$ \\mathrm{MCE}=\\max {m \\in{1, \\ldots, M}}\\left|\\operatorname{acc}\\left(B{m}\\right)-\\operatorname{conf}\\left(B_{m}\\right)\\right| $$\nMCE为最大标定误差，即图中最大的一个gap。\n什么造成了标定错误？ 作者在文中分析得出结论，很大程度上由于模型容量增大以及缺乏正则化。\nModel Capacity 增加模型的深度和宽度可能减少分类误差，但是这样会增加对模型标定性能的负面影响。ECE会随着模型容量的增加而增加。当模型已经可以几乎正确分类所有类别时，进一步训练仍然可以减少NLL-Loss，但是这样会使网络过于自信，从而增大ECE。\nBatch Normalization 在实验中，我们观察发现，使用BatchNorm 的网络趋向于更加Miscalibrated.这一观察结论不论超参选取如何，始终成立。这可能是由于batchnorm拉平了层与层之间的distribution shift，从而导致网络使用了更少的正则化手段。\nWeight Decay Weight Decay 曾经是神经网络最主流的正则化机制，但现在却越来越少被使用。在实验中发现，ECE随着weight decay的增加而越来越少，最后到达某一界限时，ECE又会猛然增加。\nNLL Loss 网络在训练时，会对NLL Loss过拟合，网络会提高精度，但以标定精度为代价。\nCalibration Method On Binary Model Histogram binning 简而言之，Histogram binning就是将所有未标定的预测$\\hat p_i$划分到彼此互斥的bin中：$B_1, \u0026hellip;, B_M$。每个Bin都被赋予了一个标定分数$\\theta_m$.也就是说，如果$\\hat p_i$被分到bin $B_m$中，则其标定后的预测输出为$\\hat q_i = \\theta_m$.\n首先应该选定boundary，然后利用划分好的bin选择合适的$\\theta$最小化下式： $$ \\min {\\theta{1}, \\ldots, \\theta_{M}} \\sum_{m=1}^{M} \\sum_{i=1}^{n} \\mathbf{1}\\left(a_{m} \\leq \\hat{p}_{i}\u0026lt;a_{m+1}\\right)\\left(\\theta_{m}-y_{i}\\right)^{2} $$\n给定bin的边界，上式的$\\theta_m$的解等于对应$B_m$区间中，正例概率的均值。\nIsotonic regression 保序回归 Isotonic regression或许是最常见的非参数校准方法，它通过学习一个分段的常数函数来转换未经校准的输出，即$\\hat q_i = f(\\hat p_i)$. 具体而言，isotonic regression通过产生一个函数$f$来最小化平方误差$\\sum_{i=1}^{n}\\left(f\\left(\\hat{p}_{i}\\right)-y_{i}\\right)^{2}$，因为$f$被约束为分段常数函数，则该优化问题可以转换为： $$ \\begin{array}{ll} \\underset{\\begin{array}{c} M \\\n\\theta_{1}, \\ldots, \\theta_{M} \\\na_{1}, \\ldots, a_{M+1} \\end{array}}{\\min } \u0026amp; \\sum_{m=1}^{M} \\sum_{i=1}^{n} \\mathbf{1}\\left(a_{m} \\leq \\hat{p}_{i}\u0026lt;a_{m+1}\\right)\\left(\\theta_{m}-y_{i}\\right)^{2} \\\n\\text { subject to } \u0026amp; 0=a_{1} \\leq a_{2} \\leq \\ldots \\leq a_{M+1}=1, \\\n\u0026amp; \\theta_{1} \\leq \\theta_{2} \\leq \\ldots \\leq \\theta_{M} . \\end{array} $$\n在这种参数化条件下，isotonic regression变为histogram bin的一个严格泛化，同时最优化边界与概率取值。\nBayesian Binning into Quantiles(BBQ) To be updated\nPlatt scaling To be updated\nCalibration in Multiclass 对于包含$K \u0026gt; 2$个类的分类任务，将问题形式化描述如下：对每一个输入$\\mathbf{x_i}$，网络预测输出其分类预测$\\hat y_i$ 与置信度分数$\\hat p_i$. 在这种情况下，网络的logits $\\mathbf{z_i}$是向量，其中$\\hat{y}{i}=\\operatorname{argmax}{k} z_{i}^{(k)}$。 $\\hat p_i$往往通过softmax函数引出： $$ \\sigma_{\\mathrm{SM}}\\left(\\mathbf{z}_{i}\\right)^{(k)}=\\frac{\\exp \\left(z_{i}^{(k)}\\right)}{\\sum_{j=1}^{K} \\exp \\left(z_{i}^{(j)}\\right)}, \\quad \\hat{p}_{i}=\\max _{k} \\sigma_{\\mathrm{SM}}\\left(\\mathbf{z}_{i}\\right)^{(k)} $$\nTemperature scaling 学习并使用一个温度参数$T$，去校准网络。校准后的预测输出为： $$ \\hat{q}{i}=\\max {k} \\sigma{\\mathrm{SM}}\\left(\\mathbf{z}{i} / T\\right)^{(k)} $$ 当$T$趋近于0时，概率$\\hat q_i$趋近于$1/K$，代表最大的不确定性。当$T=1$时，为原始的softmax输入。当$T$趋近于0时，概率分布退化为一个点预测($\\hat q_i$ =1)。参数T是以NLL损失函数在验证集(validation set)上学习得到的。 由于温度参数$T$并不改变softmax函数的最大值，分类预测值$\\hat y_i^{'}$不会变化，即Temperature scaling 不会影响模型精度。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"泛化误差上界定理的证明 马尔科夫不等式 内容 如果$X$是只取非负值的随机变量，则对于任意$a \u0026gt; 0$，有： $$ P{X \\geq a} \\leq \\frac{E(X)}{a} $$\n简证 $$ \\begin{aligned} E(X)=\\int_{0}^{\\infty} x f(x) d x \u0026amp;=\\int_{0}^{a} x f(x) d x+\\int_{a}^{\\infty} x f(x) d x \\\n\u0026amp; \\geq \\int_{a}^{\\infty} x f(x) d x \\\n\u0026amp; \\geq \\int_{a}^{\\infty} a f(x) d x \\\n\u0026amp;=a \\int_{a}^{\\infty} f(x) d x \\ \u0026amp; =a P{X \\geq a} \\end{aligned} $$\n引理 ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"#! https://zhuanlan.zhihu.com/p/425388698\nDirichlet Distribution 狄利克雷分布 Definition 简介 狄利克雷分布，又称多元Beta分布，是一类在实数域以正单纯形(standard simplex)为支撑集(support)的高维连续分布，是Beta分布在高维情形的推广。\n在Bayesian inference里，Dirichlet分布是多项分布的共轭先验。\n背景知识：Beta分布 Beta分布是定义在$[0, 1]$区间内的连续概率分布族，它由两个参数$\\alpha, \\beta$所指定。这两个参数作为随机变量的指数出现，并且控制分布的形状。Beta分布的多元推广为狄利克雷分布。\nBeta分布是伯努利分布，二项分布的共轭先验， 如下讨论的分布也称第一类beta分布。\nBeta 分布的定义 概率密度函数 $$ \\begin{aligned} f(x ; \\alpha, \\beta) \u0026amp;=\\text { constant } \\cdot x^{\\alpha-1}(1-x)^{\\beta-1} \\\n\u0026amp;=\\frac{x^{\\alpha-1}(1-x)^{\\beta-1}}{\\int_{0}^{1} u^{\\alpha-1}(1-u)^{\\beta-1} d u} \\\n\u0026amp;=\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)} x^{\\alpha-1}(1-x)^{\\beta-1} \\\n\u0026amp;=\\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} x^{\\alpha-1}(1-x)^{\\beta-1} \\end{aligned} $$\n其中$\\Gamma(z)$ 是Gamma函数。Beta函数为：$\\mathrm{B}(x, y)=\\int_{0}^{1} t^{x-1}(1-t)^{y-1} d t$\nBeta分布与二项分布 Beta分布是二项分布的共轭先验。但除此之外，我们观察Beta分布的概率密度函数，会发现与二项分布的概率质量函数十分相似： $$ P{X=k}=\\left(\\begin{array}{c} n \\\nk \\end{array}\\right) p^{k}(1-p)^{n-k} $$\n在二项分布中，概率$p$作为参数，随机变量为$\\mathbb{X}$。 但在Beta分布中，概率作为随机变量，而不是参数。\n也就是说，Beta分布是概率的概率分布。其前面的常数项$\\frac{1}{\\mathbf{B}(\\alpha, \\beta)}$,其作用便是为了让整个概率密度函数的积分等于1，满足概率密度函数的积分约束。\n关于$\\alpha, \\beta$ $\\alpha, \\beta$是用来控制Beta分布形状的参数，其取值往往与某一事件发生而观测到的evidence有关。\n不同参数下的Beta分布  该部分内容参引jinzhao的回答。\n Beta分布的形状可以是钟形、U形、甚至是直线。 $\\alpha, \\beta$ 均大于1， 为钟形；有一值为1，为直线；若均小于1，则为U形。 Dirichlet 分布的定义 概率密度函数 参数为$\\alpha_{1}, \\ldots, \\alpha_{K}\u0026gt;0$的$K$阶$(K\u0026gt;2)$狄利克雷分布在欧式空间$\\mathbf{R}^{K-1}$中，关于勒贝格测度(Lebesgue Measure)有概率密度函数： $$ f\\left(x_{1}, \\ldots, x_{K} ; \\alpha_{1}, \\ldots, \\alpha_{K}\\right)=\\frac{1}{\\mathrm{~B}(\\boldsymbol{\\alpha})} \\prod_{i=1}^{K} x_{i}^{\\alpha_{i}-1} $$ 其中$\\left{x_{k}\\right}_{k=1}^{k=K}$属于标准$K-1$阶单纯形(simplex)，即：$\\sum_{i=1}^{K} x_{i}=1$ 且 $x_{i} \\geq 0$ 对于全体 $i \\in{1, \\ldots, K}$\n概率密度函数中分母上的用于归一化的常数为多元Beta函数，其可以被表达为含Gamma函数的表达式： $$\\mathrm{B}(\\boldsymbol{\\alpha})=\\frac{\\prod_{i=1}^{K} \\Gamma\\left(\\alpha_{i}\\right)}{\\Gamma\\left(\\sum_{i=1}^{K} \\alpha_{i}\\right)}, \\quad \\boldsymbol{\\alpha}=\\left(\\alpha_{1}, \\ldots, \\alpha_{K}\\right)$$\n相关知识 勒贝格测度(Lebesgue measure) 在测度理论中，Lebesgue测度是将测度赋予$n$维欧式子空间的标准方法。对于$n=1, 2 ,3$， Lebesgue测度等价于长度、面积、与体积。Lebesgue测度常又称为n维体积、或体积。\n测度(measure) 测度是数学的一个基本概念。测量为一些常见的概念提供了数学抽象，如质量、距离/长度、面积、体积、事件的概率。这些看似截然不同的概念本质上非常相似。测度是概率论的基础。\n为了将积分推广到任意集合中，人们定义了测度，测度是一个函数，对于一个集合中的子集，赋予其一个值。\nGamma函数 Gamma函数是阶乘的在复数域上的推广。其定义域为除非正整数外的全体复数。\n对于任何正整数$n$: $$\\Gamma(n)=(n-1) !$$\n对于正实部的复数，其定义为： $$\\Gamma(z)=\\int_{0}^{\\infty} x^{z-1} e^{-x} d x, \\quad \\Re(z)\u0026gt;0$$\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"为什么要有Tensor.contiguous() Tensor.contiguous()作用  Returns a contiguous in memory tensor containing the same data as self tensor. If self tensor is already in the specified memory format, this function returns the self tensor.\n 作用在官方文档里，描述的看似清晰但又模棱两可。例如x是一个Tensor，x.contiguous()的作用就是返回一个在内存中连续的Tensor，其data与Tensorx一致。如果源x本来就在内存中连续的话，那就返回其本身。\n为什么要有Tensor.contiguous()?  Reference: StackOverflow\u0026ndash;Why do we need contiguous?\n 在PyTorch中，有些对Tensor的操作并不实际改变tensor的内容，而只是改变如何根据索引检索到tensor的byte location的方式。\n这些操作有：\n narrow(), view(), expand(), transpose()，permute()\n 例如： 当我们调用transpose()时，PyTorch并不会生成一个具有新的layout（大概可以翻译为布局）的新tensor。该操作仅仅改变了tensor中的meta information（元信息），所以offset和stride可以正确作用于新的shape。但是转置后的tensor和源tensor在事实上是共享同一块内存空间的。\n\u0026gt;\u0026gt;\u0026gt; x = torch.randn(3,2) \u0026gt;\u0026gt;\u0026gt; print(x) tensor([[ 0.9181, 1.4266], [-0.1432, -0.7514], [ 0.9809, -0.5079]]) \u0026gt;\u0026gt;\u0026gt; print(x[0,0]) tensor(0.9181) \u0026gt;\u0026gt;\u0026gt; y = x.transpose(1,0) \u0026gt;\u0026gt;\u0026gt; print(y) tensor([[ 0.9181, -0.1432, 0.9809], [ 1.4266, -0.7514, -0.5079]]) \u0026gt;\u0026gt;\u0026gt; print(y[0,0]) tensor(0.9181) 这就是contiguous的来源。上述例子中x是连续的，但是y不是，因为y的内存布局与从头开始新建一个与yshape相同的tensor的内存布局不同。\n需要注意的是，contiguous这个单词有点被误解了，它并不是指tensor的内容在内存块上不连续。字节仍然是分配在同一个内存块上的，问题在于其元素之间的顺序order。\n而当我们调用contiguous()时，实际上它是会复制一个张量，同时元素之间在内存上的顺序与从零开始新建的相同shape的张量一致。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"克罗内克内积 Kronecker product $\\otimes$ 1.1 概述 克罗内克内积是一种特殊的张量积。任何两个形状的矩阵都可以进行克罗内克内积操作。\n1.2 定义 Definition $A \\otimes B$的定义：A是mxn矩阵，B是pxq矩阵。$A \\otimes B$是mp x nq的分块矩阵。 例子： 1.3 性质 1.3.1 双线性结合律 1.3.2 不满足交换律 1.3.3 混合乘积性 ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"协方差矩阵详解以及numpy计算协方差矩阵(np.cov) 协方差矩阵详解 均值，标准差与方差 由简单的统计学基础知识，我们有如下公式：\n\\bar X{\\rm{ = }}\\frac{{\\sum\\limits_{i = 1}^n {{X_i}} }}{{\\rm{n}}} S = \\sqrt {\\frac{{\\sum\\limits_{i = 1}^n {{{({X_i} - \\bar X)}^2}} }}{{n - 1}}} {S^2} = \\frac{{\\sum\\limits_{i = 1}^n {{{({X_i} - \\bar X)}^2}} }}{{n - 1}} 其中$\\bar X$是样本均值，反映了n个样本观测值的整体大小情况。\n$S$是样本标准差，反应的是样本的离散程度。标准差越大，数据越分散。\n$S^2$是样本方差，是$S$的平方。\n均值虽然可以在一定程度上反应数据的整体大小，但是仍然不能反应数据的内部离散程度。而标准差和方差弥补了这一点。\n但是标准差和方差都是针对一维数组的，即1 x d数组。该数组的行代表的是一个随机变量（可理解为属性），如工资等。每一列代表一个观测值。如果一个事物具有多种属性，即有多个随机变量，那么我们会得到一个var_num x d数组。该数组的每一行都是一个随机变量（属性），每一列代表着一个在这些属性维度上的观测值样本。如果我们想要分析该事物，那么仅仅将其剥离为单独的1 x d去求其标准差是不够的，我们还需要关注这些随机变量（属性）variable内部之间的联系。如工资和年龄的联系，工资和技术水平的联系等。\n所以便自然而然的引入了协方差。\n协方差 两个随机变量的协方差反映了这两个随机变量一致的分散程度有多大。\n通俗的讲，协方差反映了两个随机变量的正负相关关系。\n由方差的公式，我们可以类比得出协方差的公式：\n{\\mathop{\\rm var}} (X) = {S^2} = \\frac{{\\sum\\limits_{i = 1}^n {({X_i} - \\bar X)({X_i} - \\bar X)} }}{{n - 1}} {\\mathop{\\rm cov}} (X,Y) = \\frac{{\\sum\\limits_{i = 1}^n {({X_i} - \\bar X)({Y_i} - \\bar Y)} }}{{n - 1}} = E((X - E(X))(Y - E(Y))) 相关系数$\\rho$与协方差直接有如下关系：\n\\rho = \\frac{{Cov(X,Y)}}{{{\\sigma _X}{\\sigma _Y}}} = \\frac{{E((X - E(X))(Y - E(Y)))}}{{{\\sigma _X}{\\sigma _Y}}} = E((\\frac{{X - E(X)}}{{{\\sigma _X}}})(\\frac{{Y - E(Y)}}{{{\\sigma _Y}}}) 从上述公式可见，相关系数$\\rho$实际上也是一种特殊的协方差。相关系数是数据X和Y做了归一化$x = \\frac{{(X - \\bar X)}}{{{\\sigma _X}}}$,$y = \\frac{{(Y - \\bar Y)}}{{{\\sigma _Y}}}$之后的协方差。$x,y$的方差为1，期望为0。有：\n\\rho(X,Y) = cov(x,y) 协方差的意义此时应该很清晰了。\n协方差矩阵 对于具有很多个随机变量的数据，随机变量之间两两都具有一个协方差，这样便形成了一个协方差矩阵。 假设我们有一组数据，其具有三个随机变量，n个观测值：\n那么其协方差矩阵为： 我们可以使用一种便捷的矩阵乘法来计算协方差矩阵。设原数据数组为$X$。先对X进行处理，求X每一个随机变量的均值。然后对于每一行，减去该行随机变量的均值，得到$X^{'}$，记协方差矩阵为M，那么就有:\nM = \\frac{{X^{'}{X^{'}}^{T}}}{{n-1}} 用代码描述可能更加清晰:\na = np.array([[1,2,3],[4,5,7]]) cov1 = np.cov(a) mean_a = np.mean(a,axis=1,keepdims=True) tmpa = a-mean_a cov2 = np.matmul(tmpa,tmpa.T)/(tmpa.shape[1]-1) print(cov1) print(cov2) numpy计算协方差矩阵np.cov() 语法 numpy.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,dtype)\n用于计算给定矩阵和权值的协方差矩阵。\nParameters  m:array_like   A 1-D or 2-D array containing multiple variables and observations. Each row of m represents a variable, and each column a single observation of all those variables. Also see rowvar below.\n 一维或者二维数组，包含有多个随机变量和观测值。m的每一行代表一个随机变量，每一列代表包含所有随机变量的一个观测值。当给一维数组时，相当于计算的就是方差。\n y:array_like,optional   An additional set of variables and observations. y has the same form as that of m.\n 额外的一组数据，y必须在在数据形式上与m一致。\n如果m.shape = (var_num, obs_num)，那么y.shape必须在第二维观测值个数上，即shape[1]与m保持一致，即y也得有obs_num个观测值。实际执行时，会先将这两组数据concatenate，然后再求解。\nExample\na = np.array([[1,2,3],[4,5,7]]) b = np.array([[1,2,3,4],[4,5,6,7]]) cov = np.cov(a,b) 执行结果： 从执行结果上可见，报错。报错的具体描述便是，两组数据在dimension1不一致。 我们也可以从numpy.cov()源码中看到：\nif y is not None: y = array(y, copy=False, ndmin=2, dtype=dtype) if not rowvar and y.shape[0] != 1: y = y.T X = np.concatenate((X, y), axis=0) 可见是对其进行了concatenate.\n bias: bool, optional   Default normalization (False) is by (N - 1), where N is the number of observations given (unbiased estimate). If bias is True, then normalization is by N. These values can be overridden by using the keyword ddof in numpy versions \u0026gt;= 1.5\n 默认的采用无偏估计，即除以(N-1)，N是样本个数。可以被ddof所覆盖。\n rowvar : bool, optional   If rowvar is True (default), then each row represents a variable, with observations in the columns. Otherwise, the relationship is transposed: each column represents a variable, while the rows contain observations.\n rowvar指定了行列谁为随机变量的问题。默认为True，即行代表一个随机变量。而列代表观测值。如果为False，那么列代表随机变量，而行代表观测值。\n ddof : int, optional   If not None the default value implied by bias is overridden. Note that ddof=1 will return the unbiased estimate, even if both fweights and aweights are specified, and ddof=0 will return the simple average. See the notes for the details. The default value is None.\n .. versionadded:: 1.5   fweights : array_like, int, optional   1-D array of integer frequency weights; the number of times each observation vector should be repeated.\n .. versionadded:: 1.10  一维int数组，shape[0]应当与数据的观测值个数一致(即当rowvar=True时候的shape[1])。指定每个观测值的频率权重，即这个观测值向量(column)应该被重复计算几次。\n aweights : array_like, optional   1-D array of observation vector weights. These relative weights are typically large for observations considered \u0026ldquo;important\u0026rdquo; and smaller for observations considered less \u0026ldquo;important\u0026rdquo;. If ddof=0 the array of weights can be used to assign probabilities to observation vectors.\n .. versionadded:: 1.10  一维数组，其shape[0]同样的，应该与观测值个数一致。指定的是每个计算权重，即较重要的观测值其aweight大一些，不那么重要的可以小一些。当ddof为0的时候，相当于观测值的概率。\n Return：  out: ndarray: The covariance matrix of the variables.    Example 由于不太直观，所以不举例。分析一下源码。\n源码  if ddof is not None and ddof != int(ddof): # 这里说明ddof必须是int类型 raise ValueError( \u0026quot;ddof must be integer\u0026quot;) # Handles complex arrays too m = np.asarray(m) # 所以m的输入类型可以是lists, lists of tuples #tuples, tuples of tuples, tuples of lists and ndarrays. if m.ndim \u0026gt; 2: # 不能超过两维 raise ValueError(\u0026quot;m has more than 2 dimensions\u0026quot;) if y is None: # 如果y是None，返回数组类型取原数组类型 # 与np.float64精度高的那一个。 dtype = np.result_type(m, np.float64) else: # 有y输入则先处理y，判断y的维度，再判断数据类型 y = np.asarray(y) if y.ndim \u0026gt; 2: raise ValueError(\u0026quot;y has more than 2 dimensions\u0026quot;) dtype = np.result_type(m, y, np.float64) X = array(m, ndmin=2, dtype=dtype) if not rowvar and X.shape[0] != 1: # 如果rowvar为False就转置 X = X.T if X.shape[0] == 0: return np.array([]).reshape(0, 0) if y is not None: # 对y进行处理 y = array(y, copy=False, ndmin=2, dtype=dtype) if not rowvar and y.shape[0] != 1: # 判断rowvar是否转置 y = y.T X = np.concatenate((X, y), axis=0) # concatenate if ddof is None: # 如果未指定ddof if bias == 0: # 如果指定了bias=0,ddof=1,无偏 ddof = 1 else: # 否则ddof=0 ddof = 0 # Get the product of frequencies and weights w = None if fweights is not None: fweights = np.asarray(fweights, dtype=float) if not np.all(fweights == np.around(fweights)): # round进行取整 # 取整后判断是否全部相等，来判断全都是整数，必须全是整数，否则报错 raise TypeError( \u0026quot;fweights must be integer\u0026quot;) if fweights.ndim \u0026gt; 1: # 必须一维 raise RuntimeError( \u0026quot;cannot handle multidimensional fweights\u0026quot;) if fweights.shape[0] != X.shape[1]: # 必须与观测数一致 raise RuntimeError( \u0026quot;incompatible numbers of samples and fweights\u0026quot;) if any(fweights \u0026lt; 0): #必须全部为正值 raise ValueError( \u0026quot;fweights cannot be negative\u0026quot;) w = fweights # 将fweight赋给w if aweights is not None: aweights = np.asarray(aweights, dtype=float) if aweights.ndim \u0026gt; 1: raise RuntimeError( \u0026quot;cannot handle multidimensional aweights\u0026quot;) if aweights.shape[0] != X.shape[1]: raise RuntimeError( \u0026quot;incompatible numbers of samples and aweights\u0026quot;) if any(aweights \u0026lt; 0): raise ValueError( \u0026quot;aweights cannot be negative\u0026quot;) if w is None: w = aweights # 如果fweight为空，就直接把aweight赋给w else: w *= aweights # 否则w = fweight * aweight avg, w_sum = average(X, axis=1, weights=w, returned=True) # 以列为操作单元，求每一个随便变量的所有观测值在权重w下的均值。 # w_sum为w的所有元素的和（权重和）。 w_sum = w_sum[0] # Determine the normalization if w is None: # 如果w为None，那么直接用X的观测值个数（列数）减ddof fact = X.shape[1] - ddof elif ddof == 0: # w不为空，ddof等于0，需要除以的分母就是 w_sum fact = w_sum elif aweights is None: # w不为空，aweight为空，ddof不为0 # 直接用 w_sum-ddof(因为此时的w_sum就相当于重复后的观测值个数) fact = w_sum - ddof else: # w不为空，aweight也不为空， fweight也不为空，ddof != 0 # fact就相当于w_sum减去以w为权重的aweight的平均值乘以ddof # 当aweigth=None的时候，是这个公式的一个特殊情况 # 在这里猜测：ddof： duplicated degreeds of freedom # 即重复无效的自由度 fact = w_sum - ddof*sum(w*aweights)/w_sum if fact \u0026lt;= 0: warnings.warn(\u0026quot;Degrees of freedom \u0026lt;= 0 for slice\u0026quot;, RuntimeWarning, stacklevel=3) fact = 0.0 X -= avg[:, None] # X减去均值 if w is None: X_T = X.T else: X_T = (X*w).T # 乘以权重 c = dot(X, X_T.conj()) # X 乘以 X的转置的复共轭矩阵（对标量而言就是转置） c *= np.true_divide(1, fact) # 再除以fact return c.squeeze() # 删去c中dim为1的维度，输出。 以上就是我对np.cov()的全部解读。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"循环神经网络 前言 我们知道，在n元语法中，时间步$t$的词$w_t$基于前面所有词的条件概率只考虑了最近时间步的$n-1$个词。如果要考虑比$t-(n-1)$更早时间步的词对$w_t$的可能影响，我们需要增大n。\n其下介绍的循环神经网络，它并未刚性地记忆所有固定长度的序列，而是通过隐藏状态来存储之前时间步的信息。\n不含隐藏状态的神经网络 考虑一个含单隐藏层的多层感知机，给定样本数为$n$、输入个数（特征数或者特征向量维度）为$d$的小批量数据样本$X \\in R^{n \\times d}$，设隐藏层的激活函数为$\\phi$，那么隐藏层的输出$H \\in R^{n \\times h}$计算为：\nH = \\phi(XW_{xh} + b_h) 其中隐藏层权重参数$W_{xh} \\in R^{d \\times h}$， 隐藏层偏差参数$b_h \\in R^{1 \\times h}$，$h$为隐藏单元个数。上式相加的两项形状不同，因此按广播机制相加，将隐藏变量$H$作为输出层的输入，且输出个数为$q$（如分类问题中的类别数），输出层的输出为：\nO = HW_{hq} + b_q 其中输出变量$O \\in R^{n \\times q}$，输出层权重参数$W_{hq} \\in R^{h \\times q}$，输出层偏差参数$b_q \\in R^{1 \\times q}$。如果是分类问题，我们可以使用$softmax(O)$来计算输出类别的概率分布。\n含隐藏状态的循环神经网络 现在我们考虑输入数据存在时间相关性的情况，假设$X_t \\in R^{n \\times d}$是序列中时间步t的小批量输入，$H_t \\in R^{n \\times h}$是该时间步的隐藏变量。与多层感知机不同的是，这里我们保存上一时间步的隐藏变量$H_{t-1}$，并引入一个新的权重参数$W_{hh} \\in R^{h \\times h}$，该参数用于描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，时间步t的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定。\nH_t = \\phi(X_tW_{xh} + H_{t-1}W_{hh} + b_h) 与多层感知机相比，我们在这里添加了$H_{t-1}W_{hh}$一项。由上式中相邻时间步的隐藏变量$H_t$,$H_{t-1}$之间的关系可知，这里的隐藏变量能够捕捉截止到当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或者记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了上一时间步的隐藏状态，上式的计算是循环的。使用循环计算的网络即循环神经网络(recurrent neural network)。\n循环神经网络有很多种不同的构造方法，含上式所定义的隐藏状态的循环神经网络是极为常见的一种。\n循环神经网络的参数包括隐藏层的权重$W_{xh} \\in R^{d \\times h}$、$W_{hh} \\in R^{h \\times h}$和偏差$b_h \\in R^{1 \\times h}$，以及输出层的权重$W_{hq} \\in R^{h \\times q}$和偏差$b_q \\in R^{1 \\times q}$。值得一提的是，即便在不同时间步，循环神经网络也始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的增长而增长。\n下图展示了循环神经网络在3个相邻时间步的计算逻辑。在时间步$t$，隐藏状态的计算可以看成是将输入$X_t$和前一时间步隐藏状态$H_{t-1}$连结后输入一个激活函数为$\\phi$的全连接层。该全连接层的输出就是当前时间步的隐藏状态$H_t$，且模型参数为$W_{xh}$与$W_{hh}$的连结，偏差为$b_h$。当前时间步$t$的隐藏状态$H_t$将参与下一个时间步$t+1$的隐藏状态$H_{t+1}$的计算，并输入到当前时间步的全连接输出层。 隐藏状态中$X_tW_{xh} + H_{t-1}W_{hh} $的计算等价于$X_t$与$H_{t-1}$连结的矩阵乘以$W_{xh}$与$W_{hh}$连结后的矩阵。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Affinity Layer 仿射变换层 Definition Affinity layer，即Full-connected layer（仿射层或全连通层）是一层人工神经网络，其中所有包含的节点连接到后续层的所有节点。仿射层通常用于卷积神经网络和递归神经网络。受限玻尔兹曼机是仿射层或全连接层的一个例子。\n对于每一个到仿射(全连接)层的连接，节点的输入是前一层输出的线性组合，带有附加的偏置。然后通过激活函数传递输入来计算节点的输出。数学上，这表示为: $$ y=f(W x+b) $$\n$f$代表激活函数，$W,b$为可学习参数，$y$是输出，$x$是输入。\n总结 Affinity Layer，就是 Full-connected Layer，就是仿射层，也是我们熟知的全连接层。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Affinity Matrix  reference: DeepAI(Link: https://deepai.org/)\n What is an Affinity Matrix? Affinity Matrix， 也叫做 Similarity Matrix。即关联矩阵，或称为相似度矩阵，是一项重要的统计学技术，是一种基本的统计技术，用于组织一组数据点之间的彼此相似性。相似度(similarity)类似于距离(distance)，但它不满足度量性质，两个相同的点的similarity scores为1，而在metric下将为0。\n相似度量的典型例子是余弦相似度(cosine similarity)和Jaccard相似度(Jaccard Similarity)。这些相似性度量可以解释为两个点相关的概率。例如，如果两个数据点的坐标很接近，那么它们的余弦相似度分数(或各自的“相似度”分数)将非常接近于1。\nCosine Similarity 概念 余弦相似性度量内积空间中两个非零向量之间夹角的余弦。这种相似性度量特别关注方向，而不是大小。简而言之，在相同方向上对齐的两个余弦向量相似性度量为1，而两个垂直对齐的向量相似性度量为0。如果两个向量是截然相反的，这意味着它们的方向是完全相反的(即背对背)，那么相似性度量是-1。\n计算公式： $$ \\text { similarity }=\\cos (\\theta)=\\frac{\\mathbf{A} \\cdot \\mathbf{B}}{|\\mathbf{A}||\\mathbf{B}|}=\\frac{\\sum_{i=1}^{n} A_{i} B_{i}}{\\sqrt{\\sum_{i=1}^{n} A_{i}^{2}} \\sqrt{\\sum_{i=1}^{n} B_{i}^{2}}}, $$\n输出将产生一个从-1到1的值，表示相似性。其中-1是不相似的，0是正交的(垂直的)，1表示完全相似。\nJaccard Similarity Jaccard指数，也被称为Jaccard相似系数，是用来衡量样本集的相似性和多样性的指标。即图像目标识别领域非常常见的评价指标IoU。\n计算公式 $$ J(A, B)=\\frac{|A \\cap B|}{|A \\cup B|}=\\frac{|A \\cap B|}{|A|+|B|-|A \\cap B|} $$\n可见集合相似度度量使用IoU(Jaccard Similarity)\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"概述 在概率论与统计学中，狄利克雷分布 Dirichlet distribution 常被简记为$Dir(\\alpha)$,是基于一个正实数向量$\\alpha参数的连续多元概率分布族。狄利克雷分布是对贝塔分布 beta distribution的多元泛化，所以它也被称为多元贝塔分布 multivariate beta distribution(MBD)。\n狄利克雷分布被广泛作为贝叶斯统计的先验分布使用。同时，狄利克雷分布也是分类分布Categorical distribution 和多项分布categorical distribution 的共轭先验。\n狄利克雷分布的无限维推广就是狄利克雷过程Dirichlet process\n#\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Matrix Differentiation（矩阵求导）  References: Matrix Differentiation,Rabdak J.Barnes \n 注： 本文直接从Matrix Differentiation开始记录，之前的乘法等基础部分不表。\nConvention 3 m维向量对n维向量求导所得的结果是一个mxn矩阵,即Jacobian Matrix。 具体形式见上公式。\n命题5 Proposition 5 即：Ax对x求导，结果为A\nProof 命题6 Proposition 6 即：y=Ax，而x是z的函数，那么便有$\\frac{{\\partial {\\rm{y}}}}{{\\partial z}} = A\\frac{{\\partial x}}{{\\partial z}}$\nProof 命题7 Proposition 7 对于$\\alpha = y^TAx$分别对x和y求导的结论。\nProof 命题8 Proposition 8 对于$\\alpha = x^TAx$对x求导的结论。\nProof 命题9 Proposition 9 即命题8的特例，A是对称矩阵。\n命题10 Proposition 10 即$\\alpha = y^Tx$，而y和x均为向量z的函数，对z求导的结果。\nProof 命题11 Proposition 11 命题10的特例，$y=x$\n命题12 Proposition 12 对于$\\alpha = y^TAx$,x和y都是向量z的函数，对z求导的结果。\nProof 命题13 Proposition 13 命题12的特例：$y=x$\n命题14 Proposition 14 命题13的特例：A是对称矩阵\n命题15 Propostion 15 Proof ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Corner Feature Detector(Intensity-Based) 基于光强比较的角点检测，直接比较光强（像素灰度值），而不计算梯度。所以实时性更好，所需的存储空间更小。\nSUSAN 角点检测 SUSAN 全称Smallest univalue segment assimilating nucleus，最小核同值区。提出者Smith与Brady, 1997.\nSUSAN 使用一个圆形模板和一个圆的中心点，通过圆的中心点象素值与模板圆内其他象素值的比较，统计出与圆中心点象素值近似的象素数量，当这样的象素数量小于某一阈值时，则该圆中心点就被认为是角点。\n 圆形模板：通常是半径为3.5，37个像素的圆形 圆形模板中心点：圆心位置的像素 最小核同值区：像素值与圆心位置像素值接近的区域和（颜色接近的区域）  有两种划分（了解）：\n平滑划分：$c\\left(\\vec{r}, \\vec{r}{0}\\right)=e^{-\\left(\\frac{I(r)-I\\left(r{0}\\right)}{t}\\right)^{6}}$\n直接划分：$c\\left(\\vec{r}, \\vec{r}{0}\\right)=\\left{\\begin{array}{ll}1 \u0026amp; \\text { if }\\left|I(\\vec{r})-I\\left(\\vec{r}{0}\\right)\\right| \\leq t \\ 0 \u0026amp; \\text { if }\\left|I(\\vec{r})-I\\left(\\vec{r}_{0}\\right)\\right|\u0026gt;t\\end{array}\\right.$\n像素个数：$n\\left(x_{0}, y_{0}\\right)=\\sum_{(x, y) \\neq\\left(x_{0}, y_{0}\\right)} c(x, y)$\n像素个数与阈值$g$进行比较，以此判断角点。 $$ R\\left(\\vec{r}{0}\\right)=\\left{\\begin{array}{cc} g-n\\left(\\vec{r}{0}\\right) \u0026amp; n\\left(\\vec{r}_{0}\\right)\u0026lt;g \\\n0 \u0026amp; \\text { otherwise } \\end{array}\\right. $$\nFAST 角点检测 实时性好，不具有旋转不变性。\n主要思想：比较中心像素与圆内（这里的圆内指的是圆边经过的像素）16个像素，如果圆内存在n个相邻的像素块都比中心像素的亮度$I_p$加上一个阈值$t$亮，或者都比$I_p - t$暗，则就判断其为角点。n通常选择为12. FAST uses binary comparison with each pixel along a circle pattern against the central pixel。\n算法描述：\n 以候选的像素角点为中心，画一个半径为3的圆，这样圆上就会有16个像素块。 比较pixel 1、pixel 9与中心像素的亮度值。如果它们距离$I_p$都在$p$的阈值内，即比$I_p + t$亮或比$I_p - t$暗，则该像素$p$不可能是角点。 如果未能排除角点可能性，则判断pixel 5、pixel 13（可以观察到5、13是正交于1和9的）。如果$p$是角点，那么在1,9,5,13中至少有3个像素全部比$I_p + t$亮或全部比$I_p - t$暗。如果未满足该条件，则像素$p$不可能是角点。 若还不能排除角点的可能性，则对所有16个像素块进行测试。判断n与12的大小。  在SUSAN上进行了改进，FAST效率极高，具有高重复性。但仍然存在一些问题：\n 如果圆环上的16个像素，一半明显比中心暗，一半明显比中心亮，则也有可能是角点。但会被FAST拒绝。 检测器的相率取决于像素点判断的顺序，无法保证最优。 相邻的几个特征像素点容易被重复检测为角点（可以使用非极大值抑制）。  FAST-ER 角点检测 FAST-ER，Rosten 2010年提出的对FAST算法的改进。\n主要改进在于：使用ID3决策树策略对FAST进行了加速，使得其更快。\n关于ID3决策树，可以参考：https://blog.csdn.net/weixin_43977640/article/details/114336485\n每个像素点$x$都能将全部像素构成的集合$P$分为三个集合$P_d, P_b, P_s$，即比$I_p-t$暗，比$I_p+t$亮，与之类似。这样就可以根据像素点$x$来对决策树进行进一步的划分。\n一个任意的角点集合的信息熵： $$ H(Q)=(c+\\bar{c}) \\log _{2}(c+\\bar{c})-c \\log _{2} c-\\bar{c} \\log _{2} \\bar{c} $$\n$c$是集合中的角点数量，$\\bar c$是集合中的非角点数量。就是传统的信息熵计算方法。只不过把概率拆开写了。\n而依据$x$会将训练集中的全部像素构成的集合划分为三个子集，作者规定他们的贡献度都一样，所以$x$的信息增益： $$ H_{g}=H(P)-H\\left(P_{d}\\right)-H\\left(P_{s}\\right)-H\\left(P_{b}\\right) $$\n计算周围16个像素点的信息增益，选择增益最大的$x$，然后进一步递归构建决策树，直到递归结束。\n这样构建出来的决策树可以正确分类训练集中的所有角点，因此非常近似地体现了FAST角点检测器的规则。\nAGAST 角点检测 FAST-ER存在的问题：ID3是贪心算法，可能只是局部最优；构造的树为三叉树，对于机器来说二叉树效率更高。\nAGAST通过在一个扩展的配置空间上训练一个最优的决策树，来优化角点判断的决策。\n这篇Paper我没看。所以只简略说明一下。\nORB ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Introduction Image Matching是什么？  As a critical and fundamental problem in these complicated tasks, image matching, also known as image registration or correspondence, aims to identify then correspond the same or similar structure/content fromtwo ormore images.\n 图像匹配，也被称为图像配准或图像对应，起目的在于识别出两幅或更多图像中的相同或相似结构/内容，然后将它们对应起来。\nImage Matching 派生的具体任务  sparse feature matching 稀疏特征匹配 dense matching（like image registration and stereo matching） 稠密匹配 patch matching（retrieval） 2-D and 3-D point set registration graph matching  Image Matching 通常如何构成 Image matching 通常由两个部分构成，即陪匹配特征的性质与匹配策略，分别表示用什么特征进行匹配，如何进行匹配。\nDirect Strategy，即Area-based方法，在预先设定大小的滑动窗口甚至是整个图像中，通过对原始图像像素强度或像素域变换后的信息进行相似性度量来匹配两幅图像，而不尝试检测任何显著的图像结构\nfeature-based method\n特征检测可以从图像中提取出特征结构，特征描述可以看作是一种广泛应用于图像编码和图像分类检索等相似度度量的图像表示方法\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"语言模型 前言 DCP用到了Transformer，其很多实现的Motivation都来自于Sq2Sq的启发。所以重新回顾学习语言模型。\n语言模型 语言模型是自然语言处理的重要技术。自然语言处理中最常见的数据是文本数据。 我们可以把一段自然语言文本看做一段离散的时间序列。假设一段长度为T的文本中的词依次为$w_1,w_2,...,w_T$， 那么在离散的时间序列中，$w_t(1 \\le t \\le T )$可以看做在时间步t的输出。给定一个长度为T的词的序列$w_1,w_2,...,w_T$。语言模型将计算该序列的概率：\nP(w_1,w_2,...,w_T) 语言模型的计算 假设序列$w_1,w_2,...,w_T$中的各个词是依次生成的，我们有：\nP(w_1,w_2,...w_T) = \\prod\\nolimits_{t = 1}^{\\rm{T}} {P(w_t|w_1,...,w_{t-1})} 例如，一段含有四个词的文本序列的概率：\nP(w_1,w_2,w_3,w_4) = P(w_1)P(w2|w_1)P(w_3|w_1,w_2)P(w_4|w_1,w_2,w_3) 为了计算语言模型，我们需要计算词的概率，以及一个词在给定的前几个词的情况下的条件概率，即语言模型参数。设训练数据集为一个大型文本语料库，词的概率可以通过该词在训练数据集中的相对词频来计算。例如，$P(w_1)$可以计算为$w_1$在训练数据集中的词频与训练数据集的总词数之比。因此，根据条件概率定义，一个词在给定前几个词的情况下的条件概率也可以通过训练数据集中的相对词频计算。例如$P(w_2|w_1)$可以计算为$w_1,w_2$两词相邻的频率与$w_1$词频的比值，即$P(w_1,w_2)$与$P(w_1)$之比。以此类推。\nn元语法 当序列长度增加时，计算和存储多个词共同出现的概率的复杂度会呈指数级增加。n元语法通过马尔可夫假设（并不一定成立）简化了语言模型的计算。这里的马尔科夫假设是指一个词的出现如果只与前面n个词相关，即n阶马尔科夫链。如果$n=1$，那么有：$P(w_3|w_1,w_2) = P(w_3|w_2)$。如果基于$n-1$阶马尔科夫链，我们可以将语言模型改写为：\nP(w_1,w_2,...,w_T) \\approx \\prod\\nolimits_{t=1}^{\\rm{T}} {P(w_t|w_{t-(n-1)},...,w_{t-1})} 以上称为n元语法(n-grams)。它是基于n-1阶马尔科夫链的概率语言模型。当n分别为1，2和3时，我们将其分别称作一元语法(unlgram)、二元语法(blgram)和三元语法(trlgram)。例如，长度为4的序列$w_1,w_2,w_3,w_4$在一元语法，二元语法和三元语法中的概率分别为： 当n较小时，n元语法往往并不准确。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":" Reference: Wikipedia:Bayesian_inference\n   Bayesian inference is a method of statistical inference in which Bayes' theorem is used to update the probability for a hypothesis as more evidence or information becomes available. Bayesian inference is an important technique in statistics, and especially in mathematical statistics. Bayesian updating is particularly important in the dynamic analysis of a sequence of data. Bayesian inference has found application in a wide range of activities, including science, engineering, philosophy, medicine, sport, and law. In the philosophy of decision theory, Bayesian inference is closely related to subjective probability, often called \u0026ldquo;Bayesian probability\u0026rdquo;.\n 贝叶斯推理是一种统计推理方法，利用贝叶斯定理更新假设的概率，来获得更多的证据与信息。贝叶斯推理是统计学尤其是数理统计中的一项重要技术。贝叶斯更新在对于序列化数据的动态分析中非常重要。贝叶斯推断被广泛应用于科学研究，工程等领域。在决策理论哲学中，贝叶斯推理与主观概率密切相关，经常被称为贝叶斯概率。\n贝叶斯规则简介(Introduction to Bayes' rule) 形式化解释(Formal explanation)  Bayesian inference derives the posterior probability as a consequence of two antecedents: a prior probability and a \u0026ldquo;likelihood function\u0026rdquo; derived from a statistical model for the observed data. Bayesian inference computes the posterior probability according to Bayes' theorem.\n 贝叶斯推理根据两个前因式的结果来得到后验概率：一个先验概率；一个由观测数据的统计模型得出的似然函数。贝叶斯推理根据贝叶斯公式来计算后验概率。\n贝叶斯公式：\nP(H|E) = \\frac{{P(E|H) \\cdot P(H)}}{{P(E)}} 上述公式中：\n $H$代表其概率可能受到数据（下称证据evidence)影响的任何假设。通常这些假设是相互竞争的，而我们的任务就是决定哪一个是最有可能的。 $P(H)$,先验概率(prior probability),是在数据$E$（即当前得到的证据）被观测到前，对假设$H$的概率估计。 $E$,即证据(evidence),指那些未被用于计算先验概率的新数据。 $P(H|E)$，后验概率（posterior probability），是指$H$给予$E$以后的概率，即在观测到证据$E$以后，更新的概率。后验概率就是我们想要得到的：在当前观测到的证据下，某个假设发生的概率有多大。 $P(E|H)$, 是在假设$H$的前提下观测到证据$E$的概率，被称为似然函数(likelihood)。作为固定$H$下$E$的函数，它体现了当前证据与给定假设的相容性。似然函数是证据$E$的函数，而后验概率是假设$H$的函数。 $P(E)$，被称作边际似然函数或者模型证据。该因子对所有被考虑到的可能的假设都相同（可以明显的看出，符号表达式中并没有$H$），所以该因子不会影响各个假设间的相对概率。  对于不同的$H$，只有$P(H)$和$P(E|H)$这两项在分子上的因子会影响后验概率$P(H|E)$的值。也就是说，后验概率与其先验概率（固有的可能性）和新获得的似然函数（与新获得的证据的相容性）成正比。\n贝叶斯规则也可以被写成如下形式：\n\\frac{{P(E|H)P(H)}}{{P(E)}} = \\frac{{P(E|H)P(H)}}{{P(E|H)P(H) + P(E|\\neg H)P(\\neg H)}} = \\frac{1}{{1 + (\\frac{1}{{P(H)}} - 1)\\frac{{P(E|\\neg H)}}{{P(E|H)}}}} 这是由于：\nP(E) = {P(E|H)P(H) + P(E|\\neg H)P(\\neg H)} P(H)+P(\\neg H)=1 贝叶斯推理的形式化描述(Formal description of Bayesian inference) 定义 Definitions  $x$： 一个数据点，事实上可能是一个值向量vector。 $\\theta$，数据点所对应的分布的参数，即$x \\sim p(x|\\theta)$。事实上，$\\theta$可能是许多参数组成的向量。 $\\alpha$，参数分布的超参数，即$\\theta \\sim p(\\theta | \\alpha)$。可能是由很多超参数构成的一个向量。 $X$代表采样，一个由$n$个观测的数据点构成的集合。即$x_1,...,x_n$ ${\\tilde x}$，一个新的数据点，其分布需要被预测。  贝叶斯推理 Bayesian inference  先验分布 prior distribution，是指参数在没有任何新数据被观测到的情况下的概率分布，即$p(\\theta|\\alpha)$。先验分布可能不容易确定，在这种情况下，我们可以先采用Jeffrets Prior去获得一个先验分布的初始值，然后使用观测到的数据进行更新迭代。 采样分布 sample distribution，是指观测数据$X$在其参数条件下的分布，即$p(X|\\theta)$，更确切的说，由于$\\theta$服从参数条件$\\alpha$下的概率分布，采样分布也可以写为$p(X|\\theta,\\alpha)$。但是为了不引起歧义与混淆，我们一般都写为$p(X|\\theta)$。采样分布有时候也被称为似然函数, 尤其是当其被视为是参数$\\theta$的函数时。有时候写作$L(\\theta|X) = p(X|\\theta)$。 边际似然函数 marginal likelihood，有时也被称为证据evidence，是观测数据marginalized out $\\theta$后得到的边缘分布，即$p(X|\\alpha ) = \\int_\\theta {p(X|\\theta )p(\\theta |\\alpha )d\\theta }$ 后验分布 posterior distribution 是指在考虑新观测的数据后的参数分布。它由贝叶斯规则决定，形成了贝叶斯推理的核心。  p(\\theta |X,\\alpha ) = \\frac{{p(\\theta ,X,\\alpha )}}{{p(X,\\alpha )}} = \\frac{{p(X|\\theta ,\\alpha )p(\\theta ,\\alpha )}}{{p(X|\\alpha )p(\\alpha )}} = \\frac{{p(X|\\theta ,\\alpha )p(\\theta |\\alpha )}}{{p(X|\\alpha )}} \\propto p(X|\\theta ,\\alpha )p(\\theta |\\alpha ) 用语言描述就是：后验正比于先验乘以似然。 后验等于似然乘以先验除以证据。\n \u0026ldquo;posterior is proportional to likelihood times prior\u0026rdquo;, or sometimes as \u0026ldquo;posterior = likelihood times prior, over evidence\u0026rdquo;\n 贝叶斯预测 Bayesian Prediction  后验预测分布 Posterior predictive distribution，是新的数据点的概率分布。通过将后验概率边缘化而得到的。  p(\\tilde x|X,\\alpha ) = \\int {p(\\tilde x|\\theta )p(\\theta |X,\\alpha )d\\theta }  先验预测分布 Prior predictive distribution， 是新的数据点的概率分布，在先验概率上边缘化得到的。  p(\\tilde x|\\alpha ) = \\int {p(\\tilde x|\\theta )p(\\theta |\\alpha )d\\theta } 贝叶斯理论要求使用后验预测分布来进行预测推断，即预测新的，未观测到的数据点的分布。也就是说，不再将一个固定点作为预测结果，而是返回一个可能点的分布。 只有这样才能使用参数$\\theta$的整个后验分布。相比之下，频率统计学中的预测常常需要寻找当前参数下的一个最优点估计，例如通过最大似然或者最大后验估计（MAP）。然后将这个最优点代入点的分布公式中。这样做的缺点是，它没有考虑任何参数的不确定性，所以会降低预测分布的方差。\n两种类型的预测分布都有复合概率分布的形式（所以才有边际似然函数）。事实上，如果先验分布是共轭先验，那么先验分布和后验分布便来自于同一族，可以很容易看出，先验预测分布和后验预测分布同样来自于同一族的复合分布。唯一的不同在于，后验预测分布使用超参数更新后的值，而先验预测分布使用先验分布中出现的超参数的值。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"边际似然函数 统计学中，边际似然函数（marginal likelihood function 或 integrated likelihood）是一种似然函数，其中某些参数变量被边缘化。在贝叶斯统计的背景下，它常常代指证据evidence或模型证据model evidence。\n概念 给定一组独立同分布的数据点$X = ({x_1}, \\ldots ,{x_n})$,其中${x_i} \\sim p({x_i}|\\theta )$,$p({x_i}|\\theta )$是一个概率分布，其参数为$\\theta$，其中$\\theta$本身就是一个随机变量，可以用一个概率分布来描述，即$\\theta \\sim p(\\theta |\\alpha )$。而边际似然函数就是求概率$p(X|\\alpha)$是多少，其中参数$\\theta$被边缘化（marginalized out)而消失:\np(X|\\alpha ) = \\int_\\theta {p(X|\\theta )p(\\theta |\\alpha )d\\theta } 上述定义是在贝叶斯统计下提出的。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Sinkhorn算法 Sinkhorn 算法描述了任意一个正矩阵(元素均为正)与双随机矩阵之间的关系。\n简略描述  Relations between arbitrary positive matrices and Doubly stochastic matrices. 如果A是一个正矩阵，那么通过交替的进行行归一化和列归一化，可以将其转换为一个转移矩阵(双随机矩阵)。\n  if A is a positive Matrix, alternately applies row-normalization and column-normalization will convert A to a doubly stochastic matrices.\n ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"今日收获 收获  可以使用TopK来代替NearestNeighbor，可以加快计算的速度。  问题 今天的主要问题还是：KNN的反向传播问题。不论是KNN还是TopK，都无法反向传播梯度，为整体训练带来困难。\n找到两个非常有用的网页：\n  https://discuss.pytorch.org/t/use-topk-as-a-selection-but-fail-to-autograd/58004\n  https://discuss.pytorch.org/t/k-nearest-neighbor-in-pytorch/59695\n  ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"高斯混合模型 混合模型概述  In statistics, a mixture model is a probabilistic model for representing the presence of subpopulations within an overall population, without requiring that an observed data set should identify the sub-population to which an individual observation belongs. Formally a mixture model corresponds to the mixture distribution that represents the probability distribution of observations in the overall population. However, while problems associated with \u0026ldquo;mixture distributions\u0026rdquo; relate to deriving the properties of the overall population from those of the sub-populations, \u0026ldquo;mixture models\u0026rdquo; are used to make statistical inferences about the properties of the sub-populations given only observations on the pooled population, without sub-population identity information.\n 从统计学角度来说，一个混合模型就是一种概率模型，用于表示总体当中子总体的存在，而不需要观测数据集识别出这个观测数据属于哪一个子总体(子分布)。\n形式上讲，对应混合分布的一个混合模型，就代表了这个总体的概率密度分布。然而，但需要从子总体的性质推导总体的一些性质时，混合模型能够直接根据总体池的观测值来对子总体的特性进行统计推断，而不需要知道他们的归属信息(属于哪一个子总体)。\nMixture Model Structure  A typical finite-dimensional mixture model is a hierarchical model consisting of the following components:\n N random variables that are observed, each distributed according to a mixture of K components, with the components belonging to the same parametric family of distributions (e.g., all normal, all Zipfian, etc.) but with different parameters N random latent variables specifying the identity of the mixture component of each observation, each distributed according to a K-dimensional categorical distribution A set of K mixture weights, which are probabilities that sum to 1. A set of K parameters, each specifying the parameter of the corresponding mixture component. In many cases, each \u0026ldquo;parameter\u0026rdquo; is actually a set of parameters. For example, if the mixture components are Gaussian distributions, there will be a mean and variance for each component. If the mixture components are categorical distributions (e.g., when each observation is a token from a finite alphabet of size V), there will be a vector of V probabilities summing to 1.  In addition, in a Bayesian setting, the mixture weights and parameters will themselves be random variables, and prior distributions will be placed over the variables. In such a case, the weights are typically viewed as a K-dimensional random vector drawn from a Dirichlet distribution (the conjugate prior of the categorical distribution), and the parameters will be distributed according to their respective conjugate priors.\n 一个典型的有限维度的混合模型是一个分层的模型，有着如下的components:\n $N$个被观测的随机变量random variables，每个随机变量都按$K$个子分布(component)构成的混合模型而分布，这些子分布都属于同一类分布，但是具体的参数值不同。 $N$个隐变量latent variables，每一个隐变量都说明了对应的随机变量所属的子分布是哪一个。每一个隐变量都按$K$维分类分布（即隐变量的取值只有$K$个） $K$个混合权重，每个混合权重指定了某个子分布所占的总体的权重。混合权重的和加起来应等于1. $K$个参数组，每一个参数组都对应着一个子分布。如高斯混合模型中，每个参数组中的参数有均值和方差。  此外，在贝叶斯假设下，混合权重和参数组将本身就是随机变量，每个都会有一个先验分布。在这种情况下，混合权重可以被视为一个$K$维的随机向量，由狄利克雷分布(分类分布的共轭先验)得出，而参数组将根据各自的先验共轭分布而分布。（关于先验概率与后验概率在这里不表。）\n从数学角度出发，一个基础的参数化的混合模型可以被以下参数所描述： 参数解读：\n$K$ 表示mixture component的个数，即混合分布中子分布的个数。\n$N$ 表示被观测的随机变量的个数。\n${\\theta _{{\\rm{i}} = 1...K}}$表示第$i$个子分布component的参数值。\n${\\phi _{{\\rm{i}} = 1...K}}$表示混合权重，即某个具体的子分布component的先验概率。\n$\\Phi$表示由${\\phi _{{\\rm{i}} = 1...K}}$组成的K维向量，和为1.\n${z _{{\\rm{i}} = 1...N}}$表示第$i$个观测值所属的component(子分布)。\n${x _{{\\rm{i}} = 1...N}}$表示第$i$个观测的随机变量。\n$F(x|\\theta )$表示某个被观测的随机变量在参数组为$\\theta$下的概率分布。\n${z _{{\\rm{i}} = 1...N}}$服从以$\\Phi$为概率的分类分布（共$K$类）。 即：${z_{i = 1...N}} \\sim Categorical(\\Phi )$\n${x_{i = 1...N}}|{z_{i = 1...N}}$ 服从$F(\\theta _{z_i} )$，即随机变量$x_i$服从其对应component（子分布）$z_i$的参数组$\\theta _{z_i}$指定的概率分布。\n注意：以上参数都是在不是在贝叶斯假设下的。\n在贝叶斯假设下，所有参数都与随机变量相关，如下图： 参数解读：\n$K$： 同上\n$N$： 同上\n$\\theta _{i=1...K}$： 同上\n$\\phi _{i=1...K}$： 同上\n$\\Phi$： 同上\n$z _{i=1...N}$：同上\n$x_{i=1...N}$：同上\n$F(x|\\theta)$：同上\n$\\alpha$：各子分布component参数的共用的超参数\n$\\beta$: 混合权重的共用的超参数\n$H(\\theta|\\alpha)$： 子分布component参数的先验概率分布，基于参数$\\alpha$。\n$\\theta _{i=1...K}$： 服从概率分布$H(\\theta|\\alpha)$,即$ \\theta _ {i=1...K} \\sim H(\\theta|\\alpha)$\n$\\Phi$： 服从$Symmetric-Dirichlet _K(\\beta)$分布。\n$z_{i=1...N}|\\Phi$：服从$Categorical(\\phi)$，即以$\\Phi$为概率的分类分布。\n$x_{i=1...N}|z_{i=1...N},\\theta_{i=1...K}$：服从$F(\\theta_{z_i})$的分布。\n我们使用$F$和$H$来对观测值和参数进行任意描述。一般来说，$H$是$F$的共轭先验。两个最常见的$F$的选择是：高斯分布，即正态分布（对实值观测值），或者是分类分布（对离散观测值）。其他常见的可以作为混合组件的概率分布有：\n 二项分布Binomial distribution: 对于某一事物总数固定，统计其positive occurrence。如投票等。 多项分布Multinomial distribution： 类似于二项分布，不过事情的结果可能不止有两个。 负二项分布Negative binomial distribution： 对于二项分布类型的观测值，感兴趣的是在某个给定的次数的positive结果出现前，negative结果出现的次数。 泊松分布Poisson distribution：统计某一事件在给定时间内发生的次数，该事件具有固定的发生率。 指数分布Exponential distribution：某个事件下一次出现所需要的的时间的分布，该事件具有固定的发生率。 对数正态分布Log-normal distribution： 用于那些假定呈指数增长的正实数，如收入或者价格。 多元正态分布Multivariate normal distribution：即多元高斯分布。结果向量的每一个分量都是一个高斯分布。 多元t分布Multivariate Student's-t distribution：用于重尾相关结果的向量。 伯努利分布值的向量，对应于例如黑白图像，每个值代表一个像素，可应用于手写识别。  非贝叶斯假设下的高斯混合模型 其各个参数为：\n对应上文很容易理解，不再赘述。\n图示： 贝叶斯假设下的高斯混合模型 其各个参数为：\n其中值得特殊说明的是：\n${\\mu _0},\\lambda ,\\nu ,\\sigma _0^2$: 是$\\theta$即$\\mu $与$\\sigma$共享的超参数。\n$\\mu_{i=1...K}$：$\\mu_{i=1...K} \\sim N(\\mu_0,\\lambda\\sigma _i^2)$,即参数$\\mu$服从以$mu_0,\\lambda\\sigma _i^2$为参数的高斯分布。\n$\\sigma_{i=1...K}^2$：$\\sigma_{i=1...K}^2 \\sim Inverse-Gamma(\\nu,\\sigma_0^2)$。\n多元高斯混合模型 一个贝叶斯高斯混合模型常常被推广去拟合未知的参数向量(下面用粗体表示），或者多元正态分布。在多元分布中（即对具有$N$个随机变量的向量$\\bm{x}$），我们可以使用高斯混合模型的先验分布的矢量估计来对该$\\bm{x}$进行建模：\n其中第$i$个向量子分布component被权重为${\\phi _i}$,方差为$\\bm{\\mu}$，协方差矩阵为$\\bm{\\sum _i}$的正态分布所定义。为了将这个先验分布纳入贝叶斯估计，这个先验要与已知的分布$p(\\bm{x}|\\bm{\\theta})$相乘，该分布是数据$\\bm{x}$在待估参数$\\bm{\\theta}$上的分布。根据如上阐述，那么后验分布$p(\\bm{\\theta}|\\bm{x})$也是一个高斯混合分布：\np(\\bm{\\theta} |\\bm{x}) = \\sum\\limits_{i = 1}^K {{{\\tilde \\phi }_i}N({\\bm{\\tilde \\mu }_i},{\\bm{\\tilde \\Sigma }_i})} 其中的参数：${\\tilde \\phi }_i$，${\\bm{\\tilde \\mu }_i}$和${\\bm{\\tilde \\Sigma }_i}$可以使用EM算法进行更新。虽然关于EM算法的参数更新已经很完善了，但是提供对这些参数的初始估计仍然是一个十分活跃的研究领域。必须说明的是，该公式产生了一个完全后验分布的一个封闭形式的解。随机变量$\\bm{\\theta}$的估计值可以通过取其中几个估计量的其中一个来获得，如取后验分布的均值或者最大值。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"What is reinforcement learning a computational approach to learning whereby an agent tries to maximize the total amount of reward it receives while interacting with a complex and uncertain environment.\nDifference between Reinforcement Learning and Supervised Learning  Sequential data as input(not i.i.d) 序列化输入 The learner is not told which actions to take, but instead must discover which actions yield the most reward by trying them. Trial-and-error exploration(balance between exploration and exploitation) There is no supervisor, only a reward signal, which is also delayed.  Features of Reinforcement Learning  Trial-and-error exploration Delayed reward Time matters (sequential data, non i.i.d data) Agent’s actions affect the subsequent data it receives (agent’s action changes the environment)  ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%BA%B2%E8%A6%81introtorl%E7%AC%94%E8%AE%B0/","title":"强化学习纲要(IntroToRL)笔记"}]