[{"content":"DCP论文阅读笔记 论文  Deep Closest Point: Learning Representations for Point Cloud Registration\nAuthor: Wang, Yue; Solomon, Justin\n Main Attribution 基于ICP迭代最近点算法，提出基于深度学习的DCP算法。解决了ICP想要采用深度学习方法时遇到的一系列问题。\n我们先回顾一下ICP算法的基本步骤：\nfor each iteration: find corresponding relations of points between two scan(using KNN) using SVD to solve Rotation Matrix and Translation vector update cloud Data 概括起来就是： 寻找最近点对关系，使用SVD求解刚体变换。如此循环往复。\n结合论文，个人理解将ICP算法扩展到深度学习存在着以下的难点（可能存在各种问题，笔者深度学习的相关知识很薄弱）：\n 首先，点对关系如果是确定的话，沿着网络反向传播可能存在问题。 SVD分解求解刚体变换，如何求梯度？(Confirmed by paper)  而文章克服了这些问题，主要有如下贡献：\n 提出了能够解决传统ICP算法试图推广时存在的困难的一系列子网络架构。 提出了能进行pair-wise配准的网络架构 评估了在采用不同设置的情况下的网络表现 分析了是global feature有用还是local feature对配准更加有用  网络架构 模型包含三个部分：\n(1) 一个将输入点云映射到高维空间embedding的模块，具有扰动不变性（指DGCNN当点云输入时点的前后顺序发生变化，输出不会有任何改变） 或者 刚体变换不变性（指PointNet对于旋转平移具有不变的特性）。该模块的作用是寻找两个输入点云之间的点的对应关系. 可选的模块有PointNet（Focus于全局特征）， DGCNN（结合局部特征和全局特征）。\n(2) 一个基于注意力attention的Pointer网络模块，用于预测两个点云之间的soft matching关系(类似于一种基于概率的soft match，之所以soft是由于它并没有显式规定点$x_i$必须与哪个点$x_j$有对应关系，而是通过一个softmax得到的各点和某点$x_i$存在对应关系的概率乘以各点数据，得到一个类似于概率的对应点坐标。 该模块采用的是Transformer(3) 一个可微的SVD分解层，用于输出刚体变换矩阵。\n问题阐述 熟悉点云配准的同学应该知道，问题十分清晰。这里直接粘一下原文。\n值得一提的是，作者分析了一下ICP的算法步骤。和我们上面描述的一样。就是用上次更新后的信息寻找最近关系，然后用寻找到的对应关系SVD求解得到$R,t$.所以如果初始值一开始生成的是很差的corresponding relation，那么一下就会陷入局部最优。\n而作者的思路就是：使用学习的网络来得到特征，通过特征获得一个更好的对应关系$m(\\cdot)$，用这个$m(\\cdot)$去计算刚体变换信息。代码分析与对应模块详解 我们采用一种Top-Down的视角来分析整个代码。先从整体入手，然后逐渐拆解模块进行分析。\n整体模块 DCP网络结构分为三个Part，从代码中就可以很清晰的看出来：第一个Module模块emd_nn用于抽象特征，第二个Module模块pointer用于match,第三个Module模块head用于求解刚体变换矩阵，具体代码如下：\nclass DCP(nn.Module): def __init__(self, args): # args 是一个存放各种参数的namespace super(DCP,self).__init__() self.emb_dims = args.embdims # 欲抽象到的特征维度，default为 512 self.cycle = args.cycle # ba的刚体变换关系是否重新进入网络计算 if args.emb_nn == \u0026#39;pointnet\u0026#39;: # emb_nn就是上文所说的第一个模块,若选择PointNet self.emb_nn = PointNet(emb_dims=self.emb_dims) elif args.emb_nn == \u0026#39;dgcnn\u0026#39;: # 若选择DGCNN self.emb_nn = DGCNN(emb_dims=self.emb_dims) else: raise Exception(\u0026#39;Not implemented\u0026#39;) # 其他网络尚未实现 if args.pointer == \u0026#39;identity\u0026#39;: # 不使用Transformer, hard match self.pointer = Identity() elif args.pointer == \u0026#39;transformer\u0026#39;: # soft matching by tranformer self.pointer = Transformer(args = args) else: raise Exception(\u0026#39;Not implemented\u0026#39;) if args.head == \u0026#39;mlp\u0026#39;: # 直接用MLP预测输出矩阵 self.head = MLPHead(args=args) elif args.head == \u0026#39;svd\u0026#39;: # 使用可微的SVD分解层 self.head = SVDHead(args=args) else: raise Exception(\u0026#34;Not implemented\u0026#34;) def forward(self, *input): src = input[0] tgt = input[1] src_embedding = self.emb_nn(src) tgt_embedding = self.emb_nn(tgt) # Module Part 1 src_embedding_p, tgt_embedding_p = self.pointer(src_embedding, tgt_embedding) # Module Part 2 src_embedding = src_embedding + src_embedding_p tgt_embedding = tgt_embedding + tgt_embedding_p rotation_ab, translation_ab = self.head(src_embedding, tgt_embedding, src, tgt) # Module Part 3 if self.cycle: rotation_ba, translation_ba = self.head(tgt_embedding, src_embedding, tgt, src) else: rotation_ba = rotation_ab.transpose(2,1).contiguous() translation_ba = -torch.matmul(rotation_ba, translation_ab.unsqueeze(2)).squeeze(2) return rotation_ab, translation_ab, rotation_ba, translation_ba 用于抽象feature的Module1：emb_nn 考虑emb_nn，我们有两个选择： 其一是PointNet， 其二是DGCNN.\nPointNet抽象的特征是global feature， 而DGCNN结合了local feature和global feature.\n我们希望得到的是对每一个点抽象而得的特征（即每一个点都有其embedding)，并利用两个点云之间点的embedding来生成映射关系（即Match关系）. 所以我们要得到的是per-point feature而不是one feature per cloud。\n出于上述原因，我们在最后一层的聚合函数aggregation function之前生成每个点的representation。 $$ F_X = {x_1^L,x_2^L, \u0026hellip;, x_i^L,\u0026hellip;,x_N^L} $$ $$ F_Y = {y_1^L, y_2^L, \u0026hellip;, y_i^L, \u0026hellip;, y_N^L} $$ 上标L代表第L层的输出（假定共有L层）。\nPointNet $x_i^l$是第$i$个点在第$l$层后的embedding，而$h_{\\theta}^l$是第$l$层的非线性映射函数。PointNet的forward mechanism可以用如下公式给出： $$ x_i^l = h_{\\theta}^l(x_i^{l-1}) $$ 作者@WangYue在github上公布的代码，使用的PointNet的网络架构如下：\nclass PointNet(nn.Module): def __init__(self, emb_dims=512): super(PointNet, self).__init__() self.conv1 = nn.Conv1d(3, 64, kernel_size=1, bias=False) self.conv2 = nn.Conv1d(64, 64, kernel_size=1, bias=False) self.conv3 = nn.Conv1d(64, 64, kernel_size=1, bias=False) self.conv4 = nn.Conv1d(64, 128, kernel_size=1, bias=False) self.conv5 = nn.Conv1d(128, emb_dims, kernel_size=1, bias=False) self.bn1 = nn.BatchNorm1d(64) self.bn2 = nn.BatchNorm1d(64) self.bn3 = nn.BatchNorm1d(64) self.bn4 = nn.BatchNorm1d(128) self.bn5 = nn.BatchNorm1d(emb_dims) def forward(self, x): x = F.relu(self.bn1(self.conv1(x))) x = F.relu(self.bn2(self.conv2(x))) x = F.relu(self.bn3(self.conv3(x))) x = F.relu(self.bn4(self.conv4(x))) x = F.relu(self.bn5(self.conv5(x))) return x 从上述代码中，可以看出，作者使用的PointNet并没有input-transform和feature-transform这两个Module，相当于只应用MLP不断对输入点云进行抽象，直到高维空间。 存疑：为什么不加Transform-Net？ 如果加上效果训练效果如何? 没有cat，cat之后效果如何？DGCNN DGCNN是作者@WangYue提出的一种网络架构，其特点是EdgeConv。可以结合全局特征与局部特征。 $$ x_i^l = f({{} h_{\\theta}^l(x_i^{l-1},x_j^{l-1}); \\forall j \\in N_i {}}) $$ $f$是每一层后的聚合函数。$N_i$指的是和点$x_i$存在KNN关系的点的集合。\nget_graph_feature是返回egde-feature的函数。这并不是我们关注的重点，代码简要粘贴一下。\ndef knn(x, k): inner = -2 * torch.matmul(x.transpose(2, 1).contiguous(), x) xx = torch.sum(x ** 2, dim=1, keepdim=True) pairwise_distance = -xx - inner - xx.transpose(2, 1).contiguous() idx = pairwise_distance.topk(k=k, dim=-1)[1] # (batch_size, num_points, k) return idx def get_graph_feature(x, k=20): # x = x.squeeze() idx = knn(x, k=k) # (batch_size, num_points, k) batch_size, num_points, _ = idx.size() device = torch.device(\u0026#39;cuda\u0026#39;) idx_base = torch.arange(0, batch_size, device=device).view(-1, 1, 1) * num_points idx = idx + idx_base idx = idx.view(-1) _, num_dims, _ = x.size() x = x.transpose(2, 1).contiguous() # (batch_size, num_points, num_dims) -\u0026gt; (batch_size*num_points, num_dims) # batch_size * num_points * k + range(0, batch_size*num_points) feature = x.view(batch_size * num_points, -1)[idx, :] feature = feature.view(batch_size, num_points, k, num_dims) x = x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1) feature = torch.cat((feature, x), dim=3).permute(0, 3, 1, 2) return feature 而网络中使用的DGCNN代码如下：\nclass DGCNN(nn.Module): def __init__(self, emb_dims=512): super(DGCNN, self).__init__() self.conv1 = nn.Conv2d(6, 64, kernel_size=1, bias=False) self.conv2 = nn.Conv2d(64, 64, kernel_size=1, bias=False) self.conv3 = nn.Conv2d(64, 128, kernel_size=1, bias=False) self.conv4 = nn.Conv2d(128,256, kernel_size=1, bias=False) self.conv5 = nn.Conv2d(512, emb_dims, kernel_size=1, bias=False) self.bn1 = nn.BatchNorm2d(64) self.bn2 = nn.BatchNorm2d(64) self.bn3 = nn.BatchNorm2d(128) self.bn4 = nn.BatchNorm2d(256) self.bn5 = nn.BatchNorm2d(emb_dims) def forward(self,x): batch_size, num_dims, num_points = x.size() x = get_graph_feature(x) x = F.relu(self.bn1(self.conv1(x))) x1 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn2(self.conv2(x))) x2 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn3(self.conv3(x))) x3 = x.max(dim=-1, keepdim=True)[0] x = F.relu(self.bn4(self.conv4(x))) x4 = x.max(dim=-1, keepdim=True)[0] x = torch.cat((x1, x2, x3, x4), dim=1) x = F.relu(self.bn5(self.conv5(x))).view(batch_size, -1, num_points) return x 可以明显发现与原DGCNN不同的地方是: 作者这里每次forward前传时，并没有再对抽象出来的feature寻找knn进行进一步抽象。而是单纯的不断经过MLP。对比一下该部分原代码：\nx = get_graph_feature(x, k=self.k) # (batch_size, 3, num_points) --\u0026gt; (batch_size, 3*2, num_points, k) x = self.conv1(x) # (batch_size, 3*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x1 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x1, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv2(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x2 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x2, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv3(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 128, num_points, k) x3 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 128, num_points, k) --\u0026gt; (batch_size, 128, num_points) x = get_graph_feature(x3, k=self.k) # (batch_size, 128, num_points) --\u0026gt; (batch_size, 128*2, num_points, k) x = self.conv4(x) # (batch_size, 128*2, num_points, k) --\u0026gt; (batch_size, 256, num_points, k) x4 = x.max(dim=-1, keepdim=False) # (batch_size, 256, num_points, k) --\u0026gt; (batch_size, 256, num_points) x = torch.cat((x1, x2, x3, x4), dim=1) # (batch_size, 64+64+128+256, num_points) 差别十分明显。相当于网络结构中红框的部分消失了： 此处同样存疑，作者在论文里未提及此细节。\n用于Match（寻找点对关系）的Module2 Transformer ","date":"2020-12-22T00:00:00Z","permalink":"https://codefmeister.github.io/p/dcp%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"DCP论文阅读笔记"},{"content":"torch.unsqueeze()函数解读 语法 torch.unsqueeze(input, dim) --\u0026gt; Tensor\nParameters   input(Tensor) \u0026ndash; the input tensor\n  dim(int) \u0026ndash; the index at which to insert the singleton dimension\n  功能  Return a new tensor with a dimension of size one inserted at the specified position.\n 返回一个新的tensor，在指定的位置插入维度为1的一维。\n The returned tensor shares the same underlaying data with this tensor.\n 返回的这一Tensor在内存中是和原Tensor共享一个内存数据的。(可以用contiguous来重新分配)\n A dim value within the range [-input.dim() - 1, input.dim() + 1) can be used. Negative dim will correspond to unsqueeze() applied at dim = dim + input.dim() + 1\n dim的取值范围是[-input.dim() - 1, input.dim() + 1). 负的dim值将被映射到dim + input.dim() + 1这一位置去。就相当于$-n$就是从最右往左数第$n$个位置。(-1就是最右插入的位置)\nExample \u0026gt;\u0026gt;\u0026gt; x = torch.tensor([1,2,3,4]) \u0026gt;\u0026gt;\u0026gt; print(x.shape) torch.Size([4]) \u0026gt;\u0026gt;\u0026gt; y = torch.unsqueeze(x,0) \u0026gt;\u0026gt;\u0026gt; print(y.shape) torch.Size([1, 4]) \u0026gt;\u0026gt;\u0026gt; z = torch.unsqueeze(x,1) \u0026gt;\u0026gt;\u0026gt; print(z.shape) torch.Size([4, 1]) ","date":"2020-12-22T00:00:00Z","permalink":"https://codefmeister.github.io/p/torch.unsqueeze%E8%A7%A3%E8%AF%BB/","title":"torch.unsqueeze()解读"},{"content":"DGCNN 前言 因为关心的领域主要是配准，对于分类等网络的架构设计分析并没有侧重太多，主要侧重的是EdgeConv的思想。\n论文  Dynamic Graph CNN for Learning on Point Clouds, Wang, Yue and Sun, Yongbin.\n 核心思想:关于EdgeConv 将点云表征为一个图，${\\rm{G}}(V,\\xi )$ ,点云的每一个点对应图中的一个结点，而图中的每一条边对应的是点之间的特征feature，称为Edge-feature。举个例子，最简单的情景，可以通过KNN来构建图。Edge Feature用$e_{ij}$来表示，定义为： $$ e_{ij} = h_{\\Theta}(x_i,x_j) $$ $$ h_{\\Theta}: {R^F} \\times {R^F} \\to {R^{F'}} $$ $h_{\\Theta}$是一个非线性的映射，拥有一系列可学习的参数。\n提出了一个名为EdgeConv的神经网络模块Module，该模块基于卷积神经网络，可以适应在点云上的高阶任务。EdgeConv的对于第i个顶点的输出为：\n其中$□$代表的是一个对称聚合函数，如$\\Sigma, max$。\n可以将上述描述类比为在图像上的卷积操作。我们把$x_i$看作是中心像素点，而$x_j:(i,j) \\in \\xi$可以看做是围绕在点$x_i$周围的像素($x_j$事实上就是和$x_i$之间存在着feature edge的点）。所以类比这样的卷积操作，Edge-Conv可以将n个点的$F$维点云通过“卷积”转换为具有n个点的$F'$维的点云。 所以选择$h$和$□$就变得十分关键。它会直接影响EdgeConv的性能特性。\n一些其他的选择在下一个小part中讨论。在本文中，作者采用的： $$ h_{\\Theta}(x_i,x_j) = {\\bar h}_{\\Theta}(x_i, x_j - x_i) $$\n从这个表达式可以非常明显的看出，既结合了全局形状结构，也结合了局部的结构信息。Global shape structure通过$x_i$捕捉，local neighborhood information通过$x_j - x_i$来捕捉。\n更具体一点的说，通过如下两个公式来计算edge_feature以及x'： $$ e_{ijm}' = ReLU(\\theta_m \\cdot(x_j - x_i) + \\phi_m \\cdot x_i) $$ $$ x_{im}' = \\mathop {\\max }\\limits_{j:(i,j) \\in \\xi }e_{ijm}' $$\n可以通过shared MLP实现。$\\Theta = (\\theta_1, \u0026hellip;, \\theta_M,\\phi_1, \u0026hellip;, \\phi_M)$\n文中采用了Dynamic Graph Update，即动态图更新。在每一层计算结束得到新的$x'$后，会根据在特征空间上的最近邻(其实就是x\u0026rsquo;间的欧式距离)关系，动态更新图。这也是该文章命名的由来。动态更新可以使得EdgeConv的感受野变得越来越大，与点云的直径一样大，同时还很稀疏。\n在每一层之后，根据新的特征点云$x'$，在特征空间上的距离，对于每一个点，使用KNN寻找其k个最近点，重新构建Feature Edge。\n网络结构 网络结构的整体结构并不是我关注的重点。作者给出的网络结构有两个：一个用于classification,一个用于segmentation。\n同时，需要说明的是，作者在Sec.4中描述的网络结构与贴的图不一致。这里采用的是修正后的网络结构图。 部分关键代码 寻找KNN，获得feature_edge的代码：\ndef knn(x,k): inner = -2 * torch.matmul(x.transpose(2, 1), x) xx = torch.sum(x**2, dim=1, keepdim=True) pairwise_distance = -xx - inner - xx.transpose(2, 1) idx = pairwise_distance.topk(k=k, dim=-1)[1] #(batch_size, num_points, k) return idx def get_graph_feature(x, k=20, idx=None, dim9 = False): # x: (batch_size, 3, num_points) batch_size = x.size(0) num_points = x.size(2) x = x.view(batch_size, -1, num_points) if idx is None: if dim9 == False: idx = knn(x, k=k) else: idx = knn(x[:, 6:], k=k) device = torch.device(\u0026#39;cuda\u0026#39;) idx_base = torch.arange(0, batch_size, device=device).view(-1,1,1)*num_points idx = idx + idx_base idx = idx.view(-1) _,num_dims,_ = x.size() x = x.transpose(2,1).contiguous() # (batch_size, num_points, num_dims) --\u0026gt; (batch_size*num_points, num_dims) feature = x.view(batch_size*num_points, -1)[idx, :] # KNN feature = feature.view(batch_size, num_points, k, num_dims) x = x.view(batch_size, num_points, 1, num_dims).repeat(1,1,k,1) feature = torch.cat((feature-x, x), dim=3).permute(0, 3, 1, 2).contiguous() return feature # (batch_size, 2*num_dims, num_points, k) 下面这部分代码是分类网络，从中可以窥到EdgeConv以及动态更新的机制:\nclass DGCNN_cls(nn.Module): def __init__(self, args, output_channels = 40): super(DGCNN_cls, self).__init__() self.args = args self.k = args.k self.bn1 = nn.BatchNorm2d(64) self.bn2 = nn.BatchNorm2d(64) self.bn3 = nn.BatchNorm2d(128) self.bn4 = nn.BatchNorm2d(256) self.bn5 = nn.BatchNorm1d(args.emb_dims) self.conv1 = nn.Sequential(nn.Conv2d(6,64, kernel_size = 1, bias = False), self.bn1, nn.LeakyReLU(negative_slope=0.2)) self.conv2 = nn.Sequential(nn.Conv2d(64*2, 64, kernel_size=1, bias = False), self.bn2, nn.LeakyReLU(negative_slope=0.2)) self.conv3 = nn.Sequential(nn.Conv2d(64*2, 128, kernel_size=1, bias = False), self.bn3, nn.LeakyReLU(negative_slope=0.2)) self.conv4 = nn.Sequential(nn.Conv2d(128*2, 256, kernel_size=1, bias = False), self.bn4, nn.LeakyReLU(negative_slope=0.2)) self.conv5 = nn.Sequential(nn.Conv1d(512, args.emb_dims, kernel_size=1, bias=False), self.bn5, nn.LeakyReLU(negative_slope=0.2)) self.linear1 = nn.Linear(args.emb_dims*2, 512, bias=False) self.bn6 = nn.BatchNorm1d(512) self.dp1 = nn.Dropout(p=args.dropout) self.linear2 = nn.Linear(512, 256) self.bn7 = nn.BatchNorm1d(256) self.dp2 = nn.Dropout(p=args.dropout) self.linear3 = nn.Linear(256, output_channels) def forward(self, x): batch_size = x.size(0) x = get_graph_feature(x, k=self.k) # (batch_size, 3, num_points) --\u0026gt; (batch_size, 3*2, num_points, k) x = self.conv1(x) # (batch_size, 3*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x1 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x1, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv2(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 64, num_points, k) x2 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 64, num_points, k) --\u0026gt; (batch_size, 64, num_points) x = get_graph_feature(x2, k=self.k) # (batch_size, 64, num_points) --\u0026gt; (batch_size, 64*2, num_points, k) x = self.conv3(x) # (batch_size, 64*2, num_points, k) --\u0026gt; (batch_size, 128, num_points, k) x3 = x.max(dim=-1, keepdim=False)[0] # (batch_size, 128, num_points, k) --\u0026gt; (batch_size, 128, num_points) x = get_graph_feature(x3, k=self.k) # (batch_size, 128, num_points) --\u0026gt; (batch_size, 128*2, num_points, k) x = self.conv4(x) # (batch_size, 128*2, num_points, k) --\u0026gt; (batch_size, 256, num_points, k) x4 = x.max(dim=-1, keepdim=False) # (batch_size, 256, num_points, k) --\u0026gt; (batch_size, 256, num_points) x = torch.cat((x1, x2, x3, x4), dim=1) # (batch_size, 64+64+128+256, num_points) x = self.conv5(x) #(batch_size, 64+64+128+256, num_points) --\u0026gt; (batch_size, emb_dims, num_points) x1 = F.adaptive_max_pool1d(x, 1).view(batch_size, -1) # (batch_size, emb_dims, num_points) --\u0026gt; (batch_size, emb_dims) x2 = F.adaptive_avg_pool1d(x, 1).view(batch_size, -1) # (batch_size, emb_dims, num_points) --\u0026gt; (batch_size, emb_dims) x = torch.cat((x1, x2), 1) # (batch_size, emb_dims*2) x = F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2) # (batch_size, emb_dims*2) --\u0026gt; (batch_size, 512) x = self.dp1(x) x = F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2) # (batch_size, 512) --\u0026gt; (batch_size, 256) x = self.dp2(x) x = self.linear3(x) #(batch_size, 256) --\u0026gt; (batch_size, output_channels) return x 特性 置换不变性 考虑每一层的输出：\n每一层的输出$x_i'$是不会随着输入$x_j$的输入顺序改变而变化的。其原因在于max是一个对称的函数。\n平移不变性 EdgeConv有着部分额平移不变性。因为： $$ h_{\\Theta}(x_i,x_j) = {\\bar h}_{\\Theta}(x_i, x_j - x_i) $$ 从这个公式就可以看出，函数的一部分是Translation-dependent的，而另一部分是具有平移不变性的。\n用EdgeConv的理论重新审视其他网络 PointNet PointNet的特点是将每一个点进行单独处理，不断抽象到高维空间（这也正是其缺乏局部结构信息的缺陷来源）。 所以PointNet实际是本文理论的一种特殊情形。$k = 1, \\xi = \\emptyset$,采用的Edge Function实际上是：$h_{\\Theta}(x_i,x_j) = h_{\\Theta}(x_i)$.只考虑到Global feature而忽略了local geometry。\nPointNet++ PointNet++意识到了PointNet中存在的问题，所以它通过FPS采样，然后通过ball query构造局部点集，再通过PointNet抽象出局部特征。\nPointNet++ 首先通过欧氏距离来构建图Graph，然后每经过一个layer对图进行一次粗糙化。在每一层，首先通过FPS选取一些点，只有这些被选取的点将保留，其他的点都将被抛弃。通过这种方法，图会在每经过一层网络后变得越来越小。同时，PointNet++使用输入数据的欧式距离来计算点对关系，所以就导致了他们的图在整个训练过程中是固定的，而不是动态调整的（DGCNN一大特点就是动态图）。Edge Function是$h_{\\Theta}(x_i,x_j)=h_{\\Theta}(x_j)$\nMoNet 与 PCNN 笔者还未阅读这两篇论文。看的时候没什么概念。先留个坑。\n","date":"2020-12-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/dgcnn%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","title":"DGCNN论文解读"},{"content":"Conv1d与Conv2d 本文分为几个部分来详解Conv2d与Conv1d。主要侧重于Conv2d\n前言 本文记于2020年12月15日，起因是DGCNN中部分卷积使用了二维卷积，部分卷积使用了一维卷积。加之之前对Conv2d与Conv1d属于一种迷迷糊糊的状态，趁着这个机会弄清楚。\nConv2d原理（二维卷积层） 二维互相关运算 互相关运算与卷积运算 虽然卷积层得名于卷积(convolution)运算，但所有框架在实现卷积层的底层，都采用的是互相关运算。实际上，卷积运算与互相关运算类似，为了得到卷积运算的输出，我们只需要将核数组左右翻转并上下翻转，然后再与输入数组做互相关运算。所以这两种运算虽然类似，但是输出并不相同。\n但是由于深度学习中核数组都是学习得到的，所以卷积层无论使用互相关运算还是卷积运算，都不影响模型预测时的输出。也就是说我们用卷积运算学出的核数组与用互相关运算学出的核数组两者之间可以通过上下翻转，左右翻转来相互转换。所以在框架乃至于绝大部分深度学习文献中，都使用互相关运算来代替了卷积运算。\n互相关运算 在二维卷积层中，一个二维输入数组和一个二维核(kernel)数组通过互相关运算输出一个二维数组。举个例子来解释二维互相关运算：\n假设输入数组的高和宽均为3， 核数组的高和宽均为2，该数组在卷积运算中又称为卷积核或者过滤器(filter)。 19是这样得出的： $19 = 0\\times0 + 1\\times1 + 3\\times2 + 4\\times3$ 。\n卷积窗口从输入数组的最左上方开始，按照从左往右，从上往下的顺序，依次在输入数组上滑动。当卷积窗口滑动到某一位置时，窗口中的输入子数组与核数组按元素相乘并求和。得到输出数组中对应位置的元素。\n二维卷积层 二维卷积层将输入和卷积核做互相关运算，并加上一个标量偏差来得到输出。卷积层的模型参数包含了卷积核和标量偏差。我们在训练模型的时候，通常先对卷积层进行随机的初始化，然后不断迭代卷积核和偏差。\n卷积窗口形状为$p \\times q$的卷积层称为$p \\times q$卷积层。\n特征图与感受野 二维卷积层输出的二维数组可以看做是输入在空间维度上(宽和高)上某一级的表征，也叫特征图(feature map)。影响元素$x$的前向计算的所有可能输入区域(甚至可能大于输入的实际尺寸)叫做$x$的感受野(receptive field)。以上图为例，图中输入的阴影部分的四个元素就是输出数组中阴影部分元素的感受野。如果我们将该输出再和一个$2 \\times 2$的核数组做互相关运算，输出单个元素$z$。那么$z$在输入上的感受野包含全部的9个元素。\n可见，我们可以通过更深的卷积神经网络使特征图中单个元素的感受野变得更加广阔，从而捕捉输入上更大尺寸的特征。\n填充与步幅 卷积层的输出形状由输入形状和卷积核窗口形状决定，通过填充与步幅，我们可以改变给定形状的输入和卷积层下的输出形状。\n填充 填充padding是指在输入高和宽的两侧填充元素(通常是0元素)。如下图： 假设输入形状为$n_h \\times n_w$， 卷积核窗口形状是$k_h \\times k_w$，在高的两侧一共填充$p_h$行，在宽的两侧一共填充$p_w$列，那么输出形状将会是： $$ (n_h - k_h + p_h + 1) \\times (n_w - k_w + p_w + 1) $$ 很多情况下我们会设置$p_h = k_h -1$和$p_w = k_w - 1$来使得输入输出具有相同的高和宽。\n对于任意的二维数组X，当两端的填充个数相同，并使得输入和输出具有相同的高和宽时，我们就知道输出Y[i,j]是输入以X[i,j]为中心的窗口同卷积核进行互相关运算而得到的。\n步幅 卷积窗口从输入数组的最左上方开始，按照从左向右，从上向下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅(stride)。\n当高上步幅为$s_h$，宽上步幅为$s_w$时，输出形状为： $$ [(n_h - k_h + p_h + s_h)/s_h] \\times [(n_w - k_w +p_w +s_w) / s_w] $$\n为了表述简洁，当输入的高和宽两侧的填充数分别为$p_h$和$p_w$时，我们称填充为$(p_h, p_w)$。特别地，当$p_h = p_w = p$时，填充为$p$。当在高和宽上的步幅分别为$s_h$和$s_w$时，我们称步幅为($s_h,s_w$)。特别地，当$s_h = s_w = s$时，步幅为$s$。在默认情况下，填充为0，步幅为1.\n多输入通道和多输出通道 多输入通道 当输入数据含多个通道时，我们需要构造一个输入通道数和输入数据的通道数相同的卷积核，从而能够与含多通道的输入数据做互相关运算。\n假设输入数据的通道数为$c_i$，那么卷积核的输入通道数同样为$c_i$。设卷积核的窗口形状为$k_h \\times k_w$。当$c_i = 1$，我们知道卷积核只包含一个形状为$k_h \\times k_w$的二维数组。当$c_i \u0026gt; 1$时，我们将会为每个输入通道各分配一个形状为$k_h \\times k_w$的核数组，这$c_i$个数组在通道维上连结，即得到一个形状为$c_i \\times k_h \\times k_w$的卷积核。\n由于输入和卷积核各有$c_i$个通道，我们可以在各个通道上对输入的二维数组和卷积核的二维核数组做互相关运算，再将这$c_i$个互相关运算的二维输出按照通道相加，得到一个二维数组。 这就是多个通道的输入数据与多输入通道的卷积核做二维互相关运算的输出。 多输出通道 当输入通道有多个时，因为我们对各个通道的结果进行了累加，所以不论输入通道数是多少，输出通道数总是为1。 设卷积核输入通道数和输出通道数分别为$c_i$和$c_o$，宽和高分别为$k_h$和$k_w$。如果希望得到含多个通道的输出，我们可以为每个输出通道分别创建形状为$c_i \\times k_h \\times k_w$的核数组。将它们在输出通道维连结，卷积核的形状即：$c_o \\times c_i \\times k_h \\times k_w$。 在做互相关运算时，每个输出通道上的结果由卷积核在该输出通道上的核数组与整个输入数组计算而来。\n$1 \\times 1$卷积层 与 全连接层 最后我们讨论卷积窗口形状为$1 \\times 1 （k_h = k_w =1)$的多通道卷积层。我们通常称之为$1\\times1$卷积层，并将其中的卷积运算称为$1\\times1$卷积。因为使用了最小窗口，$1\\times1$卷积失去了卷积层可以识别高和宽维度上相邻元素构成的模式的功能。实际上，$1\\times1$卷积的主要计算发生在通道维上。$1\\times1$卷积的输入和输出具有相同的高和宽。输出中的每个元素来自于输入中在高和宽上相同位置的元素在不同通道之间按权重累加。假设我们将通道维当做特征维，而将高和宽维度上的元素当成数据样本，那么$1\\times1$卷积层的作用于全连接层等价。\n用$1\\times1$卷积替代全连接层的时候，一定需要注意Tensor的维度顺序。 Conv1d Conv1d的输入是三维数据:(Batch_size, channels, width) 卷积操作沿着通道维对width维进行。\n","date":"2020-12-16T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/conv1d%E4%B8%8Econv2d/","title":"Conv1d与Conv2d"},{"content":"LeakyReLU 语法  CLASS torch.nn.LeakyReLU(negative_slope: float = 0.01, inplace: bool = False)\n 作用 Element-wise\n对于每个x，应用函数如图： 函数图像 ","date":"2020-12-14T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/leakyrelu%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/","title":"LeakyReLU函数解析"},{"content":"MATrICP 论文  Improved techniques for multi-view registration with motion averaging\nLi, Zhongyu Zhu, Jihua Lan, Ke Li, Chen Fang, Chaowei\n 核心思想 将Trimmed ICP与运动平均算法结合起来，应用到多视角聚类上。\n算法步骤 1. 估算各帧之间的重叠百分比$\\xi_{i,j}$ 总的来说，估算各帧之间的重叠百分比主要分为两步：\n(1) 对于每一帧，计算其$d_{threshold}$\n(2) 计算出每一帧的$d_{threshold}$之后，使用该参数计算该帧与其他帧的重叠百分比。\n1.0 背景知识 ObjFunc：\n1.1 计算$d_{threshold}$ 对于第i帧的每一个点，可以在其他所有帧中寻找到N-1个对应点（通过NN），假设第i帧有$N_i$个点，那么一共会有$N_i * (N-1)$个点对与距离。因为我们是要进行多视角配准的，相当于把当前帧作为源scan，其他所有帧组成的模型作为目标模板进行配准。所以将这些所有距离按照从小到大进行排序，然后依次对于每一个距离，计算该距离以及之前所有距离对应的ObjectFunction值。可以使用cumsum操作。结果是得到同样长度的ObjectFunction值的数组，取其中的最小值，该目标函数最小值对应着一个距离$d_i$，这个距离$d_i$就可以作为第i帧的$d_{threshold}$，用于第i帧与其他帧（第j帧）的重叠率估算。\n1.2 计算第i帧与其他帧的重叠百分比 对于第$i$帧，我们现在有其$d_{threshold}$。那么求$\\xi_{i,j}$，即为：使用NN寻找点对pair$(P_i,P_j)$，然后从小到大排列，取$d \u0026lt; d_{threshold}$的部分。假设有$N_j^{'}$个点对满足要求。那么重叠百分比$\\xi_{i,j} = N_j^{'} / N_j$，$N_j$为第j帧的点。\n2. 根据估算得到的${\\xi_{i,j}}$，选择重叠率高的scan pair，应用TrICP算法求解其relative Motion $M_{i,j}$ 2. 应用运动平均算法 在应用Motion Average前，我们已经有了初始的Global Motion以及一系列Relative Motion。\n运动平均的主要思想是，将relative Motion看作是global Motion的某种组合。先求出$\\Delta M_{i,j}$，将其转换为李代数对应的6x1的向量。然后通过Average的思想，求出global Motion的变化值。\n2.1 计算relative motion $M_{i,j}$的变化值 通过global motion，可以求出$\\Delta M_{i,j}$ $$ \\Delta M_{i,j} = M_i^0 M_{i,j} {(M_j^0)}^{-1} $$\n2.2 转换为李代数，从SE(4) 到 se(4) $$ \\Delta m_{i,j} = logm(\\Delta M_{i,j}) $$\n2.3 求李代数上变化量的均值 首先先使用映射将其李代数映射为其对应的六元向量： $$ \\Delta v_{i,j} = vec(\\Delta m_{i,j}) $$\n然后构造一个矩阵D，应用如下公式即可求出global motion的Average值。\n$D_{i,j}$在第i列是$-I$，在第j列为$I$。\nD的含义可能比较难理解，我们有：\n$$ \\Delta \\zeta = D^{\\dag} \\Delta V_{i,j}\n$$ $$ D \\Delta \\zeta = \\Delta V_{i,j} $$ 该符号打不出来，我们用$\\Delta \\zeta$代替了。\n举个例子： 一共3个scan。relativeMotion有两个，假设为$\\Delta v_{1,2}, \\Delta v_{1,3}$。\n可以看出来，通过D对$\\Delta \\zeta$的线性变换，的确得到了$\\Delta v_{i,j}$的另一种表现形式，所以对D求伪逆，左乘在$V_{i,j}$旁，即可得到包含有global motion的结果。\n2.4 根据求得的global motion difference，变换回SE(4)，对现有Motion进行更新。 2.5 判断是否满足条件，若不满足重新回到2.1， 若满足退出。 条件：\n","date":"2020-12-03T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/matricp%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","title":"MATrICP论文解读"},{"content":"ndarray的转置(transpose) 对于A是由np.ndarray表示的情况：\n可以直接使用命令A.T。\n也可以使用命令A.transpose()。\nA.T 与 A.transpose()对比 结论: 在默认情况下，两者效果相同，但transpose()可以指定交换的axis维度。\n对于一维数组，两者均不改变，返回原数组。\n对于二维数组，默认进行标准的转置操作。\n对于多维数组A,A.shape为(a,b,c,d,...,n)，则转置后的shape为(n,...,d,c,b,a)。\n对于.transpose()，可以指定转置后的维度。语法：A.transpose((axisOrder1,...,axisOrderN))，其效果等同于np.transpose(A,(axisOrder1,...,axisOrderN)),(axisOrder)中是想要得到的索引下标顺序。效果详见例子。\nExample： 二维默认情况下： A = np.array([[1,2],[3,4]]) print(A) print(A.T) print(A.transpose()) 结果如下：\n多维默认情况下： a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) print(a.shape) print(a.T.shape) print(a.transpose().shape) 结果如下：\n指定维度情况： a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) print(a.shape) print(a.transpose(1,2,0).shape) A = np.transpose(a,(1,2,0)) print(A.shape) 结果如下：\n从截图中可以看出，a.transpose(1,2,0)与np.transpose(a,(1,2,0))效果相同。代码段中给出的axes是(1,2,0)，这决定了transpose后的数组，其shape在第一个维度即shape[0]上是原来的shape[1]，第二维shape[1]是原来的shape[2]，第三维shape[2]是原来的shape[0]。所以原shape为(3,2,4)。新的shape为(2,4,3)。\n","date":"2020-11-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/np.transpose%E8%AF%A6%E8%A7%A3/","title":"np.transpose()详解"},{"content":"np.unique()官方文档分析以及举例 1.1 官方文档及解读 numpy.unique 语法：numpy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)\n作用：找到array中不重复（独一无二）的元素\n返回值：默认返回不重复元素的sorted排好序的从小到大的数组。可选的返回值有：\n 输入数组提供不重复值(unique)元素的索引下标(如果有多个返回第一个) 利用unique数组重构原有的input数组所需要的的索引下标 该unique元素在input数组中的出现次数，相当于count  Parameter\n  ar：array like\n输入的数组，除非特别指定axis，数组将被展平为1-D形式进行处理。\n  return_index: bool, optional\n如果为True，返回输入数组提供不重复值(unique)元素的索引下标(如果有多个返回第一个)\n  return_inverse: bool, optional\n如果为True，返回利用unique数组重构原有的input数组所需要的的索引下标\n  axis: int or None, optional\n进行操作的维度。如果为None，数组将被展平作为一维数组处理，如果指定了axis，则以该维索引构成的子数组作为元素，将整个数组视为一维数组进行处理。如果axis被使用，则不支持Object Array以及structured arrays。\n  Returns\n  unique: ndarray\n排好序(从小到大)的unique值\n  unique_indices: ndarray, optional\nunique数组中对应位置的value值第一次在input数组中出现的下标值。当return_index = True时返回。\n  unique_inverse: ndarray, optional\n利用unique数组重构源输入input数组所需要的索引下标。当return_inverse = True的时候返回。\n  unique_count: ndarray, optional 每个unique values在原数组中出现的次数，当return_counts=True时返回。\n  NOTE\n当axis被指定时，subarrays按照指定轴的维度索引。该操作通过将specified axis挪到数组的第一维，然后再将subarrays展开。被展平的subarrays被视为一个结构化类型，我们就可以把以这个结构化类型将原数组视为一个1维数组。结果排序是按结构化元素的第一个元素（类似字典序）排列的。\n1.2 Examples 补一个return_counts:\n \u0026gt;\u0026gt;\u0026gt; a = np.array([1,1,2,2,2,3,8,5,4]) \u0026gt;\u0026gt;\u0026gt; x,x2 = np.unique(a,return_counts = True) x: [1,2,3,4,5,8] x2:[2,3,1,1,1,1,dtype=int64] ","date":"2020-11-21T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/np.unique%E8%A7%A3%E8%AF%BB/","title":"np.unique()解读"},{"content":"矩阵的基础知识（转置，逆，迹，行列式）  References: MatrixCookBook(Version 2012) Chapter1\n Chapter1: Basics 1 Basics 注：${A^H}$是A的Transposed and complex conjugated matrix (Hermitian)，即转置复共轭矩阵。\n1.1 矩阵的迹(Trace) 式子(11)表明矩阵的迹是主对角线元素的和。\n式子(12)表明矩阵的迹是矩阵的特征值的和。\n式子(13)表明矩阵的迹等于其转置矩阵的迹。\n式子(14)表明AB的迹等于BA的迹。\n式子(15)表明A+B的迹等于A的迹加B的迹。 式子(16)表明ABC的迹等于BCA的迹等于CAB的迹。\n式子(17)表明一个nx1的向量a，a的转置乘以a所得的常数等于a乘以a的转置所得矩阵的迹。\n1.2 行列式(Determinant) 前提：此处的A是nxn矩阵。\n式子(18)表明矩阵的行列式等于特征值的连乘积。\n式子(19)表明cA的行列式等于A的行列式的${c^n}$倍。\n式子(20)表明矩阵的行列式等于其转置矩阵的行列式。\n式子(21)表明矩阵AB的行列式等于矩阵A的行列式乘以矩阵B的行列式。\n式子(22)表明矩阵${A^{-1}}$的行列式等于矩阵A的倒数。\n式子(23)表明矩阵${A^n}$的行列式等于矩阵A的行列式的n次幂。\n式子(24)表明如果u和v是nx1向量，那么${I+uv^T}$的行列式等于${1+u^Tv}$的值。\n式子(25)表明如果A是2x2矩阵，I+A的行列式等于${1+det(A)+Tr(A)}$,即1+A的行列式+A的迹。\n式子(26)表明如果A是3x3矩阵，I+A的行列式等于${1+det(A)+Tr(A)+\\frac{1}{2}Tr(A)^2-\\frac{1}{2}Tr(A^2)}$。\n式子(27)不表。\n式子(28)表示对于微小扰动$\\varepsilon$，可以将$\\varepsilon A$近似作为2x2形式处理：\n1.3 特例：2x2矩阵 2x2矩阵有着以上的性质与结论。\n","date":"2020-11-15T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/matrixcookbook-chapter1%E7%9F%A9%E9%98%B5%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","title":"MatrixCookBook Chapter1:矩阵的基础知识"},{"content":"model.eval() model.eval() 作用等同于 self.train(False)\n简而言之，就是评估模式。而非训练模式。\n在评估模式下，batchNorm层，dropout层等用于优化训练而添加的网络层会被关闭，从而使得评估时不会发生偏移。\n总结 在对模型进行评估时，应该配合使用with torch.no_grad() 与 model.eval()：\n loop: model.train() # 切换至训练模式 train…… model.eval() with torch.no_grad(): Evaluation end loop ","date":"2020-11-14T09:40:49+08:00","permalink":"https://codefmeister.github.io/p/model.eval%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/","title":"model.eval()作用分析"},{"content":"numpy.arange() 语法 x = numpy.arange(start,end,step,dtype=None)\nParameters说明  start: Optional，起始值，默认值为0。 end: 结束值(不含)。 step: Optional，步长，默认值为1。 dtype：Optional，默认为None，从其他输入值中推测。  功能 [start,end)的左闭右开区间内，每隔一个step取一次值。return值是ndarray。 对于浮点数来说，length = ceil((end - start)/step)，由于浮点数的上溢，此条规则可能会导致在浮点数情况下，最后一个element比end长。\nNote 如果使用非整数步长（譬如0.1），结果往往不一致（原因见上），所以在这种情况下推荐使用numpy.linspace。\nExample \u0026gt;\u0026gt;\u0026gt; np.arange(3) array([0, 1, 2]) \u0026gt;\u0026gt;\u0026gt;np.arange(3.0) array([ 0., 1., 2.]) \u0026gt;\u0026gt;\u0026gt;np.arange(3,7) array([3, 4, 5, 6]) \u0026gt;\u0026gt;\u0026gt;np.arange(3,7,2) array([3, 5]) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.repeat() 作用 可以用于重复数组中的元素\n语法 numpy.repeat(a, repeats, axis=None)\n参数解读 Parameters   a : array_like\nInput array. repeats : int or array of ints\nThe number of repetitions for each element. repeats is broadcasted to fit the shape of the given axis. axis : int, optional\nThe axis along which to repeat values. By default, use the flattened input array, and return a flat output array.    a: array_like\n输入的想要进行repeat的数组 repeats：int or array of ints\nrepeats参数应该是int类型或者是一个int数组。是对每一个元素repeat的次数。repeats将被广播去适应给定axis的shape。 axis: int, optional\nrepeat操作进行的维度，可选，int值。如果未指定，默认情况下，会将数组展平(flattened)，然后返回一个扁平的重复后的数组。  Returns   repeated_array : ndarray\nOutput array which has the same shape as a, except along the given axis.    repeated_array : ndarray\n返回的repeat后的数组，除了在指定的axis维度以外，其余各维度的shape与原数组a一致。  Example \u0026gt;\u0026gt;\u0026gt; np.repeat(3, 4) array([3, 3, 3, 3]) # 下面这个例子中，x被展平(flattened，返回的数组也是一个扁平数组) \u0026gt;\u0026gt;\u0026gt; x = np.array([[1,2],[3,4]]) \u0026gt;\u0026gt;\u0026gt; np.repeat(x, 2) array([1, 1, 2, 2, 3, 3, 4, 4]) # 下面这个例子指定了axis=1，axis=1的维度上的shape值为2， # 而只给定了3一个数字，所以进行了广播，即进行的操作实际为（3，3） \u0026gt;\u0026gt;\u0026gt; np.repeat(x, 3, axis=1) array([[1, 1, 1, 2, 2, 2], [3, 3, 3, 4, 4, 4]]) # 下面这个例子指定了axis=0，同时给定了repeats数组 # 其长度等于axis=0的shape值。对第一行重复1次，对第二行重复两次。 \u0026gt;\u0026gt;\u0026gt; np.repeat(x, [1, 2], axis=0) array([[1, 2], [3, 4], [3, 4]]) # 如果给定的repeats数组长度与axis不一致，会报错，can not broadcast \u0026gt;\u0026gt;\u0026gt; y = np.array([[1,2],[3,4],[5,6],[7,8]]) \u0026gt;\u0026gt;\u0026gt; np.repeat(y,(3,1),axis = 0) ValueError: operands could not be broadcast together with shape (4,) (2,) # 如果未指定axis，默认展平，但是repeats是数组，同样会报错。 \u0026gt;\u0026gt;\u0026gt; np.repeat(y,(3,1)) ValueError: operands could not be broadcast together with shape (8,) (2,) 类似的函数 如果repeat的功能和你想象中的不一致，那么你可能寻找的是这个函数：\n numpy.tile(A,reps)\n它的功能是：用A，按照reps指定的次数拼成一个新的数组。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.tile 语法 numpy.tile(A,reps)\n作用  Construct an array by repeating A the number of times given by reps.\nIf reps has length d, the result will have dimension of max(d, A.ndim).\nIf A.ndim \u0026lt; d, A is promoted to be d-dimensional by prepending new axes. So a shape (3,) array is promoted to (1, 3) for 2-D replication, or shape (1, 1, 3) for 3-D replication. If this is not the desired behavior, promote A to d-dimensions manually before calling this function.\nIf A.ndim \u0026gt; d, reps is promoted to A.ndim by pre-pending 1\u0026rsquo;s to it. Thus for an A of shape (2, 3, 4, 5), a reps of (2, 2) is treated as (1, 1, 2, 2).\nNote : Although tile may be used for broadcasting, it is strongly recommended to use numpy\u0026rsquo;s broadcasting operations and functions.\n 通过按照reps给定的次数，repeat数组A，构造一个新的数组。\n新的数组的维度数取决于A.ndim和reps的长度d中最大的一个，即max(d,A.ndim)\n如果A.ndim\u0026lt;d，数组A会被升维到d维，通过在其前面增加new axes。如(3,)可以被升维到二维(1,3)，三维(1,1,3)。如果不希望这样的行为，那么需要在调用tile前手动升维。\n如果A.ndim\u0026gt;d，reps会通过前置1的方式被“升维”到A.ndim，如A.shape为(2,3,4,5)，给定的reps为(2,2)。那么reps会被当做(1,1,2,2)处理。\n参数与返回值 Parameters   A : array_like\nThe input array. reps : array_like\nThe number of repetitions of A along each axis.    A: array_like\n输入数组A reps: array_like\n每一维度A的重复次数  Returns   c : ndarray\nThe tiled output array.    c : ndarray\n输出数组  Example 仔细观察下面的例子，你会发现：\n 首先，返回数组的shape十分有规律，就是升维后的shape与reps的相乘。 其次，返回数组十分有规律。就像贴瓷砖一样，将原数组当做瓷砖，一块一块的进行贴合。（搭积木一般）  \u0026gt;\u0026gt;\u0026gt; a = np.array([0, 1, 2]) # a.ndim == len(reps) \u0026gt;\u0026gt;\u0026gt; np.tile(a, 2) array([0, 1, 2, 0, 1, 2]) # a.ndim \u0026lt; len(reps), a被升维为(1,3),返回结果为(2,6) \u0026gt;\u0026gt;\u0026gt; np.tile(a, (2, 2)) array([[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2]]) # a.ndim \u0026lt; len(reps), a被升维为(1,1,3)，返回结果为(2,1,6) \u0026gt;\u0026gt;\u0026gt; np.tile(a, (2, 1, 2)) array([[[0, 1, 2, 0, 1, 2]], [[0, 1, 2, 0, 1, 2]]]) \u0026gt;\u0026gt;\u0026gt; b = np.array([[1, 2], [3, 4]]) # b.ndim \u0026gt; len(reps),reps被作为(1,2)处理，返回结果为(2,4) \u0026gt;\u0026gt;\u0026gt; np.tile(b, 2) array([[1, 2, 1, 2], [3, 4, 3, 4]]) # b.ndim == len(reps), 返回结果为(4,2) \u0026gt;\u0026gt;\u0026gt; np.tile(b, (2, 1)) array([[1, 2], [3, 4], [1, 2], [3, 4]]) # c.ndim \u0026lt; len(reps)，c被升维为(1,4),返回结果为(4,4) \u0026gt;\u0026gt;\u0026gt; c = np.array([1,2,3,4]) \u0026gt;\u0026gt;\u0026gt; np.tile(c,(4,1)) array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) 类似的函数 repeat : Repeat elements of an array.\nbroadcast_to : Broadcast an array to a new shape\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.concatenate 语法 numpy.concatenate((a1,a2,...), axis=0, out=None, dtype=None, casting=\u0026quot;same_kind\u0026quot;)\n作用 将一个数组序列在指定的维度上进行连接join\nParameter  a1,a2,\u0026hellip; : sequence of array_like   The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default)\n 数组序列的shape在除了axis指定维度以外的所有维度上都应该相同。axis默认为第一个维度，即axis=0。\n axis : int, optional   The axis along which the arrays will be joined. If axis is None, arraysare flattened before use. Default is 0.\n axis指定了数组进行join操作的维度。默认为0，即第一维。如果axis=None，那么数组将会先展平，再进行join。\n out : ndarray, optional   If provided, the destination to place the result. The shape must be correct, matching that of what concatenate would have returned if no out argument were specified.\n 如果指定了out，则将join后的结果输出到out指定的数组中，但shape必须正确。如果没有指定out，则会返回一个匹配大小的数组。\n dtype : str or dtype,optional   If provided, the destination array will have this dtype. Cannot be provided together with out.\n 如果提供了dtype，则输出的数组的数据类型会与dtype中指定的一致。不可以同时与out一起指定。1.20.0中新增，以前的numpy无法使用。\n casting : { \u0026lsquo;no\u0026rsquo;, \u0026lsquo;equiv\u0026rsquo;, \u0026lsquo;safe\u0026rsquo;, \u0026lsquo;same_kind\u0026rsquo;, \u0026lsquo;unsafe\u0026rsquo; }, optional   Controls what kind of data casting may occur.Defaults to \u0026lsquo;same_kind\u0026rsquo;.\n ‘no’ means the data types should not be cast at all. ‘equiv’ means only byte-order changes are allowed. ‘safe’ means only casts which can preserve values are allowed. ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32, are allowed. ‘unsafe’ means any data conversions may be done.   控制数据类型的cast，共有五种类型。不表。1.20.0中新增，以前的numpy无法使用。\nExample \u0026gt;\u0026gt;\u0026gt; a = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]],[[3,4,5,6],[4,5,6,7]]]) \u0026gt;\u0026gt;\u0026gt; print(a.shape) \u0026gt;\u0026gt;\u0026gt; b = np.array([[[1,2,3,4],[4,5,6,7]],[[2,3,4,5],[5,6,7,8]]]) \u0026gt;\u0026gt;\u0026gt; print(b.shape) \u0026gt;\u0026gt;\u0026gt; x = np.concatenate((a,b),axis = 0) \u0026gt;\u0026gt;\u0026gt; print(x.shape) 结果如图： 可见，在指定维度上，第0维进行了join。\n\u0026gt;\u0026gt;\u0026gt; x1 = np.concatenate((a,b),axis = 1) 结果如图： 可以看出，如果指定axis=1，则会报错，因为除了axis=1的其他维度上，shape并不相等。\n\u0026gt;\u0026gt;\u0026gt; x2 = np.concatenate((a,b),axis=None) \u0026gt;\u0026gt;\u0026gt; print(x2.shape) 可以看出，数组被展平了。\n注意事项  When one or more of the arrays to be concatenated is a MaskedArray, this function will return a MaskedArray object instead of an ndarray, but the input masks are not preserved. In cases where a MaskedArray is expected as input, use the ma.concatenate function from the masked array module instead.\n 当有一个或者多个MaskedArray作为输入进行concatenate时，不再会返回一个ndarray，而是会返回MaskedArray,但是其mask不会保留，所以在输入中有MaskedArray的情况下，应该尽量使用ma.concatenate，而不是np.concatenate()。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy求矩阵的特征值与特征向量(np.linalg.eig) 语法 np.linalg.eig(a)\n功能  Compute the eigenvalues and right eigenvectors of a square array.\n 求方阵(n x n)的特征值与右特征向量\nParameters  a : (\u0026hellip;, M, M) array   Matrices for which the eigenvalues and right eigenvectors will be computed\n a是一个矩阵Matrix的数组。每个矩阵M都会被计算其特征值与特征向量。\nReturns  w : (\u0026hellip;, M) array   The eigenvalues, each repeated according to its multiplicity. The eigenvalues are not necessarily ordered. The resulting array will be of complex type, unless the imaginary part is zero in which case it will be cast to a real type. When a is real the resulting eigenvalues will be real (0 imaginary part) or occur in conjugate pairs\n 返回的w是其特征值。特征值不会特意进行排序。返回的array一般都是复数形式，除非虚部为0，会被cast为实数。当a是实数类型时，返回的就是实数。\n v : (\u0026hellip;, M, M) array   The normalized (unit \u0026ldquo;length\u0026rdquo;) eigenvectors, such that the column v[:,i] is the eigenvector corresponding to the eigenvalue w[i].\n 返回的v是归一化后的特征向量（length为1）。特征向量v[:,i]对应特征值w[i]。\nRaises  LinAlgError   If the eigenvalue computation does not converge.\n Ralated Function:  See Also eigvals : eigenvalues of a non-symmetric array. eigh : eigenvalues and eigenvectors of a real symmetric or complex Hermitian (conjugate symmetric) array. eigvalsh : eigenvalues of a real symmetric or complex Hermitian (conjugate symmetric) array. scipy.linalg.eig : Similar function in SciPy that also solves the generalized eigenvalue problem. scipy.linalg.schur : Best choice for unitary and other non-Hermitian normal matrices.\n 相关的函数有：\n eigvals：计算非对称矩阵的特征值 eigh：实对称矩阵或者复共轭对称矩阵(Hermitian)的特征值与特征向量 eigvalsh: 实对称矩阵或者复共轭对称矩阵(Hermitian)的特征值与特征向量 scipy.linalg.eig scipy.linalg.schur  Notes  .. versionadded:: 1.8.0\nBroadcasting rules apply, see the numpy.linalg documentation for details.\nThis is implemented using the _geev LAPACK routines which compute the eigenvalues and eigenvectors of general square arrays.\nThe number w is an eigenvalue of a if there exists a vector v such that a @ v = w * v. Thus, the arrays a, w, and v satisfy the equations a @ v[:,i] = w[i] * v[:,i] for $i \\in \\{0,...,M-1\\}$.\nThe array v of eigenvectors may not be of maximum rank, that is, some of the columns may be linearly dependent, although round-off error may obscure that fact. If the eigenvalues are all different, then theoretically the eigenvectors are linearly independent and a can be diagonalized by a similarity transformation using v, i.e, inv(v) @ a @ v is diagonal.\nFor non-Hermitian normal matrices the SciPy function scipy.linalg.schur is preferred because the matrix v is guaranteed to be unitary, which is not the case when using eig. The Schur factorization produces an upper triangular matrix rather than a diagonal matrix, but for normal matrices only the diagonal of the upper triangular matrix is needed, the rest is roundoff error.\nFinally, it is emphasized that v consists of the right (as in right-hand side) eigenvectors of a. A vector y satisfying y.T @ a = z * y.T for some number z is called a left eigenvector of a, and, in general, the left and right eigenvectors of a matrix are not necessarily the (perhaps conjugate) transposes of each other.\nReferences G. Strang, Linear Algebra and Its Applications, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, Various pp.\n 需要说明的是，特征向量之间可能存在线性相关关系，即返回的v可能不是满秩的。但如果特征值都不同的话，理论上来说，所有特征向量都是线性无关的。此时可以利用inv(v)@ a @ v来计算特征值的对角矩阵（对角线上的元素是特征值，其余元素为0),同时可以用v @ diag(w) @ inv(v)来恢复a。\n同时需要说明的是，这里得到的特征向量都是右特征向量。即$Ax = {\\lambda}x$.所以，数组a,w,v满足:a @ v[:,i] = w[i] * v[:,i] for $i \\in \\{0,...,M-1\\}$.\nExamples \u0026gt;\u0026gt;\u0026gt; from numpy import linalg as LA (Almost) trivial example with real e-values and e-vectors. \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(np.diag((1, 2, 3))) \u0026gt;\u0026gt;\u0026gt; w; v array([1., 2., 3.]) array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) Real matrix possessing complex e-values and e-vectors; note that the e-values are complex conjugates of each other. \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(np.array([[1, -1], [1, 1]])) \u0026gt;\u0026gt;\u0026gt; w; v array([1.+1.j, 1.-1.j]) array([[0.70710678+0.j , 0.70710678-0.j ], [0. -0.70710678j, 0. +0.70710678j]]) Complex-valued matrix with real e-values (but complex-valued e-vectors); note that ``a.conj().T == a``, i.e., `a` is Hermitian. \u0026gt;\u0026gt;\u0026gt; a = np.array([[1, 1j], [-1j, 1]]) \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(a) \u0026gt;\u0026gt;\u0026gt; w; v array([2.+0.j, 0.+0.j]) array([[ 0. +0.70710678j, 0.70710678+0.j ], # may vary [ 0.70710678+0.j , -0. +0.70710678j]]) Be careful about round-off error! \u0026gt;\u0026gt;\u0026gt; a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]]) \u0026gt;\u0026gt;\u0026gt; # Theor. e-values are 1 +/- 1e-9 \u0026gt;\u0026gt;\u0026gt; w, v = LA.eig(a) \u0026gt;\u0026gt;\u0026gt; w; v array([1., 1.]) array([[1., 0.], [0., 1.]]) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy中求矩阵的逆与伪逆 numpy中求矩阵的逆：numpy.linalg.inv()\nnumpy中求矩阵的伪逆: numpy.linalg.pinv()\nnumpy中求矩阵的逆（numpy.linalg.inv) 使用命令numpy.linalg.inv(Matrix)\n功能  Compute the (multiplicative) inverse of a matrix.\nGiven a square matrix a, return the matrix ainv satisfying dot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n 计算一个方阵的逆，使之满足$AA^{-1}=A^{-1}A=I$\nParameters  a : (\u0026hellip;, M, M) array_like\nMatrix to be inverted.  a是输入的要计算逆的矩阵数组。\nReturns  ainv : (\u0026hellip;, M, M)\nndarray or matrix (Multiplicative) inverse of the matrix a.  返回的是对应的逆矩阵的数组。\nRaises  LinAlgError\nIf a is not square or inversion fails.  如果a不是方阵或者不可逆，则Raise LinAlgError\nExamples \u0026gt;\u0026gt;\u0026gt; from numpy.linalg import inv \u0026gt;\u0026gt;\u0026gt; a = np.array([[1., 2.], [3., 4.]]) \u0026gt;\u0026gt;\u0026gt; ainv = inv(a) \u0026gt;\u0026gt;\u0026gt; np.allclose(np.dot(a, ainv), np.eye(2)) True \u0026gt;\u0026gt;\u0026gt; np.allclose(np.dot(ainv, a), np.eye(2)) True If a is a matrix object, then the return value is a matrix as well: \u0026gt;\u0026gt;\u0026gt; ainv = inv(np.matrix(a)) \u0026gt;\u0026gt;\u0026gt; ainv matrix([[-2. , 1. ], [ 1.5, -0.5]]) Inverses of several matrices can be computed at once: \u0026gt;\u0026gt;\u0026gt; a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]]) \u0026gt;\u0026gt;\u0026gt; inv(a) array([[[-2. , 1. ], [ 1.5 , -0.5 ]], [[-1.25, 0.75], [ 0.75, -0.25]]]) numpy中求矩阵的伪逆(numpy.linalg.inv) 伪逆的定义以及意义 伪逆在某些情况下特指摩尔彭若斯广义逆。 广义逆矩阵： $A$的摩尔彭若斯矩阵记为$A^+$.那么有两个基本性质：\nAA^+A=A A^+AA^+=A^+ 功能  Compute the (Moore-Penrose) pseudo-inverse of a matrix. Calculate the generalized inverse of a matrix using its singular-value decomposition (SVD) and including all large singular values.\n.. versionchanged:: 1.14\nCan now operate on stacks of matrices\n Parameters  a : (\u0026hellip;, M, N) array_like   Matrix or stack of matrices to be pseudo-inverted.\n 要做伪逆运算的矩阵或者矩阵的栈\n rcond : (\u0026hellip;) array_like of float   Cutoff for small singular values. Singular values less than or equal to rcond * largest_singular_value are set to zero. Broadcasts against the stack of matrices.\n 对很小的奇异值做裁剪。当某个奇异值小于等于最大的奇异值乘以rcond，就将它设置为0.\n hermitian : bool, optional   If True, a is assumed to be Hermitian (symmetric if real-valued), enabling a more efficient method for finding singular values. Defaults to False.\n 如果为真，相当于告诉Numpy输入矩阵是Hermitian矩阵。会采用更加有效的方法去寻找奇异值。默认为False.\nReturns  B : (\u0026hellip;, N, M) ndarray   The pseudo-inverse of a. If a is a matrix instance, then so is B.\n 返回a的伪逆\nRaises  LinAlgError   If the SVD computation does not converge.\n 如果矩阵不能进行奇异值分解(SVD)，则报错。\nSee Also -------- scipy.linalg.pinv : Similar function in SciPy. scipy.linalg.pinv2 : Similar function in SciPy (SVD-based). scipy.linalg.pinvh : Compute the (Moore-Penrose) pseudo-inverse of a Hermitian matrix.  Notes  The pseudo-inverse of a matrix A, denoted$A^+$, is defined as: \u0026ldquo;the matrix that \u0026lsquo;solves\u0026rsquo; [the least-squares problem] $Ax = b$,\u0026rdquo; i.e., if ${\\bar x}$ is said solution, then $A^+$ is that matrix such that${\\bar x} = A^+b$.\n  It can be shown that if : $Q_1 \\Sigma Q_2^T = A$ is the singular value decomposition of A, then :$A^+ = Q_2\\Sigma^+ Q_1^T$, where :$Q_{1,2}$ are orthogonal matrices, :$\\Sigma$ is a diagonal matrix consisting of A\u0026rsquo;s so-called singular values, (followed, typically, by zeros), and then :$\\Sigma^+$ is simply the diagonal matrix consisting of the reciprocals of A\u0026rsquo;s singular values (again, followed by zeros). [1]_\n  References:\n.. [1] G. Strang, Linear Algebra and Its Applications, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, pp. 139-142.\n 对于矩阵A，有方程$Ax=b$,那么它的摩尔彭若斯伪逆$A^+$满足：对于$\\bar x = A^+b$,$\\bar x$能使得Ax与b的二范数距离最小。\n矩阵A的摩尔彭若斯伪逆可以通过奇异值分解来求得。A的奇异值分解为：$Q_1 \\Sigma Q_2^T = A$。那么其伪逆$A^+ = Q_2\\Sigma^+ Q_1^T$。其中$\\Sigma^+$就是$\\Sigma$的对角元素的倒数构成的对角矩阵。其实因为$\\Sigma$本身就是对角矩阵，$\\Sigma^+$就是$\\Sigma^{-1}$.\nExamples The following example checks that a * a+ * a == a and a+ * a * a+ == a+:\n\u0026gt;\u0026gt;\u0026gt; a = np.random.randn(9, 6) \u0026gt;\u0026gt;\u0026gt; B = np.linalg.pinv(a) \u0026gt;\u0026gt;\u0026gt; np.allclose(a, np.dot(a, np.dot(B, a))) True \u0026gt;\u0026gt;\u0026gt; np.allclose(B, np.dot(B, np.dot(a, B))) True ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"numpy.linalg.norm 语法 numpy.linalg.norm(x,ord=None,axis=None,keepdims=False)\nParameters  x: array_like   Input array. If axis is None, x must be 1-D or 2-D, unless ord is None. If both axis and ord are None, the 2-norm of x.ravel will be returned.\n X是输入的array, array的情况必须是以下三种情况之一:\n axis未指定，ord指定。此时x必须是一维或二维数组 axis指定，x任意 axis未指定，ord未指定，此时x任意，返回值为x被展平后的一维向量x.ravel的二范数。   ord：{non-zero int, inf, -inf, \u0026lsquo;fro\u0026rsquo;, \u0026lsquo;nuc\u0026rsquo;}, optional   Order of the norm (see table under Notes). inf means numpy\u0026rsquo;s inf object. The default is None.\n 范数的阶数，可以不指定。默认为None。inf代表无穷大，-inf为无穷小。\n可选的阶数见下图：\n axis:{None, int, 2-tuple of ints},optional   If axis is an integer, it specifies the axis of x along which to compute the vector norms. If axis is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed. If axis is None then either a vector norm (when x is 1-D) or a matrix norm (when x is 2-D) is returned. The default is None.\n 如果axis是整数，指定了一个维度，在该维度上按照向量进行范数计算。如果是一个二元整数组，指定了两个维度，在指定的这两个维度上可以构成矩阵。对这些矩阵进行计算。如果没有指定axis,那么对于一维输入返回其向量形式的范数计算值，对于二维输入返回其矩阵形式的范数。默认值为None\n keepdims: bool, optional   If this is set to True, the axes which are normed over are left in the result as dimensions with size one. With this option the result will broadcast correctly against the original x.\n 如果keepdims=True，被指定计算范数的维度将在返回结果中保留，其size为1。计算结果会在该维度上进行broadcast\n各范数详析 NOTE: 对于ord\u0026lt;1的各个范数，结果在严格意义不等于数学意义上的范数。但在数值计算层面仍然有效。 默认情况 当不指定ord时，即ord = None，对于矩阵，计算其Frobenius norm，对于向量，计算其2-norm\nFrobenius范数 ord = 'fro'\n其公式为：\nF范数只对矩阵存在。其值为对所有元素的绝对值的平方求和后开平方。\nNuclear范数(核范数) ord = 'nuc' 只对矩阵存在，矩阵的核范数等于其所有奇异值的和。\n无穷大范数 对于矩阵：max(sum(abs(x), axis=1)) ,每一行最终得到一个数，返回最大的数。\n对于向量：max(abs(x)\n无穷小范数 对于矩阵: min(sum(abs(x),axis=1)),每一行得到一个数，返回最小的数。\n对于向量: min(abs(x))\n0 范数 对于矩阵：不存在\n对于向量：sum(x!=0) 所有非零元素的和\n1 范数 对于矩阵：max(sum(abs(x)),axis=0，每一列得到一个数，返回最大值。\n对于向量：sum(abs(x)**ord)**(1./ord)\n-1 范数 对于矩阵：min(sum(abs(x)),axis=0，每一列得到一个数，返回最小值。\n对于向量：sum(abs(x)**ord)**(1./ord)\n2 范数 对于矩阵：最大的奇异值\n对于向量：sum(abs(x)**ord)**(1./ord)\n-2范数 对于矩阵：最小的奇异值\n对于向量：sum(abs(x)**ord)**(1./ord)\n其余int值对应的范数 对于矩阵： Undefined\n对于向量：sum(abs(x)**ord)**(1./ord)\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python中parse_args以及namespace 声明：本笔记记录的是使用parse_args在函数内部进行传参，并非在命令行进行输入。所有操作均需先进行import argparse。\n通过以下操作，可以在传参时直接传入args这个namespace，而不是具体的某个参数。\n创建argparse对象，设置参数以及默认值 使用argparse.ArgumentParser()创建对象，使用argparser.add_argument()操作设置参数以及默认值。\nExample: parser = argparse.ArgumentParser('Exampe') parser.add_argument('--NDArray',type=np.ndarray,default= NDArray) argument中的参数类型丰富多样，可以是任何数据类型。使用--name来设置参数名，使用type = 设置类型，使用default设置初始化后的默认值。\nparser转换为name_space 使用命令parser.parse_args()，即可将一个ArgumentParser转换为name_space.转换为namespace后，可以对先前设置的argument通过.name的方式类似属性一样进行访问，同样可以进行赋值，存取等操作。\nargs = parser.parse_args() print(args.NDArray) a = np.array([[1,2],[3,4]]) args.NDArray = a namespace 的一些操作 在初始化ArgumentParser时，我们可能忘记添加某些argument，这就导致在转换为namespace后缺少某些attribute.\n我们可以对args使用.__setattr(name,value)设置新的属性值。开辟之后就可以使用.attr的方式进行赋值存取。 同样，我们可以使用.__contains__(attribute_name)判断args这个namespace是否含有该属性。\nargs.__setattr__('cloudArray',[]) args.cloudArray.append(1024) if args.__contains__('cloudArray'): print('namespace args contains attr') ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python如何使得list中的元素是ndarray 在一个代码实现时，会想要类似MATLAB一样，拥有一个struct类型的数组，数组中的每个cell都是一个ndarray。因为在某些维度上shape不同，所以不能整合为一个大的ndarray。\n要实现上述需求，可以进行如下操作:\ntargetList = [] targetList.append(ndarray) 这样即可获得由ndarray构成的list，可以进一步对list进行concatenate等操作再次整合。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Python中李群SO(3)与李代数so(3)之间指数映射与实现源码 调用scipy.linalg.expm() 对于李群SE(3)、SO(3)，和与其对应的李代数se(3),so(3)。指数映射是十分重要的。\n在Python中我们可以调用：scipy.linalg.expm()来将李代数$\\xi $对应的反对称矩阵${\\hat \\xi }$映射到其对应的旋转矩阵$R$。\n源码示例 import scipy.linalg.expm as expm def SkewFun(a): \u0026quot;\u0026quot;\u0026quot; got the corresponded antiSymmetric Matrix of the Lie algebra :param a: Lie algebra :return: antiSymmetric Matrix \u0026quot;\u0026quot;\u0026quot; if len(a) == 3: A = np.array([[0, -a[2], a[1]], [a[2], 0, -a[0]], [-a[1], a[0], 0] ]) return A if len(a) == 2: A = np.array([a[1], -a[0]]) return A exit(-1) def so3ToSO3(xi): return expm(SkewFun(xi) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Python判断不可变对象（字符串，整数，浮点数，数组）相等的办法以及其底层实现原理 Python中，判断不可变对象是否相等与Java十分不同。\n结论 Python中判断两个字符串相等：既可以使用\u0026quot;==\u0026quot;，又可以使用\u0026quot;is\u0026quot;。\n判断整数，浮点数以及Tuple时，最好使用\u0026quot;==\u0026quot;\na = 'abc' b = 'abc' print(a is b) print(a == b) 这个问题可以进一步引申至Python的底层实现原理上。\n原理 整数 Python在底层实现中，一切都是对象。包括整数等也是对象。这些基本的不可变对象在python里会被频繁的引用,创建,如果不能重用的话，极易导致效率瓶颈,所以python引入了整数对象池的机制。\nPython中，对于[-5,256]的整数，创建了整数对象池，创建范围内的小整数会自动引用对象池中的整数对象。\na = -5 b = -5 print(a is b) print(a == b) a1 = -6 b1 = -6 print(a1 is b1) print(a1 == b1) 从运行结果图上可以看出，-5由于是小整数，引用整数池中的对象，所以是同一个对象,a is b为True。而-6由于不在范围内，每次都会新建一个对象，所以是两个对象，a is b为False。\n同理可以测试256,257。前者为True，后者为False。\n浮点数 由于浮点数有无穷多个，所以浮点数并没有常量池。在创建浮点数对象时会直接新建一个对象。\na = 0.0 b = 0.0 print(a is b) print(a == b) 从结果中可见，两者值相等，但并不是指向同一内存地址。\n字符串 Python中存在着intern机制。由于字符串是不可变对象，它对字符串维护着一个字典，每次新建一个字符串变量时，会先查询字典中是否已经有该字符串值。如果有，直接引用。如果没有再新建。这个机制决定了字符串值相等，则一定指向相同的对象。\nTuple 对于元组，虽然其是不可变对象，但在底层实现无intern机制，就是单纯的一个可以迭代的数组，存放着元素。每次创建都会开辟地址。所以新建两个值相同的变量会创建两个对象。使用\u0026quot;==\u0026quot;判断。\na = (1,2,3) b = (1,2,3) print(a == b) print(a is b) 结果也印证了这一点。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python中判断列表为空 判断列表为空是一个非常基础的问题。但是也有很多写法。\n方法1：len() list = [] if len(list) == 0: print('list is empty') 方法2：直接使用if判断 list = [] if not list: print('list is empty') 直接使用list作为判断标准，则空列表相当于False\n方法3：使用==进行判断 EmptyList = [] list = [] if list==EmptyList: print('list is empty') 注意: Python中与Java不同。Java中==用于判断两个变量是否指向同一个对象，即地址是否相同。但是Python中不是，Python中，==用于判断两个变量的值相等。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"python中怎么表示自然底数e和浮点数精度epsilon 自然底数e可以直接使用math.e表示。\n浮点数精度epsilon可以使用np.spacing(1)来表征epsilon，等效于MATLAB中的eps.\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"PyTorch中默认维度 PyTorch中默认维度: B C H W。\n即Batch_size，Channel, Height, Width\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Mechanics of Seq2Seq Models With Attention  Reference: Visualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention)\n 前言 Sequence-to-sequence模型在深度学习领域取得了很多成就。\n这文章真的牛逼。\n有视频不翻译了。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"AdaptiveMaxPool AdaptiveMaxPool是PyTorch中提供的自适应池化层。\n其主要特殊的地方在于： 无论输入Input的size是多少，输出的size总为指定的size。\nAdaptiveMaxPool1d() m = nn.AdaptiveMaxPool1d(3) input = torch.randn(4,3,7) output = m(input) # output的size为(4,3,3) AdaptiveMaxPool2d() m = nn.AdaptiveMaxPool2d((3,6)) input = torch.randn(2,64,8,9) output = m(input) # output的size为(2,64,3,6) AdaptiveMaxPool3d() 同理\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":" 本文参考 lr_scheduler介绍 以及 PyTorch optim文档\n 1 概述 1.1 PyTorch文档：torch.optim解读  下图是optim的文档\n  TORCH.OPTIM torch.optim is a package implementing various optimization algorithms. Most commonly used methods are already supported, and the interface is general enough, so that more sophisticated ones can be also easily integrated in the future.\n torch.optim简介\ntorch.optim是PyTorch实现的一个包，里面有各种各样的优化算法，大部分常用的优化算法都已经被支持，接口也十分通用，所以可以用来集成实现更加复杂的系统。\n How to use an optimizer To use torch.optim you have to construct an optimizer object, that will hold the current state and will update the parameters based on the computed gradients.\n 如何使用PyTorch提供的optimizer\n通过torch.optim来创建一个Optimizer对象，这个对象中会保存当前的状态，并且会根据计算的梯度值更新参数。\n Constructing it To construct an Optimizer you have to give it an iterable containing the parameters (all should be Variables) to optimize. Then, you can specify optimizer-specific options such as the learning rate, weight decay, etc.\n NOTE If you need to move a model to GPU via .cuda(), please do so before constructing optimizers for it. Parameters of a model after .cuda() will be different objects with those before the call. In general, you should make sure that optimized parameters live in consistent locations when optimizers are constructed and used.\n  构造Optimizer\n构造Optimizer时，需要传入一个包含需要进行优化的所有参数的iterable对象，所有参数都必须是Variables类型。随后可以进一步设置optimizer的其他具体参数，如learning rate, weight decay, etc.\n注意:\n如果需要将模型移到cuda上(通过.cuda命令)，那么必须先移动模型，再对模型构造optimizer。因为调用.cuda前的模型参数与调用.cuda后的模型参数不同。\n通常来讲，在使用Optimizer对参数进行优化时，需要保证构造和使用时，被优化的参数保存在同一位置。\n以下是实例：\n Example:\noptimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9) optimizer = optim.Adam([var1, var2], lr=0.0001)   Per-parameter options Optimizers also support specifying per-parameter options. To do this, instead of passing an iterable of Variables, pass in an iterable of dicts. Each of them will define a separate parameter group, and should contain a params key, containing a list of parameters belonging to it. Other keys should match the keyword arguments accepted by the optimizers, and will be used as optimization options for this group.\n NOTE You can still pass options as keyword arguments. They will be used as defaults, in the groups that didn\u0026rsquo;t override them. This is useful when you only want to vary a single option, while keeping all others consistent between parameter groups.\n  Per-parameter option\n我个人翻译为逐参数选项。Optimizer在构造的时候同样支持对每个参数进行指定。要实现这种功能，我们不再传入一个含有Variable类型参数的iterable对象，而是传入一个dict字典类型的iterable对象。每个字典都定义了一个参数组，该参数组的key值是\u0026quot;params\u0026quot;，而对应的值为一个包含参数的列表。同样的可以利用字典的键值对Optimizer的其他参数进行指定，但是key必须与Optimizer构造器传参时的关键字一致。这些指定的Optimizer的参数会被单独应用于该字典中的params这些参数。\n注意：你仍然可以在构造器中以关键字方式传入参数，这些参数将被当做默认值使用，如果一组参数没有override这个参数，那么就将自动使用默认的参数值。\n以下是实例：\n For example, this is very useful when one wants to specify per-layer learning rates:\noptim.SGD([ {'params': model.base.parameters()}, {'params': model.classifier.parameters(), 'lr': 1e-3} ], lr=1e-2, momentum=0.9)   This means that model.base\u0026rsquo;s parameters will use the default learning rate of 1e-2, model.classifier\u0026rsquo;s parameters will use a learning rate of 1e-3, and a momentum of 0.9 will be used for all parameters.\n 对于上面这个例子，首先我们可以看到，传入了一个dict的列表。列表中有两个dict，第一个的paramskey 对应的是model.base.parameters()，而没有对Optimizer的其他参数进行具体指定。第二个dict的paramskey对应的是model.classifier.parameters()，此外还有一个键值对，说明了lr的值为1e-3。而在列表之外同时又传入了lr=1e-2,momentum=0.9，这两个值将作为默认值来使用。所以整个Optimizer中，base's parameters将使用默认的学习率1e-2,默认的动量超参数0.9;而classifier.parameters()将使用其dict中提供的学习率1e-3,momentum仍然使用默认值。\n Taking an optimization step All optimizers implement a step() method, that updates the parameters. It can be used in two ways:\n  optimizer.step()   This is a simplified version supported by most optimizers. The function can be called once the gradients are computed using e.g. backward().\n 采取优化步骤\n所有的Optimizer都实现了step()方法，该方法可以用于更新参数。可以通过两种方式使用.step()进行优化：\n第一种方式：optimizer.step()\n该方法是一个简化后的版本，被大多数optimizer所支持。该函数一般在所有梯度值被更新（或者被计算）后进行调用,如在.backward()后进行调用。\n以下是例子：\n Example:\nfor input, target in dataset: optimizer.zero_grad() output = model(input) loss = loss_fn(output, target) loss.backward() optimizer.step()   optimizer.step(closure)   Some optimization algorithms such as Conjugate Gradient and LBFGS need to reevaluate the function multiple times, so you have to pass in a closure that allows them to recompute your model. The closure should clear the gradients, compute the loss, and return it.\n 第二种方式：optimizer.step(closure)\n有一些优化算法例如Conjugate Gradient，LBFGS等需要多次重新计算函数，所以需要传入一个闭包closure，闭包中应该实现的操作有：清零梯度，计算损失并返回。\n以下是例子：\n Example:\nfor input, target in dataset: def closure(): optimizer.zero_grad() output = model(input) loss = loss_fn(output, target) loss.backward() return loss optimizer.step(closure)  具体的各个优化算法的数学原理在此不表，详参手写的笔记本。\n2 如何调整学习率 torch.optim.lr_scheduler模块，提供了一些根据训练次数来调整学习率(learning rate)的方法，一般情况下我们会设置随着epoch的增大而逐渐减小学习率，从而达到更好的训练效果。 而torch.optim.lr_scheduler.ReduceLROnPlateau提供了一些基于训练中某些测量值使得学习率动态下降的办法。\n学习率的调整应该放在optimizer更新之后，参考模板：\ndefine scheduler for epoch in range(1000): train(...) validate(...) scheduler.step() 注意： 在PyTorch 1.1.0之前的版本，学习率的调整应该被放在optimizer更新之前，如果我们1.1.0之后仍然将学习率的调整(即scheduler.step())放在optimizer\u0026rsquo;s update(即optimizer.step)之前，那么learning rate schedule的第一个值将被跳过。所以如果某个代码是在1.1.0之前的版本开发，移植到高版本进行运行，发现效果变差，可以检查是否将scheduler.step()放在了optimizer.step()之前。\n 注：以上部分参考官方文档批示。\n 2.1 torch.optim.lr_scheduler.StepLR 首先贴上官方文档：\n torch.optim.lr_scheduler.StepLR(optimizer, step_size, gamma=0.1, last_epoch=-1, verbose=False)   Decays the learning rate of each parameter group by gamma every step_size epochs. Notice that such decay can happen simultaneously with other changes to the learning rate from outside this scheduler. When last_epoch=-1, sets initial lr as lr.\n StepLR可以根据超参数gamma每隔固定的step_size就衰减learning_rate一次。需要说明的是，这种对learning_rate的更新可以与外界的其他变化同时进行。当last_epoch = -1时，将lr置为初始值。\n Parameters\n optimizer (Optimizer) – Wrapped optimizer. step_size (int) – Period of learning rate decay. gamma (float) – Multiplicative factor of learning rate decay. Default: 0.1. last_epoch (int) – The index of last epoch. Default: -1. verbose (bool) – If True, prints a message to stdout for each update. Default: False.   参数说明\n optimizer(Optimizer) \u0026mdash;\u0026ndash;用于指定scheduler的应用对象。 step_size(int)\u0026mdash;\u0026ndash;用于指定步长，即几次迭代之后进行一次decay gamma(float)\u0026mdash;\u0026ndash;学习率衰减的乘法因子，默认值为0.1 last_epoch(int)\u0026mdash;\u0026ndash;更新的边界index，当等于这个值的时候，重置lr，默认为-1 verbose(bool)\u0026mdash;\u0026ndash;如果为True，每次decay会向stdout输出一条信息。默认为false.  以下是实例：\n Example\n# Assuming optimizer uses lr = 0.05 for all groups # lr = 0.05 if epoch \u0026lt; 30 # lr = 0.005 if 30 \u0026lt;= epoch \u0026lt; 60 # lr = 0.0005 if 60 \u0026lt;= epoch \u0026lt; 90 # ... scheduler = StepLR(optimizer, step_size=30, gamma=0.1) for epoch in range(100): train(...) validate(...) scheduler.step()  可见:每经过一个step_size，\nlr = lr*gamma ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"torch.topk 语法  torch.topk(input, k, dim=None, largest=True, sorted=True, *, out = None)\n 作用 返回输入tensorinput中，在给定的维度dim上k个最大的元素。\n如果dim没有给定，那么选择输入input的最后一维。\n如果largest = False，那么返回k个最小的元素。\n返回一个namedtuple类型的元组(values, indices)，其中indices是指元素在原数组中的索引。\nsorted = True， 则返回的k个元素是有序的。\nParameters   input (Tensor) \u0026ndash; the input tensor\n输入的张量\n  k (int) \u0026ndash; the k in \u0026ldquo;top-k\u0026rdquo;\n返回的k的值\n  dim(int, optional) \u0026ndash; the dimension to sort along\n指定的排序的维度, dim若为-1，文档未说明，但是根据实操效果，应该是对最后一维进行search。\n如shape为Batch_size x p x q，返回结果为Batch_size x p x k。\n  largest(bool, optional) \u0026ndash; controls whether to return largest or smallest elements\nTrue返回最大值，False返回最小值。\n  sorted(bool, optional) \u0026ndash; controls whether to return the elements in sorted order\n控制返回的元素是否排序。\n  例子 \u0026gt;\u0026gt;\u0026gt; x = torch.arange(1., 6.) \u0026gt;\u0026gt;\u0026gt; x tensor([ 1., 2., 3., 4., 5.]) \u0026gt;\u0026gt;\u0026gt; torch.topk(x, 3) torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2])) ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"图解Transformer  Reference: The Illustrated Transformer\n 本文自译用于加深理解与印象。\n关于注意力机制，可以参考先前的Seq2Seq Model with Attention\nTransformer是论文Attention is All You Need提出的。在这篇文章中，我们将尝试把事情弄得简单一点，逐个介绍概念，以便更好理解。\nA High-Level Look 我们首先把模型看作是一个黑箱。在机器翻译领域的应用中，输入一种语言的一个句子，会输出另外其翻译结果。 揭开盖子，我们能够看到一个编码组件encoding component，一个解码组件decoding component，还有其之间的连接关系connections。 编码组件是一堆编码器构成的（Paper中堆叠了六个编码器，六个并没有什么说法，你也可以尝试其他数字）。解码组件也是由一堆解码器构成的（数量与编码器相同）。 所有编码器在结构上都是相同的，然而他们并不共享参数（或权重）。 每一个都可以被拆分为两个子层sub-layers。 编码器的输入首先流过self-attention层，self-attention层可以帮助我们在对某个特定的词进行编码的时候同时关注到句子中其他位置单词的影响。\nself-attention层的输出被送往feed-foward neural network，即前馈神经网络层。完全相同的前馈网络，独立地作用于每一个位置position上。\n解码器也有上述这两个层，但除此以外，在这两层之间，还有一个attention layer，帮助解码器更加关注输入句子中相关的部分。（作用类似于Seq2Seq中的注意力机制的作用。） Bringing The Tensor Into The Picture 现在，我们已经了解了模型的主要组件，下面让我们开始研究各种矢量/张量以及它们如何在这些组件之间流动，以将经过训练的模型的输入转换为输出。\n首先我们将每一个输入单词通过embedding algorithm转换为一个词向量。 嵌入过程只发生在最底部的encoder。对于所有的编码器Encoder，他们都接受一个size为512的向量列表作为输入。只不过对于最底部的Encoder，其输入为单词经过嵌入后得到的词向量，而其他的Encoder的输入，是其下方一层Encoder的输出。列表的size是一个我们可以设定的超参数——通常来讲它会是我们训练集中最长的一个句子的长度。\n在将输入序列中的单词进行Embedding之后，他们中的每一个都会流过编码器的两层。 从这里我们可以看到一个Transformer非常重要的特性，那便是每一个位置上的单词在Encoder中自己的路径上各自流动。在self-attention层中，这些路径之间存在相互依赖。而前馈层feed-forward中彼此间并无依赖。所以在流经前馈层的时候，可以进行并行化处理。\n下面我们将举一个短句的例子，然后观察sub-layer上发生了什么。\nNow We\u0026rsquo;re Encoding 像我们先前提到的，一个编码器接收一个向量列表作为输入。这个向量列表首先被送往self-attention层，然后再送往feed-forward前馈层。处理结束后将其output送往下一个Encoder。  每个位置的单词都被送往一个self attention层，然后再穿过一个前馈神经网络——每个向量独立穿过这个完全相同的网络。\n Self-Attention at a High Level self-attention是Paper中提出的一个全新概念，不要被其简单的命名给迷惑。\n假设我们输入了如下一个句子，并试图进行翻译：\n\u0026ldquo;The animal didn\u0026rsquo;t cross the street because it was too tired\u0026rdquo;\n那么句子中的it指代谁呢？是指街道street还是指动物animal。这个问题对人类来说再简单不过，不过对算法来说却不是这样。\n当处理单词it时，self-attention机制就可以让it与animal联系在一起。\n当模型处理每个单词（即输入序列中的每个position）时，self-attention可以在输入序列中的其他位置中寻找线索，来帮助这个单词获得更好的编码效果。\n如果你熟悉RNN的话，想一下RNN是通过维持一个隐藏状态，来结合先前的处理过的向量与当前的输入向量。 而Self-attention层是结合所有其他相关单词的\u0026quot;理解\u0026quot;，将这些理解“融入”对当前处理单词的编码中。  当我们在最顶端的编码器#5对单词it进行编码时，注意力机制的一部分就会集中在The Animal上，并将它的一部分编码表示（representation，我个人理解为是编码表示）融入到对it的编码中去。\n Self-Attention in Detail 我们先看一下如何使用向量来计算self-attention，然后再看一次它真正的实现方式——通过矩阵计算。\nSelf-Attention的第一步：为输入的向量列表中的每一个向量(在这里的例子，由于是最底层，所以输入的是单词的Embedding)都创建三个向量。所以对于每个单词而言，我们创建了一个Query vector，一个Key vector，一个Value vector。这三个向量是通过将输入向量乘以三个矩阵（矩阵是在训练中得到的）而得到的。\n值得关注的是，这些新的向量在维度上比输入向量更小。他们的维度是64，而embedding和编码器的input/output向量的维度是512。这些向量并不是必须要比原来的维度更小，这仅仅是一种架构上的选择，为的是multiheaded attention的计算恒定。\n 用$x_1$乘以权重矩阵$W^Q$就得到了$x_1$的query vector-$q1$。类似这样，我们最终为输入序列中的每个单词都创造一个query，一个key，以及一个value投影。\n 第二步：计算score。例如当我们计算下例中的第一个单词\u0026quot;Thinking\u0026quot;时，我们需要基于当前单词，为输入句子中其他位置的每个单词打分（有一点条件概率的意思）。这个分数决定了在我们对这个单词进行编码的时候，对输入序列的单词需要给予多少注意力。\n该分数通过将query vector与key vector进行点积操作dot product来得到。所以当我们对位置1的单词计算其self-attention时，第一个分数会是q1和k1的点积。第二个分数是q1和k2的点积。 第三步是将这些分数除以8(8是论文中key vector维度64的平方根，这可以使得梯度更加稳定，同时你可以选取其他的值)。\n第四步是经过一个softmax操作，softmax可以保证score经过处理后全部为正，而且加和为1. softmax score决定了每个单词将对这个position的下一次编码起到多大作用。显然，当前位置的单词会有最大的softmax score，但是无疑，关注与当前单词有关的单词是很有用。\n第五步：是将每个值向量value vector乘以其对应的softmax分数（要准备将他们加在一起了），这一步的动机就是放大那些我们focus的单词，而淡化那些不那么重要的单词。\n第六步：将所有加权后的值向量weighted value vector（上一步得到的）相加，得到self-attention层对于该位置（例子中是第一个单词）的输出。 以上就是self-attention的计算过程。得到的向量是一个我们可以直接送往前馈神经网络的向量。 在实际的实现中，我们通过矩阵运算来更快的处理。\nMatrix Calculation of Self-Attention 第一步： 计算Query,Keyand Value矩阵。我们通过把输入的向量打包为一个矩阵，然后乘以我们训练得到的权重矩阵计算之。  X中的每一行对应输入序列中的一个单词。我们从图中又一次可以看到embdding vector和q/k/v向量的在维度上是不同的。\n 最后：由于我们使用矩阵进行数据处理，我们可以把2-6步浓缩到一步，直接计算出self-attention层的输出。 The Beast With Many Heads 论文随后进一步细化了self-attention层，为其增加了一种叫做multi-headed attention的机制。它通过两种方式提升attention-layer的表现。\n \u0026ldquo;Multi-head\u0026quot;扩展了模型focus于不同位置的能力。就像上面那个例子一样，z1包含有其他每个字母编码的一小部分，但其主要还是被其本来位置上的单词所主宰。在我们翻译类似\u0026quot;The animal didn\u0026rsquo;t cross the street because it was too tired\u0026quot;这种句子时，Multi-Head Attention是非常有用的，因为我们想要知道it指代的是谁。 \u0026ldquo;Multi-head\u0026quot;给了Attention Layer一些代表子空间representation subspaces。Multi-Headed Attention机制下，我们不再是只有一组权重矩阵，而是有多组权重矩阵(Transformer中使用了八个attention head，所以我们最后会得到八组Query/Key/Value的权重矩阵。每一组都是随机初始化， 然后经过循环后，每一组都用于将输入向量投影到不同的子空间中representation subspace。    Multi-headed Attention机制下，我们分别保存着每个子空间(each head)的Q/K/V矩阵。\n 那么为上述八组Q/K/V矩阵，分别做完上述的self-attention计算后，我们会得到八个不同的Z矩阵。 然后迎面而来的就有一个小问题，前馈神经网络并不需要8个矩阵，它期待的输入是一个矩阵，其中每一个向量代表一个单词。所以我们需要一种方法来将八个矩阵浓缩为一个。\n怎么做呢？我们concatenate这些矩阵，然后将拼接后的矩阵乘以一个额外的weights matrix\u0026ndash;$WO$。所得到的结果Z就会捕捉到所有attention head中包含的信息，然后这个Z被送往FFNN。 以上就是Multi-head self-attention的全部，下面我们将所有的信息集合在一张图中： 说完了attention-head，我们回顾一下先前的例子，看一下不同的attention head在我们对it进行编码的是如何focus的。  当我们编码单词it时，一个attention head更集中于the animal上，另一个更集中于tired上。从语义上分析，it在编码时融入了animal和tired的representation\n 所有attention head全部加进来的情况如下，语义上有点难解释。 Representing The Order of the Sequence Using Positional Encoding 以上我们描述的模型中，缺失了单词在输入序列中的输入顺序。（没有时序信息）\n为了记录这一点，Transformer为每个input embedding加上了一个向量。这些向量遵循模型学习的一种特定模式specific pattern，有助于确定每个单词的位置，或序列中不同单词之间的距离。这里的直觉是：将这些值添加到embedding中，当其被投影到Q/K/V向量中或者在进行点积操作时，就会提供有意义的距离信息。 假设embedding是四维的话，那么实际的positional encoding看起来可能是这个样子: 而pattern看起来应该是什么样子？\n在下图中，每一行对应一个向量的位置信息的编码结果。所以第一行就是我们将要加到输入序列中第一个单词的embedding结果上的向量。每一行含有512个值，每个值的取值范围都是[-1,1],下图进行了可视化。 positional encoding的公式在论文中详细描述了，而且这也不是唯一的对位置信息进行编码的方法。但是论文中的编码方式有一个优势：可以对未训练过的序列长度进行很好的缩放。\nThe Residuals 一个encoder架构的细节是： 在每个sub-layer之后，都有一个residual connection，随后是一个layer-normalization归一化操作。 如果我们将向量和layer-norm与self attention的操作形象化，它看起来会是这样： 对于解码器的子层，也是这样。如果我们把它想象成一个由两个堆叠的编码器和解码器（Paper中是六个），它看起来应该是这样的。 The Decoder Side 我们已经讨论了编码器方面的绝大部分概念，也知道了其是如何工作的。下面让我们看一下他们是怎么样一起工作的。\n编码器从处理输入序列开始，最顶端的编码器的输出随后被转换为attention vector $K,V$的集合。这些向量在每一个解码器decoder的encoder-decoder层使用，用于帮助解码器focus在input sequence的恰当位置。  注：上图是一张动图，链接：https://jalammar.github.io/images/t/transformer_decoding_1.gif\n 下面的步骤重复这个过程，直到遇到终止符（表明decoder已经完成输出）。每一步的输出都会在下一个时间步反馈给最底层的解码器，解码器会将其输出一层一层向上bubble up，就像编码器所做的一样。同时，我们也为解码器的输入加上了位置信息的编码。\n解码器中的self-attention layer与编码器中有微微的一些不同。\n在解码器中，self-attention layer只允许将时序上在前的位置信息“融合”进输出序列，这是通过在softmax步前进行mask来完成的。\n而Encoder-Decoder Attention层的工作原理，类似于Multiheaded self-attention，不同的是，它从其下一层创建Query Matrix， 而Key和Value矩阵都来自编码器最上层的输出。\nThe Final Linear and Softmax Layer 解码器输出的是一个浮点数的向量，我们应该如何将其转换为单词呢？这就是最后一个线性层的工作，其后还跟着一个Softmax层。\nLinear Layer是一个简单的全连接神经网络，将解码器产生的向量投影到一个维度大的多的向量logits vector\n假设我们的模型从训练集中学到了10000个不同的英文单词，那么我们的logits vector就有10000个元素，每个都对应着一个单词的score。这就是我们将其转换成单词的方法。\nSoftmax 层随后将这些score转换为概率，有最高概率的单词被选中，然后输出。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"为什么要有Tensor.contiguous() Tensor.contiguous()作用  Returns a contiguous in memory tensor containing the same data as self tensor. If self tensor is already in the specified memory format, this function returns the self tensor.\n 作用在官方文档里，描述的看似清晰但又模棱两可。例如x是一个Tensor，x.contiguous()的作用就是返回一个在内存中连续的Tensor，其data与Tensorx一致。如果源x本来就在内存中连续的话，那就返回其本身。\n为什么要有Tensor.contiguous()?  Reference: StackOverflow\u0026ndash;Why do we need contiguous?\n 在PyTorch中，有些对Tensor的操作并不实际改变tensor的内容，而只是改变如何根据索引检索到tensor的byte location的方式。\n这些操作有：\n narrow(), view(), expand(), transpose()，permute()\n 例如： 当我们调用transpose()时，PyTorch并不会生成一个具有新的layout（大概可以翻译为布局）的新tensor。该操作仅仅改变了tensor中的meta information（元信息），所以offset和stride可以正确作用于新的shape。但是转置后的tensor和源tensor在事实上是共享同一块内存空间的。\n\u0026gt;\u0026gt;\u0026gt; x = torch.randn(3,2) \u0026gt;\u0026gt;\u0026gt; print(x) tensor([[ 0.9181, 1.4266], [-0.1432, -0.7514], [ 0.9809, -0.5079]]) \u0026gt;\u0026gt;\u0026gt; print(x[0,0]) tensor(0.9181) \u0026gt;\u0026gt;\u0026gt; y = x.transpose(1,0) \u0026gt;\u0026gt;\u0026gt; print(y) tensor([[ 0.9181, -0.1432, 0.9809], [ 1.4266, -0.7514, -0.5079]]) \u0026gt;\u0026gt;\u0026gt; print(y[0,0]) tensor(0.9181) 这就是contiguous的来源。上述例子中x是连续的，但是y不是，因为y的内存布局与从头开始新建一个与yshape相同的tensor的内存布局不同。\n需要注意的是，contiguous这个单词有点被误解了，它并不是指tensor的内容在内存块上不连续。字节仍然是分配在同一个内存块上的，问题在于其元素之间的顺序order。\n而当我们调用contiguous()时，实际上它是会复制一个张量，同时元素之间在内存上的顺序与从零开始新建的相同shape的张量一致。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"克罗内克内积 Kronecker product $\\otimes$ 1.1 概述 克罗内克内积是一种特殊的张量积。任何两个形状的矩阵都可以进行克罗内克内积操作。\n1.2 定义 Definition $A \\otimes B$的定义：A是mxn矩阵，B是pxq矩阵。$A \\otimes B$是mp x nq的分块矩阵。 例子： 1.3 性质 1.3.1 双线性结合律 1.3.2 不满足交换律 1.3.3 混合乘积性 ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"协方差矩阵详解以及numpy计算协方差矩阵(np.cov) 协方差矩阵详解 均值，标准差与方差 由简单的统计学基础知识，我们有如下公式：\n\\bar X{\\rm{ = }}\\frac{{\\sum\\limits_{i = 1}^n {{X_i}} }}{{\\rm{n}}} S = \\sqrt {\\frac{{\\sum\\limits_{i = 1}^n {{{({X_i} - \\bar X)}^2}} }}{{n - 1}}} {S^2} = \\frac{{\\sum\\limits_{i = 1}^n {{{({X_i} - \\bar X)}^2}} }}{{n - 1}} 其中$\\bar X$是样本均值，反映了n个样本观测值的整体大小情况。\n$S$是样本标准差，反应的是样本的离散程度。标准差越大，数据越分散。\n$S^2$是样本方差，是$S$的平方。\n均值虽然可以在一定程度上反应数据的整体大小，但是仍然不能反应数据的内部离散程度。而标准差和方差弥补了这一点。\n但是标准差和方差都是针对一维数组的，即1 x d数组。该数组的行代表的是一个随机变量（可理解为属性），如工资等。每一列代表一个观测值。如果一个事物具有多种属性，即有多个随机变量，那么我们会得到一个var_num x d数组。该数组的每一行都是一个随机变量（属性），每一列代表着一个在这些属性维度上的观测值样本。如果我们想要分析该事物，那么仅仅将其剥离为单独的1 x d去求其标准差是不够的，我们还需要关注这些随机变量（属性）variable内部之间的联系。如工资和年龄的联系，工资和技术水平的联系等。\n所以便自然而然的引入了协方差。\n协方差 两个随机变量的协方差反映了这两个随机变量一致的分散程度有多大。\n通俗的讲，协方差反映了两个随机变量的正负相关关系。\n由方差的公式，我们可以类比得出协方差的公式：\n{\\mathop{\\rm var}} (X) = {S^2} = \\frac{{\\sum\\limits_{i = 1}^n {({X_i} - \\bar X)({X_i} - \\bar X)} }}{{n - 1}} {\\mathop{\\rm cov}} (X,Y) = \\frac{{\\sum\\limits_{i = 1}^n {({X_i} - \\bar X)({Y_i} - \\bar Y)} }}{{n - 1}} = E((X - E(X))(Y - E(Y))) 相关系数$\\rho$与协方差直接有如下关系：\n\\rho = \\frac{{Cov(X,Y)}}{{{\\sigma _X}{\\sigma _Y}}} = \\frac{{E((X - E(X))(Y - E(Y)))}}{{{\\sigma _X}{\\sigma _Y}}} = E((\\frac{{X - E(X)}}{{{\\sigma _X}}})(\\frac{{Y - E(Y)}}{{{\\sigma _Y}}}) 从上述公式可见，相关系数$\\rho$实际上也是一种特殊的协方差。相关系数是数据X和Y做了归一化$x = \\frac{{(X - \\bar X)}}{{{\\sigma _X}}}$,$y = \\frac{{(Y - \\bar Y)}}{{{\\sigma _Y}}}$之后的协方差。$x,y$的方差为1，期望为0。有：\n\\rho(X,Y) = cov(x,y) 协方差的意义此时应该很清晰了。\n协方差矩阵 对于具有很多个随机变量的数据，随机变量之间两两都具有一个协方差，这样便形成了一个协方差矩阵。 假设我们有一组数据，其具有三个随机变量，n个观测值：\n那么其协方差矩阵为： 我们可以使用一种便捷的矩阵乘法来计算协方差矩阵。设原数据数组为$X$。先对X进行处理，求X每一个随机变量的均值。然后对于每一行，减去该行随机变量的均值，得到$X^{'}$，记协方差矩阵为M，那么就有:\nM = \\frac{{X^{'}{X^{'}}^{T}}}{{n-1}} 用代码描述可能更加清晰:\na = np.array([[1,2,3],[4,5,7]]) cov1 = np.cov(a) mean_a = np.mean(a,axis=1,keepdims=True) tmpa = a-mean_a cov2 = np.matmul(tmpa,tmpa.T)/(tmpa.shape[1]-1) print(cov1) print(cov2) numpy计算协方差矩阵np.cov() 语法 numpy.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,dtype)\n用于计算给定矩阵和权值的协方差矩阵。\nParameters  m:array_like   A 1-D or 2-D array containing multiple variables and observations. Each row of m represents a variable, and each column a single observation of all those variables. Also see rowvar below.\n 一维或者二维数组，包含有多个随机变量和观测值。m的每一行代表一个随机变量，每一列代表包含所有随机变量的一个观测值。当给一维数组时，相当于计算的就是方差。\n y:array_like,optional   An additional set of variables and observations. y has the same form as that of m.\n 额外的一组数据，y必须在在数据形式上与m一致。\n如果m.shape = (var_num, obs_num)，那么y.shape必须在第二维观测值个数上，即shape[1]与m保持一致，即y也得有obs_num个观测值。实际执行时，会先将这两组数据concatenate，然后再求解。\nExample\na = np.array([[1,2,3],[4,5,7]]) b = np.array([[1,2,3,4],[4,5,6,7]]) cov = np.cov(a,b) 执行结果： 从执行结果上可见，报错。报错的具体描述便是，两组数据在dimension1不一致。 我们也可以从numpy.cov()源码中看到：\nif y is not None: y = array(y, copy=False, ndmin=2, dtype=dtype) if not rowvar and y.shape[0] != 1: y = y.T X = np.concatenate((X, y), axis=0) 可见是对其进行了concatenate.\n bias: bool, optional   Default normalization (False) is by (N - 1), where N is the number of observations given (unbiased estimate). If bias is True, then normalization is by N. These values can be overridden by using the keyword ddof in numpy versions \u0026gt;= 1.5\n 默认的采用无偏估计，即除以(N-1)，N是样本个数。可以被ddof所覆盖。\n rowvar : bool, optional   If rowvar is True (default), then each row represents a variable, with observations in the columns. Otherwise, the relationship is transposed: each column represents a variable, while the rows contain observations.\n rowvar指定了行列谁为随机变量的问题。默认为True，即行代表一个随机变量。而列代表观测值。如果为False，那么列代表随机变量，而行代表观测值。\n ddof : int, optional   If not None the default value implied by bias is overridden. Note that ddof=1 will return the unbiased estimate, even if both fweights and aweights are specified, and ddof=0 will return the simple average. See the notes for the details. The default value is None.\n .. versionadded:: 1.5   fweights : array_like, int, optional   1-D array of integer frequency weights; the number of times each observation vector should be repeated.\n .. versionadded:: 1.10  一维int数组，shape[0]应当与数据的观测值个数一致(即当rowvar=True时候的shape[1])。指定每个观测值的频率权重，即这个观测值向量(column)应该被重复计算几次。\n aweights : array_like, optional   1-D array of observation vector weights. These relative weights are typically large for observations considered \u0026ldquo;important\u0026rdquo; and smaller for observations considered less \u0026ldquo;important\u0026rdquo;. If ddof=0 the array of weights can be used to assign probabilities to observation vectors.\n .. versionadded:: 1.10  一维数组，其shape[0]同样的，应该与观测值个数一致。指定的是每个计算权重，即较重要的观测值其aweight大一些，不那么重要的可以小一些。当ddof为0的时候，相当于观测值的概率。\n Return：  out: ndarray: The covariance matrix of the variables.    Example 由于不太直观，所以不举例。分析一下源码。\n源码  if ddof is not None and ddof != int(ddof): # 这里说明ddof必须是int类型 raise ValueError( \u0026quot;ddof must be integer\u0026quot;) # Handles complex arrays too m = np.asarray(m) # 所以m的输入类型可以是lists, lists of tuples #tuples, tuples of tuples, tuples of lists and ndarrays. if m.ndim \u0026gt; 2: # 不能超过两维 raise ValueError(\u0026quot;m has more than 2 dimensions\u0026quot;) if y is None: # 如果y是None，返回数组类型取原数组类型 # 与np.float64精度高的那一个。 dtype = np.result_type(m, np.float64) else: # 有y输入则先处理y，判断y的维度，再判断数据类型 y = np.asarray(y) if y.ndim \u0026gt; 2: raise ValueError(\u0026quot;y has more than 2 dimensions\u0026quot;) dtype = np.result_type(m, y, np.float64) X = array(m, ndmin=2, dtype=dtype) if not rowvar and X.shape[0] != 1: # 如果rowvar为False就转置 X = X.T if X.shape[0] == 0: return np.array([]).reshape(0, 0) if y is not None: # 对y进行处理 y = array(y, copy=False, ndmin=2, dtype=dtype) if not rowvar and y.shape[0] != 1: # 判断rowvar是否转置 y = y.T X = np.concatenate((X, y), axis=0) # concatenate if ddof is None: # 如果未指定ddof if bias == 0: # 如果指定了bias=0,ddof=1,无偏 ddof = 1 else: # 否则ddof=0 ddof = 0 # Get the product of frequencies and weights w = None if fweights is not None: fweights = np.asarray(fweights, dtype=float) if not np.all(fweights == np.around(fweights)): # round进行取整 # 取整后判断是否全部相等，来判断全都是整数，必须全是整数，否则报错 raise TypeError( \u0026quot;fweights must be integer\u0026quot;) if fweights.ndim \u0026gt; 1: # 必须一维 raise RuntimeError( \u0026quot;cannot handle multidimensional fweights\u0026quot;) if fweights.shape[0] != X.shape[1]: # 必须与观测数一致 raise RuntimeError( \u0026quot;incompatible numbers of samples and fweights\u0026quot;) if any(fweights \u0026lt; 0): #必须全部为正值 raise ValueError( \u0026quot;fweights cannot be negative\u0026quot;) w = fweights # 将fweight赋给w if aweights is not None: aweights = np.asarray(aweights, dtype=float) if aweights.ndim \u0026gt; 1: raise RuntimeError( \u0026quot;cannot handle multidimensional aweights\u0026quot;) if aweights.shape[0] != X.shape[1]: raise RuntimeError( \u0026quot;incompatible numbers of samples and aweights\u0026quot;) if any(aweights \u0026lt; 0): raise ValueError( \u0026quot;aweights cannot be negative\u0026quot;) if w is None: w = aweights # 如果fweight为空，就直接把aweight赋给w else: w *= aweights # 否则w = fweight * aweight avg, w_sum = average(X, axis=1, weights=w, returned=True) # 以列为操作单元，求每一个随便变量的所有观测值在权重w下的均值。 # w_sum为w的所有元素的和（权重和）。 w_sum = w_sum[0] # Determine the normalization if w is None: # 如果w为None，那么直接用X的观测值个数（列数）减ddof fact = X.shape[1] - ddof elif ddof == 0: # w不为空，ddof等于0，需要除以的分母就是 w_sum fact = w_sum elif aweights is None: # w不为空，aweight为空，ddof不为0 # 直接用 w_sum-ddof(因为此时的w_sum就相当于重复后的观测值个数) fact = w_sum - ddof else: # w不为空，aweight也不为空， fweight也不为空，ddof != 0 # fact就相当于w_sum减去以w为权重的aweight的平均值乘以ddof # 当aweigth=None的时候，是这个公式的一个特殊情况 # 在这里猜测：ddof： duplicated degreeds of freedom # 即重复无效的自由度 fact = w_sum - ddof*sum(w*aweights)/w_sum if fact \u0026lt;= 0: warnings.warn(\u0026quot;Degrees of freedom \u0026lt;= 0 for slice\u0026quot;, RuntimeWarning, stacklevel=3) fact = 0.0 X -= avg[:, None] # X减去均值 if w is None: X_T = X.T else: X_T = (X*w).T # 乘以权重 c = dot(X, X_T.conj()) # X 乘以 X的转置的复共轭矩阵（对标量而言就是转置） c *= np.true_divide(1, fact) # 再除以fact return c.squeeze() # 删去c中dim为1的维度，输出。 以上就是我对np.cov()的全部解读。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"循环神经网络 前言 我们知道，在n元语法中，时间步$t$的词$w_t$基于前面所有词的条件概率只考虑了最近时间步的$n-1$个词。如果要考虑比$t-(n-1)$更早时间步的词对$w_t$的可能影响，我们需要增大n。\n其下介绍的循环神经网络，它并未刚性地记忆所有固定长度的序列，而是通过隐藏状态来存储之前时间步的信息。\n不含隐藏状态的神经网络 考虑一个含单隐藏层的多层感知机，给定样本数为$n$、输入个数（特征数或者特征向量维度）为$d$的小批量数据样本$X \\in R^{n \\times d}$，设隐藏层的激活函数为$\\phi$，那么隐藏层的输出$H \\in R^{n \\times h}$计算为：\nH = \\phi(XW_{xh} + b_h) 其中隐藏层权重参数$W_{xh} \\in R^{d \\times h}$， 隐藏层偏差参数$b_h \\in R^{1 \\times h}$，$h$为隐藏单元个数。上式相加的两项形状不同，因此按广播机制相加，将隐藏变量$H$作为输出层的输入，且输出个数为$q$（如分类问题中的类别数），输出层的输出为：\nO = HW_{hq} + b_q 其中输出变量$O \\in R^{n \\times q}$，输出层权重参数$W_{hq} \\in R^{h \\times q}$，输出层偏差参数$b_q \\in R^{1 \\times q}$。如果是分类问题，我们可以使用$softmax(O)$来计算输出类别的概率分布。\n含隐藏状态的循环神经网络 现在我们考虑输入数据存在时间相关性的情况，假设$X_t \\in R^{n \\times d}$是序列中时间步t的小批量输入，$H_t \\in R^{n \\times h}$是该时间步的隐藏变量。与多层感知机不同的是，这里我们保存上一时间步的隐藏变量$H_{t-1}$，并引入一个新的权重参数$W_{hh} \\in R^{h \\times h}$，该参数用于描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，时间步t的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定。\nH_t = \\phi(X_tW_{xh} + H_{t-1}W_{hh} + b_h) 与多层感知机相比，我们在这里添加了$H_{t-1}W_{hh}$一项。由上式中相邻时间步的隐藏变量$H_t$,$H_{t-1}$之间的关系可知，这里的隐藏变量能够捕捉截止到当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或者记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了上一时间步的隐藏状态，上式的计算是循环的。使用循环计算的网络即循环神经网络(recurrent neural network)。\n循环神经网络有很多种不同的构造方法，含上式所定义的隐藏状态的循环神经网络是极为常见的一种。\n循环神经网络的参数包括隐藏层的权重$W_{xh} \\in R^{d \\times h}$、$W_{hh} \\in R^{h \\times h}$和偏差$b_h \\in R^{1 \\times h}$，以及输出层的权重$W_{hq} \\in R^{h \\times q}$和偏差$b_q \\in R^{1 \\times q}$。值得一提的是，即便在不同时间步，循环神经网络也始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的增长而增长。\n下图展示了循环神经网络在3个相邻时间步的计算逻辑。在时间步$t$，隐藏状态的计算可以看成是将输入$X_t$和前一时间步隐藏状态$H_{t-1}$连结后输入一个激活函数为$\\phi$的全连接层。该全连接层的输出就是当前时间步的隐藏状态$H_t$，且模型参数为$W_{xh}$与$W_{hh}$的连结，偏差为$b_h$。当前时间步$t$的隐藏状态$H_t$将参与下一个时间步$t+1$的隐藏状态$H_{t+1}$的计算，并输入到当前时间步的全连接输出层。 隐藏状态中$X_tW_{xh} + H_{t-1}W_{hh} $的计算等价于$X_t$与$H_{t-1}$连结的矩阵乘以$W_{xh}$与$W_{hh}$连结后的矩阵。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"概述 在概率论与统计学中，狄利克雷分布 Dirichlet distribution 常被简记为$Dir(\\alpha)$,是基于一个正实数向量$\\alpha参数的连续多元概率分布族。狄利克雷分布是对贝塔分布 beta distribution的多元泛化，所以它也被称为多元贝塔分布 multivariate beta distribution(MBD)。\n狄利克雷分布被广泛作为贝叶斯统计的先验分布使用。同时，狄利克雷分布也是分类分布Categorical distribution 和多项分布categorical distribution 的共轭先验。\n狄利克雷分布的无限维推广就是狄利克雷过程Dirichlet process\n#\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"Matrix Differentiation（矩阵求导）  References: Matrix Differentiation,Rabdak J.Barnes \n 注： 本文直接从Matrix Differentiation开始记录，之前的乘法等基础部分不表。\nConvention 3 m维向量对n维向量求导所得的结果是一个mxn矩阵,即Jacobian Matrix。 具体形式见上公式。\n命题5 Proposition 5 即：Ax对x求导，结果为A\nProof 命题6 Proposition 6 即：y=Ax，而x是z的函数，那么便有$\\frac{{\\partial {\\rm{y}}}}{{\\partial z}} = A\\frac{{\\partial x}}{{\\partial z}}$\nProof 命题7 Proposition 7 对于$\\alpha = y^TAx$分别对x和y求导的结论。\nProof 命题8 Proposition 8 对于$\\alpha = x^TAx$对x求导的结论。\nProof 命题9 Proposition 9 即命题8的特例，A是对称矩阵。\n命题10 Proposition 10 即$\\alpha = y^Tx$，而y和x均为向量z的函数，对z求导的结果。\nProof 命题11 Proposition 11 命题10的特例，$y=x$\n命题12 Proposition 12 对于$\\alpha = y^TAx$,x和y都是向量z的函数，对z求导的结果。\nProof 命题13 Proposition 13 命题12的特例：$y=x$\n命题14 Proposition 14 命题13的特例：A是对称矩阵\n命题15 Propostion 15 Proof ","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"语言模型 前言 DCP用到了Transformer，其很多实现的Motivation都来自于Sq2Sq的启发。所以重新回顾学习语言模型。\n语言模型 语言模型是自然语言处理的重要技术。自然语言处理中最常见的数据是文本数据。 我们可以把一段自然语言文本看做一段离散的时间序列。假设一段长度为T的文本中的词依次为$w_1,w_2,...,w_T$， 那么在离散的时间序列中，$w_t(1 \\le t \\le T )$可以看做在时间步t的输出。给定一个长度为T的词的序列$w_1,w_2,...,w_T$。语言模型将计算该序列的概率：\nP(w_1,w_2,...,w_T) 语言模型的计算 假设序列$w_1,w_2,...,w_T$中的各个词是依次生成的，我们有：\nP(w_1,w_2,...w_T) = \\prod\\nolimits_{t = 1}^{\\rm{T}} {P(w_t|w_1,...,w_{t-1})} 例如，一段含有四个词的文本序列的概率：\nP(w_1,w_2,w_3,w_4) = P(w_1)P(w2|w_1)P(w_3|w_1,w_2)P(w_4|w_1,w_2,w_3) 为了计算语言模型，我们需要计算词的概率，以及一个词在给定的前几个词的情况下的条件概率，即语言模型参数。设训练数据集为一个大型文本语料库，词的概率可以通过该词在训练数据集中的相对词频来计算。例如，$P(w_1)$可以计算为$w_1$在训练数据集中的词频与训练数据集的总词数之比。因此，根据条件概率定义，一个词在给定前几个词的情况下的条件概率也可以通过训练数据集中的相对词频计算。例如$P(w_2|w_1)$可以计算为$w_1,w_2$两词相邻的频率与$w_1$词频的比值，即$P(w_1,w_2)$与$P(w_1)$之比。以此类推。\nn元语法 当序列长度增加时，计算和存储多个词共同出现的概率的复杂度会呈指数级增加。n元语法通过马尔可夫假设（并不一定成立）简化了语言模型的计算。这里的马尔科夫假设是指一个词的出现如果只与前面n个词相关，即n阶马尔科夫链。如果$n=1$，那么有：$P(w_3|w_1,w_2) = P(w_3|w_2)$。如果基于$n-1$阶马尔科夫链，我们可以将语言模型改写为：\nP(w_1,w_2,...,w_T) \\approx \\prod\\nolimits_{t=1}^{\\rm{T}} {P(w_t|w_{t-(n-1)},...,w_{t-1})} 以上称为n元语法(n-grams)。它是基于n-1阶马尔科夫链的概率语言模型。当n分别为1，2和3时，我们将其分别称作一元语法(unlgram)、二元语法(blgram)和三元语法(trlgram)。例如，长度为4的序列$w_1,w_2,w_3,w_4$在一元语法，二元语法和三元语法中的概率分别为： 当n较小时，n元语法往往并不准确。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":" Reference: Wikipedia:Bayesian_inference\n   Bayesian inference is a method of statistical inference in which Bayes' theorem is used to update the probability for a hypothesis as more evidence or information becomes available. Bayesian inference is an important technique in statistics, and especially in mathematical statistics. Bayesian updating is particularly important in the dynamic analysis of a sequence of data. Bayesian inference has found application in a wide range of activities, including science, engineering, philosophy, medicine, sport, and law. In the philosophy of decision theory, Bayesian inference is closely related to subjective probability, often called \u0026ldquo;Bayesian probability\u0026rdquo;.\n 贝叶斯推理是一种统计推理方法，利用贝叶斯定理更新假设的概率，来获得更多的证据与信息。贝叶斯推理是统计学尤其是数理统计中的一项重要技术。贝叶斯更新在对于序列化数据的动态分析中非常重要。贝叶斯推断被广泛应用于科学研究，工程等领域。在决策理论哲学中，贝叶斯推理与主观概率密切相关，经常被称为贝叶斯概率。\n贝叶斯规则简介(Introduction to Bayes' rule) 形式化解释(Formal explanation)  Bayesian inference derives the posterior probability as a consequence of two antecedents: a prior probability and a \u0026ldquo;likelihood function\u0026rdquo; derived from a statistical model for the observed data. Bayesian inference computes the posterior probability according to Bayes' theorem.\n 贝叶斯推理根据两个前因式的结果来得到后验概率：一个先验概率；一个由观测数据的统计模型得出的似然函数。贝叶斯推理根据贝叶斯公式来计算后验概率。\n贝叶斯公式：\nP(H|E) = \\frac{{P(E|H) \\cdot P(H)}}{{P(E)}} 上述公式中：\n $H$代表其概率可能受到数据（下称证据evidence)影响的任何假设。通常这些假设是相互竞争的，而我们的任务就是决定哪一个是最有可能的。 $P(H)$,先验概率(prior probability),是在数据$E$（即当前得到的证据）被观测到前，对假设$H$的概率估计。 $E$,即证据(evidence),指那些未被用于计算先验概率的新数据。 $P(H|E)$，后验概率（posterior probability），是指$H$给予$E$以后的概率，即在观测到证据$E$以后，更新的概率。后验概率就是我们想要得到的：在当前观测到的证据下，某个假设发生的概率有多大。 $P(E|H)$, 是在假设$H$的前提下观测到证据$E$的概率，被称为似然函数(likelihood)。作为固定$H$下$E$的函数，它体现了当前证据与给定假设的相容性。似然函数是证据$E$的函数，而后验概率是假设$H$的函数。 $P(E)$，被称作边际似然函数或者模型证据。该因子对所有被考虑到的可能的假设都相同（可以明显的看出，符号表达式中并没有$H$），所以该因子不会影响各个假设间的相对概率。  对于不同的$H$，只有$P(H)$和$P(E|H)$这两项在分子上的因子会影响后验概率$P(H|E)$的值。也就是说，后验概率与其先验概率（固有的可能性）和新获得的似然函数（与新获得的证据的相容性）成正比。\n贝叶斯规则也可以被写成如下形式：\n\\frac{{P(E|H)P(H)}}{{P(E)}} = \\frac{{P(E|H)P(H)}}{{P(E|H)P(H) + P(E|\\neg H)P(\\neg H)}} = \\frac{1}{{1 + (\\frac{1}{{P(H)}} - 1)\\frac{{P(E|\\neg H)}}{{P(E|H)}}}} 这是由于：\nP(E) = {P(E|H)P(H) + P(E|\\neg H)P(\\neg H)} P(H)+P(\\neg H)=1 贝叶斯推理的形式化描述(Formal description of Bayesian inference) 定义 Definitions  $x$： 一个数据点，事实上可能是一个值向量vector。 $\\theta$，数据点所对应的分布的参数，即$x \\sim p(x|\\theta)$。事实上，$\\theta$可能是许多参数组成的向量。 $\\alpha$，参数分布的超参数，即$\\theta \\sim p(\\theta | \\alpha)$。可能是由很多超参数构成的一个向量。 $X$代表采样，一个由$n$个观测的数据点构成的集合。即$x_1,...,x_n$ ${\\tilde x}$，一个新的数据点，其分布需要被预测。  贝叶斯推理 Bayesian inference  先验分布 prior distribution，是指参数在没有任何新数据被观测到的情况下的概率分布，即$p(\\theta|\\alpha)$。先验分布可能不容易确定，在这种情况下，我们可以先采用Jeffrets Prior去获得一个先验分布的初始值，然后使用观测到的数据进行更新迭代。 采样分布 sample distribution，是指观测数据$X$在其参数条件下的分布，即$p(X|\\theta)$，更确切的说，由于$\\theta$服从参数条件$\\alpha$下的概率分布，采样分布也可以写为$p(X|\\theta,\\alpha)$。但是为了不引起歧义与混淆，我们一般都写为$p(X|\\theta)$。采样分布有时候也被称为似然函数, 尤其是当其被视为是参数$\\theta$的函数时。有时候写作$L(\\theta|X) = p(X|\\theta)$。 边际似然函数 marginal likelihood，有时也被称为证据evidence，是观测数据marginalized out $\\theta$后得到的边缘分布，即$p(X|\\alpha ) = \\int_\\theta {p(X|\\theta )p(\\theta |\\alpha )d\\theta }$ 后验分布 posterior distribution 是指在考虑新观测的数据后的参数分布。它由贝叶斯规则决定，形成了贝叶斯推理的核心。  p(\\theta |X,\\alpha ) = \\frac{{p(\\theta ,X,\\alpha )}}{{p(X,\\alpha )}} = \\frac{{p(X|\\theta ,\\alpha )p(\\theta ,\\alpha )}}{{p(X|\\alpha )p(\\alpha )}} = \\frac{{p(X|\\theta ,\\alpha )p(\\theta |\\alpha )}}{{p(X|\\alpha )}} \\propto p(X|\\theta ,\\alpha )p(\\theta |\\alpha ) 用语言描述就是：后验正比于先验乘以似然。 后验等于似然乘以先验除以证据。\n \u0026ldquo;posterior is proportional to likelihood times prior\u0026rdquo;, or sometimes as \u0026ldquo;posterior = likelihood times prior, over evidence\u0026rdquo;\n 贝叶斯预测 Bayesian Prediction  后验预测分布 Posterior predictive distribution，是新的数据点的概率分布。通过将后验概率边缘化而得到的。  p(\\tilde x|X,\\alpha ) = \\int {p(\\tilde x|\\theta )p(\\theta |X,\\alpha )d\\theta }  先验预测分布 Prior predictive distribution， 是新的数据点的概率分布，在先验概率上边缘化得到的。  p(\\tilde x|\\alpha ) = \\int {p(\\tilde x|\\theta )p(\\theta |\\alpha )d\\theta } 贝叶斯理论要求使用后验预测分布来进行预测推断，即预测新的，未观测到的数据点的分布。也就是说，不再将一个固定点作为预测结果，而是返回一个可能点的分布。 只有这样才能使用参数$\\theta$的整个后验分布。相比之下，频率统计学中的预测常常需要寻找当前参数下的一个最优点估计，例如通过最大似然或者最大后验估计（MAP）。然后将这个最优点代入点的分布公式中。这样做的缺点是，它没有考虑任何参数的不确定性，所以会降低预测分布的方差。\n两种类型的预测分布都有复合概率分布的形式（所以才有边际似然函数）。事实上，如果先验分布是共轭先验，那么先验分布和后验分布便来自于同一族，可以很容易看出，先验预测分布和后验预测分布同样来自于同一族的复合分布。唯一的不同在于，后验预测分布使用超参数更新后的值，而先验预测分布使用先验分布中出现的超参数的值。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"边际似然函数 统计学中，边际似然函数（marginal likelihood function 或 integrated likelihood）是一种似然函数，其中某些参数变量被边缘化。在贝叶斯统计的背景下，它常常代指证据evidence或模型证据model evidence。\n概念 给定一组独立同分布的数据点$X = ({x_1}, \\ldots ,{x_n})$,其中${x_i} \\sim p({x_i}|\\theta )$,$p({x_i}|\\theta )$是一个概率分布，其参数为$\\theta$，其中$\\theta$本身就是一个随机变量，可以用一个概率分布来描述，即$\\theta \\sim p(\\theta |\\alpha )$。而边际似然函数就是求概率$p(X|\\alpha)$是多少，其中参数$\\theta$被边缘化（marginalized out)而消失:\np(X|\\alpha ) = \\int_\\theta {p(X|\\theta )p(\\theta |\\alpha )d\\theta } 上述定义是在贝叶斯统计下提出的。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""},{"content":"高斯混合模型 混合模型概述  In statistics, a mixture model is a probabilistic model for representing the presence of subpopulations within an overall population, without requiring that an observed data set should identify the sub-population to which an individual observation belongs. Formally a mixture model corresponds to the mixture distribution that represents the probability distribution of observations in the overall population. However, while problems associated with \u0026ldquo;mixture distributions\u0026rdquo; relate to deriving the properties of the overall population from those of the sub-populations, \u0026ldquo;mixture models\u0026rdquo; are used to make statistical inferences about the properties of the sub-populations given only observations on the pooled population, without sub-population identity information.\n 从统计学角度来说，一个混合模型就是一种概率模型，用于表示总体当中子总体的存在，而不需要观测数据集识别出这个观测数据属于哪一个子总体(子分布)。\n形式上讲，对应混合分布的一个混合模型，就代表了这个总体的概率密度分布。然而，但需要从子总体的性质推导总体的一些性质时，混合模型能够直接根据总体池的观测值来对子总体的特性进行统计推断，而不需要知道他们的归属信息(属于哪一个子总体)。\nMixture Model Structure  A typical finite-dimensional mixture model is a hierarchical model consisting of the following components:\n N random variables that are observed, each distributed according to a mixture of K components, with the components belonging to the same parametric family of distributions (e.g., all normal, all Zipfian, etc.) but with different parameters N random latent variables specifying the identity of the mixture component of each observation, each distributed according to a K-dimensional categorical distribution A set of K mixture weights, which are probabilities that sum to 1. A set of K parameters, each specifying the parameter of the corresponding mixture component. In many cases, each \u0026ldquo;parameter\u0026rdquo; is actually a set of parameters. For example, if the mixture components are Gaussian distributions, there will be a mean and variance for each component. If the mixture components are categorical distributions (e.g., when each observation is a token from a finite alphabet of size V), there will be a vector of V probabilities summing to 1.  In addition, in a Bayesian setting, the mixture weights and parameters will themselves be random variables, and prior distributions will be placed over the variables. In such a case, the weights are typically viewed as a K-dimensional random vector drawn from a Dirichlet distribution (the conjugate prior of the categorical distribution), and the parameters will be distributed according to their respective conjugate priors.\n 一个典型的有限维度的混合模型是一个分层的模型，有着如下的components:\n $N$个被观测的随机变量random variables，每个随机变量都按$K$个子分布(component)构成的混合模型而分布，这些子分布都属于同一类分布，但是具体的参数值不同。 $N$个隐变量latent variables，每一个隐变量都说明了对应的随机变量所属的子分布是哪一个。每一个隐变量都按$K$维分类分布（即隐变量的取值只有$K$个） $K$个混合权重，每个混合权重指定了某个子分布所占的总体的权重。混合权重的和加起来应等于1. $K$个参数组，每一个参数组都对应着一个子分布。如高斯混合模型中，每个参数组中的参数有均值和方差。  此外，在贝叶斯假设下，混合权重和参数组将本身就是随机变量，每个都会有一个先验分布。在这种情况下，混合权重可以被视为一个$K$维的随机向量，由狄利克雷分布(分类分布的共轭先验)得出，而参数组将根据各自的先验共轭分布而分布。（关于先验概率与后验概率在这里不表。）\n从数学角度出发，一个基础的参数化的混合模型可以被以下参数所描述： 参数解读：\n$K$ 表示mixture component的个数，即混合分布中子分布的个数。\n$N$ 表示被观测的随机变量的个数。\n${\\theta _{{\\rm{i}} = 1...K}}$表示第$i$个子分布component的参数值。\n${\\phi _{{\\rm{i}} = 1...K}}$表示混合权重，即某个具体的子分布component的先验概率。\n$\\Phi$表示由${\\phi _{{\\rm{i}} = 1...K}}$组成的K维向量，和为1.\n${z _{{\\rm{i}} = 1...N}}$表示第$i$个观测值所属的component(子分布)。\n${x _{{\\rm{i}} = 1...N}}$表示第$i$个观测的随机变量。\n$F(x|\\theta )$表示某个被观测的随机变量在参数组为$\\theta$下的概率分布。\n${z _{{\\rm{i}} = 1...N}}$服从以$\\Phi$为概率的分类分布（共$K$类）。 即：${z_{i = 1...N}} \\sim Categorical(\\Phi )$\n${x_{i = 1...N}}|{z_{i = 1...N}}$ 服从$F(\\theta _{z_i} )$，即随机变量$x_i$服从其对应component（子分布）$z_i$的参数组$\\theta _{z_i}$指定的概率分布。\n注意：以上参数都是在不是在贝叶斯假设下的。\n在贝叶斯假设下，所有参数都与随机变量相关，如下图： 参数解读：\n$K$： 同上\n$N$： 同上\n$\\theta _{i=1...K}$： 同上\n$\\phi _{i=1...K}$： 同上\n$\\Phi$： 同上\n$z _{i=1...N}$：同上\n$x_{i=1...N}$：同上\n$F(x|\\theta)$：同上\n$\\alpha$：各子分布component参数的共用的超参数\n$\\beta$: 混合权重的共用的超参数\n$H(\\theta|\\alpha)$： 子分布component参数的先验概率分布，基于参数$\\alpha$。\n$\\theta _{i=1...K}$： 服从概率分布$H(\\theta|\\alpha)$,即$ \\theta _ {i=1...K} \\sim H(\\theta|\\alpha)$\n$\\Phi$： 服从$Symmetric-Dirichlet _K(\\beta)$分布。\n$z_{i=1...N}|\\Phi$：服从$Categorical(\\phi)$，即以$\\Phi$为概率的分类分布。\n$x_{i=1...N}|z_{i=1...N},\\theta_{i=1...K}$：服从$F(\\theta_{z_i})$的分布。\n我们使用$F$和$H$来对观测值和参数进行任意描述。一般来说，$H$是$F$的共轭先验。两个最常见的$F$的选择是：高斯分布，即正态分布（对实值观测值），或者是分类分布（对离散观测值）。其他常见的可以作为混合组件的概率分布有：\n 二项分布Binomial distribution: 对于某一事物总数固定，统计其positive occurrence。如投票等。 多项分布Multinomial distribution： 类似于二项分布，不过事情的结果可能不止有两个。 负二项分布Negative binomial distribution： 对于二项分布类型的观测值，感兴趣的是在某个给定的次数的positive结果出现前，negative结果出现的次数。 泊松分布Poisson distribution：统计某一事件在给定时间内发生的次数，该事件具有固定的发生率。 指数分布Exponential distribution：某个事件下一次出现所需要的的时间的分布，该事件具有固定的发生率。 对数正态分布Log-normal distribution： 用于那些假定呈指数增长的正实数，如收入或者价格。 多元正态分布Multivariate normal distribution：即多元高斯分布。结果向量的每一个分量都是一个高斯分布。 多元t分布Multivariate Student's-t distribution：用于重尾相关结果的向量。 伯努利分布值的向量，对应于例如黑白图像，每个值代表一个像素，可应用于手写识别。  非贝叶斯假设下的高斯混合模型 其各个参数为：\n对应上文很容易理解，不再赘述。\n图示： 贝叶斯假设下的高斯混合模型 其各个参数为：\n其中值得特殊说明的是：\n${\\mu _0},\\lambda ,\\nu ,\\sigma _0^2$: 是$\\theta$即$\\mu $与$\\sigma$共享的超参数。\n$\\mu_{i=1...K}$：$\\mu_{i=1...K} \\sim N(\\mu_0,\\lambda\\sigma _i^2)$,即参数$\\mu$服从以$mu_0,\\lambda\\sigma _i^2$为参数的高斯分布。\n$\\sigma_{i=1...K}^2$：$\\sigma_{i=1...K}^2 \\sim Inverse-Gamma(\\nu,\\sigma_0^2)$。\n多元高斯混合模型 一个贝叶斯高斯混合模型常常被推广去拟合未知的参数向量(下面用粗体表示），或者多元正态分布。在多元分布中（即对具有$N$个随机变量的向量$\\bm{x}$），我们可以使用高斯混合模型的先验分布的矢量估计来对该$\\bm{x}$进行建模：\n其中第$i$个向量子分布component被权重为${\\phi _i}$,方差为$\\bm{\\mu}$，协方差矩阵为$\\bm{\\sum _i}$的正态分布所定义。为了将这个先验分布纳入贝叶斯估计，这个先验要与已知的分布$p(\\bm{x}|\\bm{\\theta})$相乘，该分布是数据$\\bm{x}$在待估参数$\\bm{\\theta}$上的分布。根据如上阐述，那么后验分布$p(\\bm{\\theta}|\\bm{x})$也是一个高斯混合分布：\np(\\bm{\\theta} |\\bm{x}) = \\sum\\limits_{i = 1}^K {{{\\tilde \\phi }_i}N({\\bm{\\tilde \\mu }_i},{\\bm{\\tilde \\Sigma }_i})} 其中的参数：${\\tilde \\phi }_i$，${\\bm{\\tilde \\mu }_i}$和${\\bm{\\tilde \\Sigma }_i}$可以使用EM算法进行更新。虽然关于EM算法的参数更新已经很完善了，但是提供对这些参数的初始估计仍然是一个十分活跃的研究领域。必须说明的是，该公式产生了一个完全后验分布的一个封闭形式的解。随机变量$\\bm{\\theta}$的估计值可以通过取其中几个估计量的其中一个来获得，如取后验分布的均值或者最大值。\n","date":"0001-01-01T00:00:00Z","permalink":"https://codefmeister.github.io/p/","title":""}]