<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python基础 on Codefmeister</title>
    <link>https://codefmeister.github.io/tags/python%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in python基础 on Codefmeister</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://codefmeister.github.io/tags/python%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>glob 函数作用分析</title>
      <link>https://codefmeister.github.io/p/glob-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codefmeister.github.io/p/glob-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/</guid>
      <description>Python 中 glob 作用简介 glob库中有两个函数:glob.glob()， glob.iglob(). 其作用是：遍历给定文件夹下所有符合条件的文件。
常用的匹配符有：
 * 代表所有 ? 代表满足单个字符 []代表满足list中指定的字符  glob.glob(path, *, recursive=False) 在这里只介绍最基础的用法，用到的时候再深究。
partition = &amp;#34;train&amp;#34; path_list = glob.glob(os.path.join(DATA_DIR, &amp;#39;modelnet40_ply_hdf5_2048&amp;#39;, &amp;#39;ply_data_%s*.h5&amp;#39; % partition)) 上述代码片段的意思是，寻找&amp;quot;DATADIR/modelnet40_ply_hdf5_2048/&amp;ldquo;下所有叫做&amp;quot;ply_data_train*.h5&amp;quot;的文件，并将其打包为一个**列表list**返回。
如可能返回的是结果是：
[&amp;ldquo;ply_data_train0.h5&amp;rdquo;, &amp;ldquo;ply_data_trainTx.h5&amp;rdquo;]
glob.iglob(path, *, recursive=False) 作用与上面的函数一致。但是返回的不是list,而是一个iterable的迭代器。</description>
    </item>
    
    <item>
      <title>parse_args传参</title>
      <link>https://codefmeister.github.io/p/parse_args%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codefmeister.github.io/p/parse_args%E4%BC%A0%E5%8F%82/</guid>
      <description>python中parse_args以及namespace 声明：本笔记记录的是使用parse_args在函数内部进行传参，并非在命令行进行输入。所有操作均需先进行import argparse。
通过以下操作，可以在传参时直接传入args这个namespace，而不是具体的某个参数。
创建argparse对象，设置参数以及默认值 使用argparse.ArgumentParser()创建对象，使用argparser.add_argument()操作设置参数以及默认值。
Example: parser = argparse.ArgumentParser(&#39;Exampe&#39;) parser.add_argument(&#39;--NDArray&#39;,type=np.ndarray,default= NDArray) argument中的参数类型丰富多样，可以是任何数据类型。使用--name来设置参数名，使用type = 设置类型，使用default设置初始化后的默认值。
parser转换为name_space 使用命令parser.parse_args()，即可将一个ArgumentParser转换为name_space.转换为namespace后，可以对先前设置的argument通过.name的方式类似属性一样进行访问，同样可以进行赋值，存取等操作。
args = parser.parse_args() print(args.NDArray) a = np.array([[1,2],[3,4]]) args.NDArray = a namespace 的一些操作 在初始化ArgumentParser时，我们可能忘记添加某些argument，这就导致在转换为namespace后缺少某些attribute.
我们可以对args使用.__setattr(name,value)设置新的属性值。开辟之后就可以使用.attr的方式进行赋值存取。 同样，我们可以使用.__contains__(attribute_name)判断args这个namespace是否含有该属性。
args.__setattr__(&#39;cloudArray&#39;,[]) args.cloudArray.append(1024) if args.__contains__(&#39;cloudArray&#39;): print(&#39;namespace args contains attr&#39;) </description>
    </item>
    
  </channel>
</rss>
